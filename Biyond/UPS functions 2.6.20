create function prod.get_best_routes(p_tenant_id text, p_pickup_address_id integer, p_delivery_address_id integer,
                                     p_mode text, p_loadterm text, p_incoterms text, p_port_of_loading_id integer,
                                     p_port_of_discharge_id integer, p_importexport text, p_carrier_ids text,
                                     p_weight double precision, p_hazard_class text, p_service_type text,
                                     p_commodity_type text)
    returns TABLE
            (
                call_id                integer,
                s_id                   text,
                "chargeCode"           text,
                "serviceTypeEnum"      text,
                "isSelected"           boolean,
                "durationInHours"      double precision,
                "sendSpot"             boolean,
                location_type          text,
                location_id            integer,
                location_city          text,
                "location_stateCode"   text,
                "location_countryCode" text,
                location_name          text,
                location_address       text,
                "location_postalCode"  text,
                "location_portCode"    text,
                "location_portName"    text,
                "location_portType"    text,
                "carrierId"            text,
                carrier_key            text,
                "carrierErpId"         text,
                "carrierName"          text,
                "carrierType"          text,
                "numberOfUnits"        double precision,
                "ratePerUnit"          double precision,
                "rateUnitType"         text,
                "rateCurrencyCode"     text,
                "ratePerUnitConverted" double precision,
                shipment_id            text,
                local_currency         text,
                "existsInHistory"      boolean
            )
    language plpgsql
as
$$
--select * from prod.get_best_routes('005237f9-6779-4c68-89d6-d0800559d4f4', 656992,31539,'SEA','FCL','CFR',29068,7784,'Export','aa0ce6c7-aaf7-4a49-9d0f-a076b9155c21',5577,'','','General cargo')

DECLARE
    v_from    INTEGER;
    v_to      INTEGER;
    v_call_id INTEGER;

BEGIN

    DROP TABLE IF EXISTS tmp_shipments;

    INSERT INTO prod.log_best_routes ("LogDateTime", "call")
    VALUES (NOW(), concat('select * from prod.get_best_routes(''', p_tenant_id, ''', ',
                          p_pickup_address_id, ',', p_delivery_address_id, ',''', p_mode, ''',''', p_loadterm, ''',''',
                          p_incoterms,
                          ''',', p_port_of_loading_id, ',', p_port_of_discharge_id, ',''', p_importexport, ''',''',
                          p_carrier_ids,
                          ''',', p_weight, ',''', p_hazard_class, ''',''', p_service_type, ''',''', p_commodity_type,
                          ''')'));

    -- SELECT INTO v_call_id currval(pg_get_serial_sequence('prod.log_best_routes', 'call_id'));

--get weight tier
    SELECT INTO v_from, v_to ti."from",
                             ti."to"
    FROM mrr.freight_weight_tiers ti
    WHERE "mode" = p_mode
      AND "loadterm" = p_loadterm
      AND p_weight BETWEEN "from" AND "to";

    --drop table if exists prod.tmp_shipments;

--select shipments matching the parameters
    CREATE TEMP TABLE IF NOT EXISTS tmp_shipments AS
        (SELECT sh.*
         FROM prod.shipments sh
         WHERE "tenantId" = p_tenant_id
           AND "isFreight" = TRUE
           AND sh."mode" = p_mode
           AND coalesce("mainFreight_freight_loadTerm", 'LCL') = p_loadterm
           AND sh."pickupAddress_location_id" = p_pickup_address_id
           AND sh."deliveryAddress_location_id" = p_delivery_address_id
           AND sh."portOfLoading_location_id" = p_port_of_loading_id
           AND sh."portOfDischarge_location_id" = p_port_of_discharge_id
           --and p_carrier_ids LIKE '%' || "mainFreight_freight_carrierId" || '%'
           --	and sh."incoTerms" = p_incoterms
           --	and sh."serviceType" = p_service_type -- Door_to_Port, etc.
           --	and "commodityType" = p_commodityType
           -- and month("erpDate?") = month(Now())  -- add later - similar period - need to figure out what is similar period (holiday season, etc.)

           --and (p_hazard_class == '' or sh."hazardClass" == p_hazard_class) --add after ETL? - there are no hazardous shipments in history
           AND ((sh."mode" = 'AIR' AND "totalWeight" BETWEEN v_from AND v_to)
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'FCL'
                    --and "totalNumberOfUnits" between v_from and v_to --need to add this parameter!!
                    )
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'LCL'))
            --add ROAD mode later
            --what about non-freight mode?
        )
            ORDER BY sh."totalCost" ASC, sh."totalProfit" DESC-- "creationDateErp" desc
            LIMIT 1;
    --add freightPieceType for later versions (Damco use only pallets)

    /*INSERT INTO prod.log_best_routes_responses (call_id, s_id, "chargeCode", "isSelected",
                                                "durationInHours", "sendSpot", location_type, location_id,
                                                location_city, "location_stateCode",
                                                "location_countryCode", location_name, location_address,
                                                "location_postalCode",
                                                "location_portCode", "location_portName", "location_portType",
                                                "carrierId", carrier_key,
                                                "carrierErpId", "carrierName", "carrierType", "numberOfUnits",
                                                "ratePerUnit",
                                                "rateUnitType", "rateCurrencyCode", "ratePerUnitConverted", shipment_id)
        (*/
    return query
--origin charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(o."origin_serviceItems_chargeCode" as text) as                                            "chargeCode",
                        cast(o."origin_serviceItems_serviceTypeEnum" AS TEXT) AS                                       "serviceTypeEnum",
                        TRUE AS                                                                                        "isSelected",
            /*cast(case when trim(o."origin_serviceItems_chargeDescription") = 'Airfreight'
                then DATE_PART('day', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp)) * 24 + DATE_PART('hour', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp) )
                else null
                end as double precision) as "durationInHours",*/
                        cast(0 AS DOUBLE PRECISION) AS                                                                 "durationInHours",
                        cast(FALSE AS BOOLEAN) AS                                                                      "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(o."origin_serviceItems_serviceParty_id" AS TEXT) AS                                       "carrierId",
                        cast(NULL AS TEXT) AS                                                                          "carrier_key", --see python
                        cast(o."origin_serviceItems_serviceParty_erpId" AS TEXT) AS                                    "carrierErpId", --change to "erpId"
                        cast(o."origin_serviceItems_serviceParty_name" AS TEXT) AS                                     "carrierName",
                        --cast(o."origin_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT) AS                                                    "carrierType",

                        cast(
                                coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION) AS "numberOfUnits",
                        cast(
                                coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) as DOUBLE PRECISION) AS   "ratePerUnit",
                        cast(o."origin_serviceItems_quantityUnit" AS TEXT) AS                                          "rateUnitType",
                        cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT) AS                          "rateCurrencyCode",

            /*
           CASE
               WHEN o."origin_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                       COALESCE(o."origin_serviceItems_serviceRevenue_numberOfUnits", 0) AS DOUBLE PRECISION)
               ELSE cast(
                       coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
               END                                                  AS "numberOfUnits",
           CASE
               WHEN o."origin_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                       COALESCE(o."origin_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
               ELSE cast(
                       coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
               END                                                  AS "ratePerUnit",
           cast(o."origin_serviceItems_quantityUnit" AS TEXT)       AS "rateUnitType",
           CASE
               WHEN o."origin_serviceItems_serviceCost_rateCurrencyCode" IS NULL
                   THEN CAST(o."origin_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
               ELSE cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
               END                                                  AS "rateCurrencyCode",
*/
                        --cast(o."origin_serviceItems_serviceCost_rateUnitType" as text) as "rateUnitType",

                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(o."origin_serviceItems_serviceRevenue_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION) AS                                                       "ratePerUnitConverted",
                        sh.id AS                                                                                       "shipment_id",
                        "totalCurrency" as                                                                             "local_currency",
                        cast(TRUE as boolean) as                                                                       "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_origin o
                            ON o.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = o."origin_serviceItems_chargeCode"
            /*left join mrr.charge_code_groups cc
                on trim(cc.charge_code_group) = trim(o."origin_serviceItems_chargeCode")
            inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                on inc.charge_code = cc.charge_code
                and inc.incoterms = "incoterms"
                and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfLoading_location_id"
             --on service_location.location_id = o."origin_serviceItems_serviceParty_location_id"
        where o."origin_serviceItems_serviceCost_ratePerUnit" is not null

        UNION ALL

--destination charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(d."destination_serviceItems_chargeCode" as text) as                               "chargeCode",
                        cast(d."destination_serviceItems_serviceTypeEnum" AS TEXT) AS                          "serviceTypeEnum",
                        TRUE AS                                                                                "isSelected",
                        cast(0 AS DOUBLE PRECISION) AS                                                         "durationInHours",
                        cast(FALSE AS BOOLEAN) AS                                                              "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(d."destination_serviceItems_serviceParty_id" AS TEXT) AS                          "carrierId",
                        cast(NULL AS TEXT) AS                                                                  "carrier_key", --see python
                        cast(d."destination_serviceItems_serviceParty_erpId" AS TEXT) AS                       "carrierErpId", --change to "erpId"
                        cast(d."destination_serviceItems_serviceParty_name" AS TEXT) AS                        "carrierName",
                        --cast(d."destination_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT) AS                                            "carrierType",

                        cast(
                                d."destination_serviceItems_serviceCost_numberOfUnits" AS DOUBLE PRECISION) AS "numberOfUnits",
                        cast(
                                d."destination_serviceItems_serviceCost_ratePerUnit" as DOUBLE PRECISION) AS   "ratePerUnit",
                        cast(d."destination_serviceItems_quantityUnit" AS TEXT) AS                             "rateUnitType",
                        cast(
                                d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT) AS          "rateCurrencyCode",
            /*
           CASE
               WHEN d."destination_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                       COALESCE(d."destination_serviceItems_serviceRevenue_numberOfUnits",
                                0) AS DOUBLE PRECISION)
               ELSE cast(
                       coalesce(d."destination_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
               END                                                       AS "numberOfUnits",
           CASE
               WHEN d."destination_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                       COALESCE(d."destination_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
               ELSE cast(
                       coalesce(d."destination_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
               END                                                       AS "ratePerUnit",
           cast(d."destination_serviceItems_quantityUnit" AS TEXT)       AS "rateUnitType",
           CASE
               WHEN d."destination_serviceItems_serviceCost_rateCurrencyCode" IS NULL THEN CAST(
                       d."destination_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
               ELSE cast(d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
               END                                                       AS "rateCurrencyCode",
                */
                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(d."destination_serviceItems_serviceCost_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION) AS                                               "ratePerUnitConverted",
                        sh.id AS                                                                               "shipment_id",
                        "totalCurrency" as                                                                     "local_currency",
                        cast(TRUE as boolean) as                                                               "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_destination d
                            ON d.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = d."destination_serviceItems_chargeCode"
                 LEFT JOIN prod.shipments_mainfreight f
                           ON f.s_id = sh.s_id
            /*left join mrr.charge_code_groups cc
                on trim(cc.charge_code_group) = trim(d."destination_serviceItems_chargeCode")
            inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                on inc.charge_code = cc.charge_code
                and inc.incoterms = "incoterms"
                and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfDischarge_location_id"
        where d."destination_serviceItems_serviceCost_ratePerUnit" is not null;

    /* RETURN QUERY
         SELECT *
         FROM prod.log_best_routes_responses r
         WHERE r."call_id" = v_call_id;*/

END;
$$;

alter function prod.get_best_routes(text, integer, integer, text, text, text, integer, integer, text, text, double precision, text, text, text) owner to "Postgresadmin";

create function prod.get_customer_routes(p_tenant_id character, p_customer_id character, p_number_of_days integer)
    returns TABLE
            (
                "customerId"                            character,
                "RouteNum"                              bigint,
                "lastDate"                              timestamp without time zone,
                "freightType"                           character,
                "customerType"                          character,
                "importExportType"                      character,
                "portOfLoading_location_id"             integer,
                "portOfLoading_type"                    character,
                "portOfLoading_address"                 character,
                "portOfLoading_city"                    character,
                "portOfLoading_state"                   character,
                "portOfLoading_postalCode"              character,
                "portOfLoading_country"                 character,
                "portOfLoading_code"                    character,
                "portOfLoading_name"                    character,
                "portOfDischarge_location_id"           integer,
                "portOfDischarge_type"                  character,
                "portOfDischarge_address"               character,
                "portOfDischarge_city"                  character,
                "portOfDischarge_state"                 character,
                "portOfDischarge_postalCode"            character,
                "portOfDischarge_country"               character,
                "portOfDischarge_code"                  character,
                "portOfDischarge_name"                  character,
                "portType"                              character,
                "amountOfShipments"                     integer,
                "shipmentsTotalValue"                   integer,
                "shipmentsTotalValueCurrency"           character,
                "amountOfContractedShipments"           integer,
                "contractedShipmentsTotalValue"         integer,
                "contractedShipmentsTotalValueCurrency" character
            )
    language sql
as
$$
--select * from prod.get_customer_routes('005237f9-6779-4c68-89d6-d0800559d4f4', '93d471b0-c39c-4874-9847-957bf72cad7c', 1000)

SELECT DISTINCT "customer_id"                                      AS "customerId",
                cast(route_id AS BIGINT)                           AS "RouteNum",
                cast("last_date" AS TIMESTAMP)                     AS "lastDate",
                "mode"                                             AS "freightType",
                "customer_type"                                    AS "customerType",
                "importExport"                                     AS "importExportType",
                cast(pol.location_id AS INTEGER)                   AS "portOfLoading_location_id",
                pol."location_type"                                AS "portOfLoading_type",-- "PORT" vs "DOOR"
                coalesce(pol."location_city", '') || ', ' || coalesce(pol."location_stateCode", '') || ', ' ||
                coalesce(pol."location_countryCode", '')           AS "portOfLoading_address",
                pol."location_city"                                AS "portOfLoading_city",
                pol."location_stateCode"                           AS "portOfLoading_state",
                pol."location_postalCode"                          AS "portOfLoading_postalCode",
                pol."location_countryCode"                         AS "portOfLoading_country",
                pol."location_portCode"                            AS "portOfLoading_code",
                pol."location_portName"                            AS "portOfLoading_name",
                cast(pod.location_id AS INTEGER)                   AS "portOfDischarge_location_id",
                pod."location_type"                                AS "portOfDischarge_type", --"PORT" vs "DOOR"
                coalesce(pod."location_city", '') || ', ' || coalesce(pod."location_stateCode", '') || ', ' ||
                coalesce(pod."location_countryCode", '')           AS "portOfDischarge_address",
                pod."location_city"                                AS "portOfDischarge_city",
                pod."location_stateCode"                           AS "portOfDischarge_state",
                pod."location_postalCode"                          AS "portOfDischarge_postalCode",
                pod."location_countryCode"                         AS "portOfDischarge_country",
                pod."location_portCode"                            AS "portOfDischarge_code",
                pod."location_portName"                            AS "portOfDischarge_name",
                pol."location_portType"                            AS "portType",
                cast("number_of_shipments_last150days" AS INTEGER) AS "amountOfShipments",
                cast("totalRevenueUSD" AS INTEGER)                 AS "shipmentsTotalValue",
                "currency"                                         AS "shipmentsTotalValueCurrency",
                cast(NULL AS INTEGER)                              AS "amountOfContractedShipments", --?
                cast(NULL AS INTEGER)                              AS "contractedShipmentsTotalValue", --?
                NULL                                               AS "contractedShipmentsTotalValueCurrency" --?

FROM (SELECT "customer_id",
             MAX(route_id)                          AS route_id,
             MAX("last_date")                       AS "last_date",
             "mode",
             "customer_type",
             "importExport",
             SUM("totalRevenueUSD")                 AS "totalRevenueUSD",
             'USD'                                  AS "currency",
             SUM("number_of_shipments_last150days") AS "number_of_shipments_last150days",
             "portOfLoading_location_id",
             "portOfDischarge_location_id",
             "tenantId",
             "isFreight"
      FROM prod.routes
      GROUP BY "customer_id", mode, customer_type, "importExport", "portOfLoading_location_id",
               "portOfDischarge_location_id", "tenantId", "isFreight") AS r
         LEFT JOIN prod.shipments_locations pol
                   ON pol.location_id = r."portOfLoading_location_id"
         LEFT JOIN prod.shipments_locations pod
                   ON pod.location_id = r."portOfDischarge_location_id"

WHERE "tenantId" = p_tenant_id
  AND customer_id = p_customer_id
  AND "isFreight" = TRUE;
    --and cast("executionDate" as timestamp) >= (Now() - (numberofdays * interval '1' day))
    --order by "lastDate" DESC;


$$;

alter function prod.get_customer_routes(char, char, integer) owner to "Postgresadmin";

create function prod.get_freights(p_tenant_id character, p_freight_ids character)
    returns TABLE
            (
                id                            character,
                "pickupAddress_id"            integer,
                "pickupAddress_city"          character,
                "pickupAddress_stateCode"     character,
                "pickupAddress_name"          character,
                "pickupAddress_countryCode"   character,
                "pickupAddress_postalCode"    character,
                "pickupAddress_address"       character,
                "pickupAddressType"           character,
                "pickupAddress_insertTime"    character,
                "deliveryAddress_id"          integer,
                "deliveryAddress_city"        character,
                "deliveryAddress_stateCode"   character,
                "deliveryAddress_name"        character,
                "deliveryAddress_countryCode" character,
                "deliveryAddress_postalCode"  character,
                "deliveryAddress_address"     character,
                "deliveryAddressType"         character,
                "deliveryAddress_insertTime"  character,
                "findBy"                      character,
                "jobMode"                     character,
                "loadTerm"                    character,
                "incoTerms"                   character,
                "importExport"                character,
                "pieceId"                     integer,
                "commodityType"               character,
                hazardous                     boolean,
                "hazardClass"                 character,
                "freightPieceType"            character,
                "subType"                     character,
                weight                        numeric,
                "weightUnit"                  character,
                width                         numeric,
                height                        numeric,
                depth                         numeric,
                "measurementUnits"            character,
                amount                        numeric
            )
    language sql
as
$$
SELECT "id",
       pickup_loc."location_id"                                 as "pickupAddress_id",
       pickup_loc."location_city"                               as "pickupAddress_city",
       pickup_loc."location_stateCode"                          as "pickupAddress_stateCode",
       pickup_loc."location_name"                               as "pickupAddress_name",
       pickup_loc."location_countryCode"                        as "pickupAddress_countryCode",
       pickup_loc."location_postalCode"                         as "pickupAddress_postalCode",
       pickup_loc."location_address"                            as "pickupAddress_address",
       pickup_loc."location_type"                               as "pickupAddressType",
       Null                                                     as "pickupAddress_insertTime",

       delivery_loc."location_id"                               as "deliveryAddress_id",
       delivery_loc."location_city"                             as "deliveryAddress_city",
       delivery_loc."location_stateCode"                        as "deliveryAddress_stateCode",
       delivery_loc."location_name"                             as "deliveryAddress_name",
       delivery_loc."location_countryCode"                      as "deliveryAddress_countryCode",
       delivery_loc."location_postalCode"                       as "deliveryAddress_postalCode",
       delivery_loc."location_address"                          as "deliveryAddress_address1",
       delivery_loc."location_type"                             as "deliveryAddressType",
       Null                                                     as "deliveryAddress_insertTime",

       null                                                     as "findBy",
       "mode"                                                   as "jobMode",
       case
           when "mode" = 'AIR' then 'LCL'
           else "mainFreight_freight_loadTerm" end              as "loadTerm",
       "incoTerms",
       "importExport",

       "mainFreight_freightPieces_freightPieceId"               as "pieceId",
       "mainFreight_freightPieces_commodityType"                as "commodityType",
       cast("mainFreight_freightPieces_hazardous" as boolean)   as "hazardous",
       "mainFreight_freightPieces_hazardClass"                  as "hazardClass",
       "mainFreight_freightPieces_freightPieceType"             as "freightPieceType",
       "mainFreight_freightPieces_subType"                      as "subType",
       cast("mainFreight_freightPieces_pieceWeight" as numeric) as "weight",
       "mainFreight_freightPieces_pieceWeightUnits"             as "weightUnit",
       cast("mainFreight_freightPieces_width" as numeric)       as "width",
       cast("mainFreight_freightPieces_height" as numeric)      as "height",
       cast("mainFreight_freightPieces_length" as numeric)      as "depth",
       "mainFreight_freightPieces_measurementUnits"             as "measurementUnits",
       cast("mainFreight_freightPieces_quantity" as numeric)    as "amount"

FROM prod.shipments sh
         left join prod.shipments_mainfreight f
                   on sh.id = f.shipment_id
         left join prod.shipments_locations pickup_loc
                   on pickup_loc.location_id = sh."pickupAddress_location_id"
         left join prod.shipments_locations delivery_loc
                   on pickup_loc.location_id = sh."deliveryAddress_location_id"
where "tenantId" = p_tenant_id
  and p_freight_ids LIKE '%' || id || '%'
order by "creationDateErp" desc


$$;

alter function prod.get_freights(char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_commoditytype(p_tenant_id character, p_shipper_id character,
                                                              p_consignee_id character, p_amount_of_shipments integer,
                                                              p_origin_port_location_id integer,
                                                              p_destination_port_location_id integer,
                                                              p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freightPieces_commodityType", ', ') as "value"
from (select f."mainFreight_freightPieces_commodityType"
      FROM prod.shipments sh
               inner join prod.shipments_mainfreight f
                          on sh.id = f.shipment_id
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_commoditytype(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_hazardclass(p_tenant_id character, p_shipper_id character,
                                                            p_consignee_id character, p_amount_of_shipments integer,
                                                            p_origin_port_location_id integer,
                                                            p_destination_port_location_id integer,
                                                            p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freightPieces_hazardClass", ', ') as "value"
from (select f."mainFreight_freightPieces_hazardClass"
      FROM prod.shipments sh
               inner join prod.shipments_mainfreight f
                          on sh.id = f.shipment_id
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_hazardclass(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_incoterms(p_tenant_id character, p_shipper_id character,
                                                          p_consignee_id character, p_amount_of_shipments integer,
                                                          p_origin_port_location_id integer,
                                                          p_destination_port_location_id integer,
                                                          p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "incoTerms", ', ') as "value"
from (select "incoTerms"
      FROM prod.shipments sh
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_incoterms(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_loadtype(p_tenant_id character, p_shipper_id character,
                                                         p_consignee_id character, p_amount_of_shipments integer,
                                                         p_origin_port_location_id integer,
                                                         p_destination_port_location_id integer,
                                                         p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freight_loadTerm", ', ') as "value"
from (select "mainFreight_freight_loadTerm"
      FROM prod.shipments sh
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_loadtype(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_packagetype(p_tenant_id character, p_shipper_id character,
                                                            p_consignee_id character, p_amount_of_shipments integer,
                                                            p_origin_port_location_id integer,
                                                            p_destination_port_location_id integer,
                                                            p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freightPieces_freightPieceType", ', ') as "value"
from (select f."mainFreight_freightPieces_freightPieceType"
      FROM prod.shipments sh
               inner join prod.shipments_mainfreight f
                          on sh.id = f.shipment_id
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_packagetype(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_optional_delivery_addresses(p_tenant_id character, p_consignee_id character,
                                                     p_number_of_days integer, p_destination_port_location_id integer,
                                                     p_import_export character, p_freight_type character)
    returns TABLE
            (
                location_id                  integer,
                type                         character,
                city                         character,
                "stateCode"                  character,
                "countryCode"                character,
                address                      character,
                "postalCode"                 character,
                "portCode"                   character,
                "portName"                   character,
                "portType"                   character,
                "originalShipmentId"         character,
                "amountOfShipmentsLastXDays" bigint,
                "freightType"                character,
                amount                       integer
            )
    language sql
as
$$
SELECT "location_id",
       "location_type"                            as "type",
       coalesce("location_name", "location_city") as "city",
       "location_stateCode"                       as "stateCode",
       "location_countryCode"                     as "countryCode",
       "location_address"                         as "address",
       "location_postalCode"                      as "postalCode",
       Null                                       as "portCode",
       Null                                       as "portName",
       Null                                       as "portType",
       max("id")                                  as "originalShipmentId", --this will change
       count(distinct id)                         as "amountOfShipmentsLastXDays",
       "mode"                                     as "freightType",
       cast(Null as int)                          as "amount"              --?

FROM prod.shipments sh
         inner join prod.shipments_locations loc
                    on loc.location_id = sh."deliveryAddress_location_id"
where sh."tenantId" = p_tenant_id
  and "portOfDischarge_location_id" = p_destination_port_location_id
  and consignee_id = p_consignee_id
  and "mode" = p_freight_type
  --and cast("executionDate" as timestamp) >= (Now() - (p_number_of_days * interval '1' day))
group by location_id, "location_city", "location_stateCode", "location_countryCode",
         "location_address", "location_postalCode", "mode", location_type, "location_name"

$$;

alter function prod.get_optional_delivery_addresses(char, char, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_optional_pickup_addresses(p_tenant_id character, p_shipper_id character,
                                                   p_number_of_days integer, p_origin_port_location_id integer,
                                                   p_import_export character, p_freight_type character)
    returns TABLE
            (
                location_id                  integer,
                type                         character,
                city                         character,
                "stateCode"                  character,
                "countryCode"                character,
                address                      character,
                "postalCode"                 character,
                "portCode"                   character,
                "portName"                   character,
                "portType"                   character,
                "originalShipmentId"         character,
                "amountOfShipmentsLastXDays" bigint,
                "freightType"                character,
                amount                       integer
            )
    language sql
as
$$
SELECT "location_id",
       "location_type"                            as "type",
       coalesce("location_name", "location_city") as "city",
       "location_stateCode"                       as "stateCode",
       "location_countryCode"                     as "countryCode",
       "location_address"                         as "address",
       "location_postalCode"                      as "postalCode",
       Null                                       as "portCode",
       Null                                       as "portName",
       Null                                       as "portType",
       max("id")                                  as "originalShipmentId", --this will change
       count(distinct id)                         as "amountOfShipmentsLastXDays",
       "mode"                                     as "freightType",
       cast(Null as int)                          as "amount"              --?

FROM prod.shipments sh
         inner join prod.shipments_locations loc
                    on loc.location_id = sh."pickupAddress_location_id"
where sh."tenantId" = p_tenant_id
  and "portOfLoading_location_id" = p_origin_port_location_id
  and shipper_id = p_shipper_id
  and "mode" = p_freight_type
  --and cast("executionDate" as timestamp) >= (Now() - (p_number_of_days * interval '1' day))
group by location_id, "location_city", "location_stateCode", "location_countryCode",
         "location_address", "location_postalCode", "mode", location_type, "location_name"

$$;

alter function prod.get_optional_pickup_addresses(char, char, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_potential_freights(p_tenant_id character, p_shipper_id character, p_consignee_id character,
                                            p_amount_of_shipments integer, p_origin_port_location_id integer,
                                            p_destination_port_location_id integer,
                                            p_pickup_address_location_id integer,
                                            p_delivery_address_location_id integer)
    returns TABLE
            (
                date            timestamp without time zone,
                "shipmentId"    character,
                "freightType"   character,
                "loadType"      character,
                hazardous       boolean,
                units           double precision,
                total           integer,
                "totalCurrency" character,
                "incoTerms"     character
            )
    language sql
as
$$
SELECT cast("creationDateErp" as timestamp) as "date",
       "id"                                 as "shipmentId",
       "mode"                               as "freightType",
       "mainFreight_freight_loadTerm"       as "loadType",
       "hazardous",
       cast(null as double precision)       as "units",
       --"totalNumberOfUnits" as "units",
       cast("totalRevenue" as integer)      as "total",
       --'USD' as "totalCurrency", 
       coalesce("totalCurrency", 'USD')     as "totalCurrency",
       "incoTerms"                          as "incoterms"
FROM prod.shipments
where "tenantId" = p_tenant_id
  and "isFreight" = TRUE
  and shipper_id = shipper_id
  and consignee_id = consignee_id
  and "portOfLoading_location_id" = p_origin_port_location_id
  and "portOfDischarge_location_id" = p_destination_port_location_id
  and (p_pickup_address_location_id is null or "pickupAddress_location_id" = p_pickup_address_location_id)
  and (p_delivery_address_location_id is null or "deliveryAddress_location_id" = p_delivery_address_location_id)

order by "creationDateErp" desc
limit p_amount_of_shipments

$$;

alter function prod.get_potential_freights(char, char, char, integer, integer, integer, integer, integer) owner to "Postgresadmin";

create function prod.get_potential_legs(p_tenant_id character, p_pickup_address_location_id integer,
                                        p_delivery_address_location_id integer, p_mode character, p_loadterm character,
                                        p_incoterms character)
    returns TABLE
            (
                "portOfLoading_location_id"   integer,
                "portOfLoading_type"          character,
                "portOfLoading_city"          character,
                "portOfLoading_state"         character,
                "portOfLoading_country"       character,
                "portOfLoading_code"          character,
                "portOfLoading_name"          character,
                "portOfLoading_portType"      character,
                "portOfDischarge_location_id" integer,
                "portOfDischarge_type"        character,
                "portOfDischarge_city"        character,
                "portOfDischarge_state"       character,
                "portOfDischarge_country"     character,
                "portOfDischarge_code"        character,
                "portOfDischarge_name"        character,
                "portOfDischarge_portType"    character,
                "carrierName"                 character,
                "carrierCode"                 character,
                "carrierId"                   character,
                "isCharged"                   boolean
            )
    language sql
as
$$
SELECT distinct pol."location_id"                 as "portOfLoading_location_id",
                pol."location_type"               as "portOfLoading_type",-- "PORT" vs "DOOR"
                pol."location_city"               as "portOfLoading_city",
                pol."location_stateCode"          as "portOfLoading_state",
                pol."location_countryCode"        as "portOfLoading_country",
                pol."location_portCode"           as "portOfLoading_code",
                pol."location_portName"           as "portOfLoading_name",
                pol."location_portType"           as "portOfLoading_portType", --'Airport' vs 'Seaport'

                pod.location_id                   as "portOfDischarge_location_id",
                pod."location_type"               as "portOfDischarge_type", --"PORT" vs "DOOR"
                pod."location_city"               as "portOfDischarge_city",
                pod."location_stateCode"          as "portOfDischarge_state",
                pod."location_countryCode"        as "portOfDischarge_country",
                pod."location_portCode"           as "portOfDischarge_code",
                pod."location_portName"           as "portOfDischarge_name",
                pol."location_portType"           as "portOfDischarge_portType",

                "mainFreight_freight_carrierName" as "carrierName",
                "mainFreight_freight_carrierCode" as "carrierCode",
                "mainFreight_freight_carrierId"   as "carrierId",

                true                              as "isCharged" -- logic is in python (based on incoterms)

FROM prod.shipments sh
         left join prod.shipments_locations pol
                   on pol.location_id = sh."portOfLoading_location_id"
         left join prod.shipments_locations pod
                   on pod.location_id = sh."portOfDischarge_location_id"

where "tenantId" = p_tenant_id
  and "mode" = p_mode
  and "mainFreight_freight_loadTerm" = p_loadterm
  and "pickupAddress_location_id" = p_pickup_address_location_id
  and "deliveryAddress_location_id" = p_delivery_address_location_id
limit 10
$$;

alter function prod.get_potential_legs(char, integer, integer, char, char, char) owner to "Postgresadmin";

create function prod.get_second_parties(p_tenant_id character, p_customer_id character, p_number_of_days integer,
                                        p_origin_port_location_id integer, p_destination_port_location_id integer,
                                        p_import_export character, p_freight_type character)
    returns TABLE
            (
                id                           character,
                "amountOfShipmentsLastXDays" integer,
                "shipmentsTotalValue"        integer
            )
    language sql
as
$$
SELECT "second_party_id"                       as "id",
       cast(count(distinct "id") as int)       as "amountOfShipments",
       cast(sum("totalRevenueUSD") as integer) as "shipmentsTotalValue"
FROM prod.shipments
where "tenantId" = p_tenant_id
  and "customer_id" = p_customer_id
  and mode = p_freight_type
  and "portOfLoading_location_id" = p_origin_port_location_id
  and "portOfDischarge_location_id" = p_destination_port_location_id
  --and cast("executionDateTime" as timestamp) >= (Now() - (p_number_of_days * interval '1' day))
group by "second_party_id"


$$;

alter function prod.get_second_parties(char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create procedure prod.log_trace(p_api_name text, p_trace_id text, p_status integer, p_message text, p_request_json text,
                                p_response_json text)
    language sql
as
$$
INSERT INTO prod.traces ("TraceDateTime", "APIname", "Trace-Id", "Status", "Message", "RequestJSON", "ResponseJSON")
values (NOW(), p_api_name, p_trace_id, p_status, p_message, p_request_json, p_response_json);

$$;

alter procedure prod.log_trace(text, text, integer, text, text, text) owner to "Postgresadmin";

create procedure prod.log_trace(p_api_name text, p_trace_id text, p_status integer, p_message text, p_request_json text,
                                p_response_json text, p_ip text)
    language sql
as
$$
INSERT INTO prod.traces ("TraceDateTime", "APIname", "Trace-Id", "Status", "Message", "RequestJSON", "ResponseJSON",
                         "IP")
values (NOW(), p_api_name, p_trace_id, p_status, p_message, p_request_json, p_response_json, p_ip);

$$;

alter procedure prod.log_trace(text, text, integer, text, text, text, text) owner to "Postgresadmin";

create procedure prod.post_document_content("f_tenantId" text, f_document_serial integer, f_route_number integer,
                                            f_origin_country_name text, f_origin_country_code text,
                                            f_origin_city_name text, f_origin_city_code text, f_origin_state_name text,
                                            f_origin_state_code text, f_origin_port_code text,
                                            f_destination_country_name text, f_destination_country_code text,
                                            f_destination_city_name text, f_destination_city_code text,
                                            f_destination_state_name text, f_destination_state_code text,
                                            f_destination_port_code text, f_price_point_value double precision,
                                            f_price_point_currency_code text,
                                            f_validity_date timestamp without time zone, f_service text,
                                            f_accepted boolean)
    language sql
as
$$
INSERT INTO prod.document_routes( "tenantId"
                                , document_serial
                                , route_number
                                , origin_country_name
                                , origin_country_code
                                , origin_city_name
                                , origin_city_code
                                , origin_state_name
                                , origin_state_code
                                , origin_port_code
                                , destination_country_name
                                , destination_country_code
                                , destination_city_name
                                , destination_city_code
                                , destination_state_name
                                , destination_state_code
                                , destination_port_code
                                , price_point_value
                                , price_point_currency_code
                                , validity_date
                                , service
                                , accepted)
VALUES ( "f_tenantId"
       , f_document_serial
       , f_route_number
       , f_origin_country_name
       , f_origin_country_code
       , f_origin_city_name
       , f_origin_city_code
       , f_origin_state_name
       , f_origin_state_code
       , f_origin_port_code
       , f_destination_country_name
       , f_destination_country_code
       , f_destination_city_name
       , f_destination_city_code
       , f_destination_state_name
       , f_destination_state_code
       , f_destination_port_code
       , f_price_point_value
       , f_price_point_currency_code
       , f_validity_date
       , f_service
       , f_accepted);
$$;

alter procedure prod.post_document_content(text, integer, integer, text, text, text, text, text, text, text, text, text, text, text, text, text, text, double precision, text, timestamp, text, boolean) owner to "Postgresadmin";

create function prod.stardox_doc_contant_details(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid                  text,
                document_serial           integer,
                routeid                   integer,
                route_number              integer,
                origin_country_name       text,
                origin_country_code       text,
                origin_city_name          text,
                origin_city_code          text,
                origin_state_name         text,
                origin_state_code         text,
                origin_port_code          text,
                destination_country_name  text,
                destination_country_code  text,
                destination_city_name     text,
                destination_state_name    text,
                destination_state_code    text,
                destination_port_code     text,
                price_point_value         double precision,
                price_point_currency_code text,
                validity_date             timestamp without time zone,
                service                   text,
                accepted                  boolean
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /process/charges/{documentId}/{routeId}*/

SELECT R1."tenantId"                       as tenantid,
       R1."document_serial"                as document_serial,
       R1."routeId"                        as routeid,
       R1."route_number"                   as route_number,
       R1."origin_country_name"            as origin_country_name,
       R1."origin_country_code"            as origin_country_code,
       R1."origin_city_name"               as origin_city_name,
       R1."origin_city_code"               as origin_city_code,
       R1."origin_state_name"              as origin_state_name,
       R1."origin_state_code"              as origin_state_code,
       R1."origin_port_code"               as origin_port_code,
       R1."destination_country_name"       as destination_country_name,
       R1."destination_country_code"       as destination_country_code,
       R1."destination_city_name"          as destination_city_name,
       R1."destination_state_name"         as destination_state_name,
       R1."destination_state_code"         as destination_state_code,
       R1."destination_port_code"          as destination_port_code,
       COALESCE(R1."price_point_value", 0) as price_point_value,
       R1."price_point_currency_code"      as price_point_currency_code,
       R1."validity_date"                  as validity_date,
       R1."service"                        as service,
       R1."accepted"                       as accepted
FROM prod.document_routes R1
         INNER JOIN prod.document_tabsheets T1
                    ON R1."tenantId" = T1."tenantId"
                        AND R1."document_serial" = T1."document_serial"
WHERE R1."tenantId" = p_tenant_id
  AND R1."document_serial" = p_document_serial
  AND T1.tab_index = p_tab_index
LIMIT 50;

$$;

alter function prod.stardox_doc_contant_details(text, integer, integer) owner to "Postgresadmin";

create function prod.stardox_doc_exceptions(p_tenant_id text, p_document_serial integer, p_only_rejected boolean)
    returns TABLE
            (
                tab_index                  integer,
                sheet_name                 text,
                number_of_price_exceptions integer,
                number_of_other_exceptions integer,
                rejected_price_exceptions  integer,
                rejected_other_exceptions  integer
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 - /process/exceptions/{documentId}*/

SELECT distinct E1.tab_index,
                T1.sheet_name,
                COALESCE("number_of_price_exceptions", 0) as number_of_price_exceptions,
                COALESCE("number_of_other_exceptions", 0) as number_of_other_exceptions,
                COALESCE("rejected_price_exceptions", 0)  as rejected_price_exceptions,
                COALESCE("rejected_other_exceptions", 0)  as rejected_other_exceptions
FROM prod.document_exceptions E1
         INNER JOIN prod.document_tabsheets T1
                    ON E1.document_serial = T1.document_serial
                        AND E1.tab_index = T1.tab_index
WHERE E1."tenantId" = p_tenant_id
  AND E1.document_serial = p_document_serial
  AND (p_only_rejected is null or E1.accepted = not p_only_rejected)

order by E1.tab_index
$$;

alter function prod.stardox_doc_exceptions(text, integer, boolean) owner to "Postgresadmin";

create function prod.stardox_doc_header(p_tenant_id text, p_page integer, p_pagesize integer,
                                        p_fromdate timestamp without time zone, p_todate timestamp without time zone,
                                        p_doc_status text, p_categoryfilter text, p_stakeholdernamefilter text,
                                        p_sortby text, p_page_offset integer, p_next_rec integer)
    returns TABLE
            (
                "tenantId"        text,
                "documentId"      uuid,
                document_name     text,
                stake_holder_id   text,
                stake_holder_name text,
                document_category text,
                document_type     text,
                received_date     timestamp without time zone,
                modified_date     timestamp without time zone,
                document_status   text
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /document/headers */

SELECT "tenantId"          as tenantId,
       "documentId"        as documentId,
       "document_name"     as document_name,
       "stake_holder_id"   as stake_holder_id,
       "stake_holder_name" as stake_holder_name,
       "document_category" as document_category,
       "document_type"     as document_type,
       "received_date"     as received_date,
       "modified_date"     as modified_date,
       "document_status"   as document_status
FROM prod.documents
WHERE ("tenantId" = p_tenant_id)
  AND ("document_status" IN ('ACTIVATED', 'ADMIN_VALIDATION', 'PROCESSING'))
  AND (p_fromdate is null or "received_date" >= p_fromdate)
  AND (p_todate is null or "received_date" < p_todate)
  AND (p_doc_status is null or UPPER("document_status") = p_doc_status)
  AND (p_categoryfilter is null or "document_category" = p_categoryfilter)
  AND (p_stakeholdernamefilter is null or lower(stake_holder_name) like '%' || lower(p_stakeholdernamefilter) || '%')
ORDER BY CASE p_sortby WHEN 'NONE ASCENDING' THEN document_serial END ASC,
         CASE p_sortby WHEN 'DOCUMENT_NAME ASCENDING' THEN document_name END ASC,
         CASE p_sortby WHEN 'DOCUMENT_NAME DESCENDING' THEN document_name END DESC,
         CASE p_sortby WHEN 'STAKEHOLDER ASCENDING' THEN stake_holder_name END ASC,
         CASE p_sortby WHEN 'STAKEHOLDER DESCENDING' THEN stake_holder_name END DESC,
         CASE p_sortby WHEN 'DOCUMENT_TYPE ASCENDING' THEN document_type END ASC,
         CASE p_sortby WHEN 'DOCUMENT_TYPE DESCENDING' THEN document_type END DESC,
         CASE p_sortby WHEN 'CATEGORY ASCENDING' THEN document_category END ASC,
         CASE p_sortby WHEN 'CATEGORY DESCENDING' THEN document_category END DESC,
         CASE p_sortby WHEN 'RECEIVED ASCENDING' THEN CAST(received_date as text) END ASC,
         CASE p_sortby WHEN 'RECEIVED DESCENDING' THEN CAST(received_date as text) END DESC,
         CASE p_sortby WHEN 'MODIFIED ASCENDING' THEN CAST(modified_date as text) END ASC,
         CASE p_sortby WHEN 'MODIFIED DESCENDING' THEN CAST(modified_date as text) END DESC,
         CASE p_sortby WHEN 'STATUS ASCENDING' THEN document_status END ASC,
         CASE p_sortby WHEN 'STATUS DESCENDING' THEN document_status END DESC
    OFFSET p_page_offset ROWS
FETCH NEXT
p_next_rec
ROWS
ONLY

$$;

alter function prod.stardox_doc_header(text, integer, integer, timestamp, timestamp, text, text, text, text, integer, integer) owner to "Postgresadmin";

create function prod.stardox_doc_other_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid        text,
                document_serial integer,
                tab_index       integer,
                "exceptionId"   integer,
                origin          text,
                destination     text,
                exception_type  text,
                document_value  text,
                expected_value  text,
                accepted        boolean
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 - /process/otherExceptions/{documentId} */

SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       origin,
       destination,
       exception_type,
       document_value,
       expected_value,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND tab_index = p_tab_index
  AND "exception_kind" = 'OTHER'

$$;

alter function prod.stardox_doc_other_exceptions(text, integer, integer) owner to "Postgresadmin";

create function prod.stardox_doc_route_date(p_tenant_id text, p_document_serial integer,
                                            p_date timestamp without time zone)
    returns TABLE
            (
                "routeId"       integer,
                document_serial integer,
                document_type   text,
                received_date   timestamp without time zone,
                route_name      text
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 -/document/{documentId} */

SELECT DISTINCT d2."routeId"         as "routeId",
                d2."document_serial" as "document_serial",
                d."document_type"    as "document_type",
                d."received_date"    as "received_date",
                d2."route_name"      as "route_name"
FROM prod."documents" d,
     prod."document_routes" d2
WHERE d2."tenantId" = p_tenant_id
  AND d2."document_serial" = p_document_serial;

$$;

alter function prod.stardox_doc_route_date(text, integer, timestamp) owner to "Postgresadmin";

create function prod.stardox_doc_last_route_number(p_tenant_id text, p_document_serial integer)
    returns TABLE
            (
                last_route_number integer
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - Parsing_Handle*/

SELECT COALESCE(MAX("route_number"), 0) + 1 as last_route_number
FROM prod.document_routes
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial

$$;

alter function prod.stardox_doc_last_route_number(text, integer) owner to "Postgresadmin";

create function prod.stardox_doc_charges(p_tenant_id text, p_document_serial integer, p_route_number integer,
                                         p_tab_index integer)
    returns TABLE
            (
                tenantid                   text,
                document_serial            integer,
                route_number               integer,
                chargeid                   integer,
                charge_type                text,
                qtty                       integer,
                units                      text,
                price_value                double precision,
                price_currency_code        text,
                margin_effect_amount       double precision,
                margin_effect_pos_or_nev   text,
                business_effect_amount     double precision,
                business_effect_pos_or_nev text,
                last30d_value              double precision,
                last30d_currency_code      text,
                last60d_value              double precision,
                last60d_currency_code      text,
                last90d_value              double precision,
                last90d_currency_code      text,
                last120d_value             double precision,
                last120d_currency_code     text,
                remarks                    text
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /process/charges/{documentId}/{routeId}*/

SELECT DISTINCT C1."tenantId"                         as tenantid,
                C1."document_serial"                  as document_serial,
                R1."routeId"                          as routeid,
                "record_id"                           as chargeid,
                "charge_type"                         as charge_type,
                COALESCE("qtty", 0)                   as qtty,
                "units"                               as units,
                COALESCE("price_value", 0)            as price_value,
                "price_currency_code"                 as price_currency_code,
                COALESCE("margin_effect_amount", 0)   as margin_effect_amount,
                "margin_effect_pos_or_nev"            as margin_effect_pos_or_nev,
                COALESCE("business_effect_amount", 0) as business_effect_amount,
                "business_effect_pos_or_nev"          as business_effect_pos_or_nev,
                COALESCE("last30d_value", 0)          as last30d_value,
                "last30d_currency_code"               as last30d_currency_code,
                COALESCE("last60d_value", 0)          as last60d_value,
                "last60d_currency_code"               as last60d_currency_code,
                COALESCE("last90d_value", 0)          as last90d_value,
                "last90d_currency_code"               as last90d_currency_code,
                COALESCE("last120d_value", 0)         as last120d_value,
                "last120d_currency_code"              as last120d_currency_code,
                "remarks"                             as remarks

FROM prod.document_charges C1
         INNER JOIN prod.document_routes R1
                    ON C1."tenantId" = R1."tenantId"
                        AND C1."document_serial" = R1."document_serial"
                        AND C1."route_number" = R1."route_number"

WHERE C1."tenantId" = p_tenant_id
  AND C1."document_serial" = p_document_serial
  AND R1."routeId" = p_route_number
  AND (p_tab_index is null or R1."tab_index" = p_tab_index)
LIMIT 50;

$$;

alter function prod.stardox_doc_charges(text, integer, integer, integer) owner to "Postgresadmin";

create function prod.stardox_doc_rejected_other_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid        text,
                document_serial integer,
                tab_index       integer,
                "exceptionId"   integer,
                origin          text,
                destination     text,
                exception_type  text,
                document_value  text,
                expected_value  text,
                accepted        boolean
            )
    language sql
as
$$
SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       origin,
       destination,
       exception_type,
       document_value,
       expected_value,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND tab_index = p_tab_index
  AND "exception_kind" = 'OTHER'
  AND "accepted" = FALSE


$$;

alter function prod.stardox_doc_rejected_other_exceptions(text, integer, integer) owner to "Postgresadmin";

create function prod.stardox_doc_rejected_price_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid           text,
                document_serial    integer,
                tab_index          integer,
                "exceptionId"      integer,
                exception_type     text,
                origin             text,
                destination        text,
                charge_type        text,
                charge_description text,
                current_value      double precision,
                current_currency   text,
                pervious_value     double precision,
                pervious_currency  text,
                accepted           boolean
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 - /process/priceExceptions/{documentId} */

SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       exception_type,
       origin,
       destination,
       charge_type,
       charge_description,
       current_value,
       current_currency,
       previous_value,
       previous_currency,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND "tab_index" = p_tab_index
  AND "exception_kind" = 'PRICE'
  AND accepted = FALSE


$$;

alter function prod.stardox_doc_rejected_price_exceptions(text, integer, integer) owner to "Postgresadmin";

create function prod.stardox_doc_statistics(p_tenant_id text)
    returns TABLE
            (
                "tenantId"            text,
                document_status       text,
                document_status_count bigint
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /statistics */

SELECT "tenantId"               as tenantId,
       "document_status"        as document_status,
       count("document_status") as document_status_count
FROM prod.documents
WHERE "tenantId" = p_tenant_id
GROUP BY "tenantId", "document_status"
HAVING "document_status" is not null

$$;

alter function prod.stardox_doc_statistics(text) owner to "Postgresadmin";

create function prod.stardox_doc_data(p_tenant_id text, p_document_id uuid)
    returns TABLE
            (
                "tenantId"      text,
                "documentId"    uuid,
                document_serial integer,
                expired_in_min  integer,
                document_name   text,
                recieved_date   timestamp without time zone,
                document_type   text,
                table_name      text
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - Global function */
SELECT "tenantId"        as tenantId,
       "documentId"      as documentId,
       "document_serial" as document_serial,
       "expired_in_min"  as expired_in_min,
       "document_name"   as document_name,
       "received_date"   as received_date,
       "document_type"   as document_type,
       table_name        as table_name
FROM prod.documents
WHERE "tenantId" = p_tenant_id
  AND "documentId" = p_document_id

$$;

alter function prod.stardox_doc_data(text, uuid) owner to "Postgresadmin";

create function prod.stardox_doc_insert_tabs(p_tenantid text, p_document_serial integer, p_tab_index integer,
                                             p_sheet_name text)
    returns TABLE
            (
                p_document_serial integer
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - docParsing_Handle*/

INSERT INTO prod.document_tabsheets("tenantId", document_serial, tab_index, sheet_name)
VALUES (p_tenantid, p_document_serial, p_tab_index, p_sheet_name)

RETURNING "document_serial";

$$;

alter function prod.stardox_doc_insert_tabs(text, integer, integer, text) owner to "Postgresadmin";

create function prod.stardox_doc_insert(p_tenant_id text)
    returns TABLE
            (
                documentid      uuid,
                document_serial integer
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /file POST*/

INSERT INTO prod.documents("tenantId", "received_date")
VALUES (p_tenant_id, current_timestamp)
RETURNING "documentId","document_serial";

$$;

alter function prod.stardox_doc_insert(text) owner to "Postgresadmin";

create function prod.stardox_doc_update_exceptions(p_tenantid text, p_document_serial integer, p_exception_id integer,
                                                   p_accepted boolean)
    returns TABLE
            (
                p_document_serial integer
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 - /process/exceptions/{documentId} */

UPDATE prod.document_exceptions
SET accepted=p_accepted
WHERE ("tenantId" = p_tenantid)
  AND ("document_serial" = p_document_serial)
  AND ("exceptionId" = p_exception_id)

RETURNING "document_serial";

$$;

alter function prod.stardox_doc_update_exceptions(text, integer, integer, boolean) owner to "Postgresadmin";

create function prod.stardox_doc_update_exsist(p_tenantid text, p_document_id uuid, p_stakeholderid text,
                                               p_stakeholdername text, p_documenttitle text, p_documentcategory text)
    returns TABLE
            (
                documentid uuid
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /file/{documentId} */

UPDATE prod.documents
SET stake_holder_id     = p_stakeholderId,
    stake_holder_name   = p_stakeholdername,
    "document_title"    = p_documentTitle,
    "document_category" = p_documentCategory
WHERE "tenantId" = p_tenantid
  and "documentId" = p_document_id

RETURNING "documentId";

$$;

alter function prod.stardox_doc_update_exsist(text, uuid, text, text, text, text) owner to "Postgresadmin";

create function prod.stardox_doc_update_rejected_exceptions(p_tenant_id text, p_document_serial integer)
    returns TABLE
            (
                document_serial integer
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 - /process/exceptions/{documentId} */

UPDATE prod.document_tabsheets dt
SET rejected_price_exceptions=(SELECT COUNT(*)
                               FROM prod.document_exceptions AS de
                               WHERE de."tenantId" = p_tenant_id
                                 AND document_serial = p_document_serial
                                 AND accepted = FALSE
                                 AND exception_kind = 'PRICE'
                                 AND dt."tenantId" = de."tenantId"
                                 AND dt.document_serial = de.document_serial
                                 AND dt.tab_index = de.tab_index);

UPDATE prod.document_tabsheets dt
SET rejected_other_exceptions=(SELECT COUNT(*)
                               FROM prod.document_exceptions AS de
                               WHERE de."tenantId" = p_tenant_id
                                 AND document_serial = p_document_serial
                                 AND accepted = FALSE
                                 AND exception_kind = 'OTHER'
                                 AND dt."tenantId" = de."tenantId"
                                 AND dt.document_serial = de.document_serial
                                 AND dt.tab_index = de.tab_index)
RETURNING "document_serial";

$$;

alter function prod.stardox_doc_update_rejected_exceptions(text, integer) owner to "Postgresadmin";

create function prod.stardox_doc_update_rep_detalis(p_tenantid text, p_document_id uuid, p_report_details text)
    returns TABLE
            (
                documentid uuid
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 2 - /document/report/{documentId} */

UPDATE prod.documents
SET "report_details"= p_report_details
WHERE "tenantId" = p_tenantid
  and "documentId" = p_document_id
RETURNING "documentId";

$$;

alter function prod.stardox_doc_update_rep_detalis(text, uuid, text) owner to "Postgresadmin";

create function prod.stardox_doc_update_status(p_tenantid text, p_document_id uuid, p_status text)
    returns TABLE
            (
                documentid uuid
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PostDocumentArchive+PostDocument+Parsing_Handle */
UPDATE prod.documents
SET "document_status"= p_status
WHERE "tenantId" = p_tenantid
  and "documentId" = p_document_id
RETURNING "documentId";

$$;

alter function prod.stardox_doc_update_status(text, uuid, text) owner to "Postgresadmin";

create function prod.stardox_doc_new_doc(p_tenantid text, p_document_id uuid, p_documentcategory text,
                                         p_documentname text, p_document_title text, p_documenttype text)
    returns TABLE
            (
                document_name text
            )
    language sql
as
$$
    /* created by orit */
/*  stardox API - PHASE 1 - /file POST */

UPDATE prod.documents
SET "document_category"= p_documentCategory,
    "document_name"    = p_documentName,
    "document_title"   = p_document_title,
    "document_type"    = p_documentType,
    "document_status"  = 'PROCESSING'
WHERE "tenantId" = p_tenantId
  and "documentId" = p_document_id

RETURNING "document_name";

$$;

alter function prod.stardox_doc_new_doc(text, uuid, text, text, text, text) owner to "Postgresadmin";

create function prod.stardox_doc_delete(p_tenantid text, p_document_id uuid, p_document_serial integer)
    returns TABLE
            (
                p_document_id uuid
            )
    language sql
as
$$
DELETE
FROM prod.documents
WHERE "tenantId" = p_tenantId
  and "documentId" = p_document_id;

DELETE
FROM prod.document_routes
WHERE "tenantId" = p_tenantId
  and "document_serial" = p_document_serial;

DELETE
FROM prod.document_charges
WHERE "tenantId" = p_tenantId
  and "document_serial" = p_document_serial

RETURNING "p_document_id";

$$;

alter function prod.stardox_doc_delete(text, uuid, integer) owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_locations()
    language sql
as
$$
INSERT INTO prod.shipments_locations (concat_id,
                                      location_address,
                                      "location_address_addressGeoZone",
                                      location_city,
                                      "location_countryCode",
                                      "location_countryName",
                                      location_name,
                                      "location_portCode",
                                      "location_portName",
                                      "location_portType",
                                      "location_postalCode",
                                      "location_stateCode",
                                      "location_stateName",
                                      location_type)

SELECT DISTINCT concat_id,
                location_address,
                "location_address_addressGeoZone",
                location_city,
                "location_countryCode",
                "location_countryName",
                location_name,
                "location_portCode",
                "location_portName",
                "location_portType",
                "location_postalCode",
                "location_stateCode",
                "location_stateName",
                location_type
FROM stg.shipments_locations

    --     ON CONFLICT ("concat_id") DO NOTHING
$$;

alter procedure prod.history_upsert_shipments_locations() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_invoices()
    language sql
as
$$
INSERT INTO prod.shipments_invoices(s_id, shipment_id, "invoiceType", "invoiceNumber", "invoiceDate")
SELECT s_id, shipment_id, "invoiceType", "invoiceNumber", "invoiceDate"
FROM stg.shipments_invoices
$$;

alter procedure prod.history_upsert_shipments_invoices() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments()
    language sql
as
$$
INSERT INTO prod.shipments (branch,
                            "calculatedVolume",
                            "calculatedVolumeConverted",
                            "calculatedVolumeUnits",
                            "calculatedWeightUnits",
                            "chargeableWeight",
                            "chargeableWeightConverted",
                            "chargeableWeightUnits",
                            "consigneeAddress_location_id",
                            consignee_contact_email,
                            "consignee_contact_erpId",
                            consignee_contact_fax,
                            "consignee_contact_givenName",
                            consignee_contact_id,
                            "consignee_contact_lastName",
                            consignee_contact_mobile,
                            consignee_contact_phone,
                            "consignee_erpId",
                            consignee_id,
                            consignee_name,
                            consignee_type,
                            "consolLotUNID",
                            "consolNumber",
                            "createByName",
                            "createdBy",
                            "creationDateErp",
                            "creationDateTime",
                            customer_id,
                            customer_type,
                            "deliveryAddress_location_id",
                            "erpId",
                            "executionDateTime",
                            "globalShipmentId",
                            hazardous,
                            "hazardClass",
                            "houseDocumentDate",
                            "houseDocumentNumber",
                            id,
                            "importExport",
                            "incoTerms",
                            invoices,
                            "isAllIn",
                            "isFreight",
                            "jobNumber",
                            "mainFreight_freight_actualWHArrivalDate",
                            "mainFreight_freight_amountOfInsurance",
                            "mainFreight_freight_arriveTime",
                            "mainFreight_freight_breakBulkAgentName",
                            "mainFreight_freight_breakBulkPartyId",
                            "mainFreight_freight_carrierCode",
                            "mainFreight_freight_carrierErpId",
                            "mainFreight_freight_carrierIATACode",
                            "mainFreight_freight_carrierId",
                            "mainFreight_freight_carrierName",
                            "mainFreight_freight_collectCharge",
                            "mainFreight_freight_collectChargeCurrency",
                            "mainFreight_freight_collectedTax",
                            "mainFreight_freight_collectedTaxCurrency",
                            "mainFreight_freight_convertedAmountOfInsurance",
                            "mainFreight_freight_convertedCollectCharge",
                            "mainFreight_freight_convertedCollectedTax",
                            "mainFreight_freight_convertedDistance",
                            "mainFreight_freight_convertedFreightChargePerUnit",
                            "mainFreight_freight_convertedFreightTotCost",
                            "mainFreight_freight_convertedFreightTotRevenue",
                            "mainFreight_freight_convertedManifestVolume",
                            "mainFreight_freight_convertedManifestWeight",
                            "mainFreight_freight_convertedPrepaidCharge",
                            "mainFreight_freight_convertedPrepaidTax",
                            "mainFreight_freight_convertedSpotRate",
                            "mainFreight_freight_convertedTotalTax",
                            "mainFreight_freight_departTime",
                            "mainFreight_freight_departureDate",
                            "mainFreight_freight_distance",
                            "mainFreight_freight_distanceUnits",
                            "mainFreight_freight_feederVesselArvDate",
                            "mainFreight_freight_feederVesselArvTime",
                            "mainFreight_freight_feederVesselCallSign",
                            "mainFreight_freight_feederVesselCode",
                            "mainFreight_freight_feederVesselDepartDate",
                            "mainFreight_freight_feederVesselDepartTime",
                            "mainFreight_freight_feederVesselName",
                            "mainFreight_freight_feederVesselVoyage",
                            "mainFreight_freight_flightNumber",
                            "mainFreight_freight_flightTime",
                            "mainFreight_freight_freightChargeCurrency",
                            "mainFreight_freight_freightChargePerUnit",
                            "mainFreight_freight_freightChargeUnit",
                            "mainFreight_freight_freightTotCost",
                            "mainFreight_freight_freightTotRevenue",
                            "mainFreight_freight_insuranceCurrency",
                            "mainFreight_freight_loadDate",
                            "mainFreight_freight_loadTerm",
                            "mainFreight_freight_manifestDescription",
                            "mainFreight_freight_manifestNumber",
                            "mainFreight_freight_manifestVolume",
                            "mainFreight_freight_manifestVolumeUnits",
                            "mainFreight_freight_manifestWeight",
                            "mainFreight_freight_manifestWeightUnits",
                            "mainFreight_freight_mode",
                            "mainFreight_freight_motherVesselArvDateTime",
                            "mainFreight_freight_motherVesselCallSign",
                            "mainFreight_freight_motherVesselCode",
                            "mainFreight_freight_motherVesselDepartDateTime",
                            "mainFreight_freight_motherVesselFlag",
                            "mainFreight_freight_motherVesselName",
                            "mainFreight_freight_motherVoyage",
                            "mainFreight_freight_numberOfUnits",
                            "mainFreight_freight_pickupDetails_address_location_id",
                            "mainFreight_freight_pickupDetails_contact_email",
                            "mainFreight_freight_pickupDetails_contact_erpId",
                            "mainFreight_freight_pickupDetails_contact_fax",
                            "mainFreight_freight_pickupDetails_contact_givenName",
                            "mainFreight_freight_pickupDetails_contact_id",
                            "mainFreight_freight_pickupDetails_contact_lastName",
                            "mainFreight_freight_pickupDetails_contact_mobile",
                            "mainFreight_freight_pickupDetails_contact_phone",
                            "mainFreight_freight_pickupDetails_erpId",
                            "mainFreight_freight_pickupDetails_id",
                            "mainFreight_freight_pickupDetails_name",
                            "mainFreight_freight_pickupDetails_type",
                            "mainFreight_freight_pickupPartyId",
                            "mainFreight_freight_prepaidCharge",
                            "mainFreight_freight_prepaidChargeCurrency",
                            "mainFreight_freight_prepaidTax",
                            "mainFreight_freight_prepaidTaxCurrency",
                            "mainFreight_freight_requestedDeliveryDateFrom",
                            "mainFreight_freight_requestedDeliveryDateTo",
                            "mainFreight_freight_requestedWHArrivalDate",
                            "mainFreight_freight_roadEta",
                            "mainFreight_freight_roadLegId",
                            "mainFreight_freight_spotRate",
                            "mainFreight_freight_spotRateCurrency",
                            "mainFreight_freight_spotRateUnit",
                            "mainFreight_freight_totalCostCurrency",
                            "mainFreight_freight_totalNoOfPieces",
                            "mainFreight_freight_totalRevenueCurrency",
                            "mainFreight_freight_totalTax",
                            "mainFreight_freight_totalTaxCurrency",
                            "mainFreight_freight_totalWeightToVolumeRatio",
                            "masterDocumentDate",
                            "masterDocumentNumber",
                            mode,
                            "notifyAddress_location_id",
                            notify_contact_email,
                            "notify_contact_erpId",
                            notify_contact_fax,
                            "notify_contact_givenName",
                            notify_contact_id,
                            "notify_contact_lastName",
                            notify_contact_mobile,
                            notify_contact_phone,
                            "notify_erpId",
                            notify_id,
                            notify_name,
                            notify_type,
                            "pickupAddress_location_id",
                            "portOfDischarge_codeIATA",
                            "portOfDischarge_eta",
                            "portOfDischarge_etd",
                            "portOfDischarge_location_id",
                            "portOfLoading_codeIATA",
                            "portOfLoading_eta",
                            "portOfLoading_etd",
                            "portOfLoading_location_id",
                            record_id,
                            s_id,
                            second_party_id,
                            "serviceTier",
                            "shipperAddress_location_id",
                            shipper_contact_email,
                            "shipper_contact_erpId",
                            shipper_contact_fax,
                            "shipper_contact_givenName",
                            shipper_contact_id,
                            "shipper_contact_lastName",
                            shipper_contact_mobile,
                            shipper_contact_phone,
                            "shipper_erpId",
                            shipper_id,
                            shipper_name,
                            shipper_type,
                            status,
                            "tenantId",
                            "totalCost",
                            "totalCostUSD",
                            "totalCurrency",
                            "totalDestinationCost",
                            "totalDestinationRevenue",
                            "totalOriginCost",
                            "totalOriginRevenue",
                            "totalPieces",
                            "totalRevenue",
                            "totalRevenueUSD",
                            "totalVolume",
                            "totalVolumeConverted",
                            "totalVolumeUnits",
                            "totalWeight",
                            "totalWeightConverted",
                            "totalWeightUnits",
                            type)
SELECT branch,
       "calculatedVolume",
       "calculatedVolumeConverted",
       "calculatedVolumeUnits",
       "calculatedWeightUnits",
       "chargeableWeight",
       "chargeableWeightConverted",
       "chargeableWeightUnits",
       "consigneeAddress_location_id",
       consignee_contact_email,
       "consignee_contact_erpId",
       consignee_contact_fax,
       "consignee_contact_givenName",
       consignee_contact_id,
       "consignee_contact_lastName",
       consignee_contact_mobile,
       consignee_contact_phone,
       "consignee_erpId",
       consignee_id,
       consignee_name,
       consignee_type,
       "consolLotUNID",
       "consolNumber",
       "createByName",
       "createdBy",
       "creationDateErp",
       "creationDateTime",
       customer_id,
       customer_type,
       "deliveryAddress_location_id",
       "erpId",
       "executionDateTime",
       "globalShipmentId",
       hazardous,
       "hazardClass",
       "houseDocumentDate",
       "houseDocumentNumber",
       id,
       "importExport",
       "incoTerms",
       invoices,
       "isAllIn",
       "isFreight",
       "jobNumber",
       "mainFreight_freight_actualWHArrivalDate",
       "mainFreight_freight_amountOfInsurance",
       "mainFreight_freight_arriveTime",
       "mainFreight_freight_breakBulkAgentName",
       "mainFreight_freight_breakBulkPartyId",
       "mainFreight_freight_carrierCode",
       "mainFreight_freight_carrierErpId",
       "mainFreight_freight_carrierIATACode",
       "mainFreight_freight_carrierId",
       "mainFreight_freight_carrierName",
       "mainFreight_freight_collectCharge",
       "mainFreight_freight_collectChargeCurrency",
       "mainFreight_freight_collectedTax",
       "mainFreight_freight_collectedTaxCurrency",
       "mainFreight_freight_convertedAmountOfInsurance",
       "mainFreight_freight_convertedCollectCharge",
       "mainFreight_freight_convertedCollectedTax",
       "mainFreight_freight_convertedDistance",
       "mainFreight_freight_convertedFreightChargePerUnit",
       "mainFreight_freight_convertedFreightTotCost",
       "mainFreight_freight_convertedFreightTotRevenue",
       "mainFreight_freight_convertedManifestVolume",
       "mainFreight_freight_convertedManifestWeight",
       "mainFreight_freight_convertedPrepaidCharge",
       "mainFreight_freight_convertedPrepaidTax",
       "mainFreight_freight_convertedSpotRate",
       "mainFreight_freight_convertedTotalTax",
       "mainFreight_freight_departTime",
       "mainFreight_freight_departureDate",
       "mainFreight_freight_distance",
       "mainFreight_freight_distanceUnits",
       "mainFreight_freight_feederVesselArvDate",
       "mainFreight_freight_feederVesselArvTime",
       "mainFreight_freight_feederVesselCallSign",
       "mainFreight_freight_feederVesselCode",
       "mainFreight_freight_feederVesselDepartDate",
       "mainFreight_freight_feederVesselDepartTime",
       "mainFreight_freight_feederVesselName",
       "mainFreight_freight_feederVesselVoyage",
       "mainFreight_freight_flightNumber",
       "mainFreight_freight_flightTime",
       "mainFreight_freight_freightChargeCurrency",
       "mainFreight_freight_freightChargePerUnit",
       "mainFreight_freight_freightChargeUnit",
       "mainFreight_freight_freightTotCost",
       "mainFreight_freight_freightTotRevenue",
       "mainFreight_freight_insuranceCurrency",
       "mainFreight_freight_loadDate",
       "mainFreight_freight_loadTerm",
       "mainFreight_freight_manifestDescription",
       "mainFreight_freight_manifestNumber",
       "mainFreight_freight_manifestVolume",
       "mainFreight_freight_manifestVolumeUnits",
       "mainFreight_freight_manifestWeight",
       "mainFreight_freight_manifestWeightUnits",
       "mainFreight_freight_mode",
       "mainFreight_freight_motherVesselArvDateTime",
       "mainFreight_freight_motherVesselCallSign",
       "mainFreight_freight_motherVesselCode",
       "mainFreight_freight_motherVesselDepartDateTime",
       "mainFreight_freight_motherVesselFlag",
       "mainFreight_freight_motherVesselName",
       "mainFreight_freight_motherVoyage",
       "mainFreight_freight_numberOfUnits",
       "mainFreight_freight_pickupDetails_address_location_id",
       "mainFreight_freight_pickupDetails_contact_email",
       "mainFreight_freight_pickupDetails_contact_erpId",
       "mainFreight_freight_pickupDetails_contact_fax",
       "mainFreight_freight_pickupDetails_contact_givenName",
       "mainFreight_freight_pickupDetails_contact_id",
       "mainFreight_freight_pickupDetails_contact_lastName",
       "mainFreight_freight_pickupDetails_contact_mobile",
       "mainFreight_freight_pickupDetails_contact_phone",
       "mainFreight_freight_pickupDetails_erpId",
       "mainFreight_freight_pickupDetails_id",
       "mainFreight_freight_pickupDetails_name",
       "mainFreight_freight_pickupDetails_type",
       "mainFreight_freight_pickupPartyId",
       "mainFreight_freight_prepaidCharge",
       "mainFreight_freight_prepaidChargeCurrency",
       "mainFreight_freight_prepaidTax",
       "mainFreight_freight_prepaidTaxCurrency",
       "mainFreight_freight_requestedDeliveryDateFrom",
       "mainFreight_freight_requestedDeliveryDateTo",
       "mainFreight_freight_requestedWHArrivalDate",
       "mainFreight_freight_roadEta",
       "mainFreight_freight_roadLegId",
       "mainFreight_freight_spotRate",
       "mainFreight_freight_spotRateCurrency",
       "mainFreight_freight_spotRateUnit",
       "mainFreight_freight_totalCostCurrency",
       "mainFreight_freight_totalNoOfPieces",
       "mainFreight_freight_totalRevenueCurrency",
       "mainFreight_freight_totalTax",
       "mainFreight_freight_totalTaxCurrency",
       "mainFreight_freight_totalWeightToVolumeRatio",
       "masterDocumentDate",
       "masterDocumentNumber",
       mode,
       "notifyAddress_location_id",
       notify_contact_email,
       "notify_contact_erpId",
       notify_contact_fax,
       "notify_contact_givenName",
       notify_contact_id,
       "notify_contact_lastName",
       notify_contact_mobile,
       notify_contact_phone,
       "notify_erpId",
       notify_id,
       notify_name,
       notify_type,
       "pickupAddress_location_id",
       "portOfDischarge_codeIATA",
       "portOfDischarge_eta",
       "portOfDischarge_etd",
       "portOfDischarge_location_id",
       "portOfLoading_codeIATA",
       "portOfLoading_eta",
       "portOfLoading_etd",
       "portOfLoading_location_id",
       record_id,
       s_id,
       second_party_id,
       "serviceTier",
       "shipperAddress_location_id",
       shipper_contact_email,
       "shipper_contact_erpId",
       shipper_contact_fax,
       "shipper_contact_givenName",
       shipper_contact_id,
       "shipper_contact_lastName",
       shipper_contact_mobile,
       shipper_contact_phone,
       "shipper_erpId",
       shipper_id,
       shipper_name,
       shipper_type,
       status,
       "tenantId",
       "totalCost",
       "totalCostUSD",
       "totalCurrency",
       "totalDestinationCost",
       "totalDestinationRevenue",
       "totalOriginCost",
       "totalOriginRevenue",
       "totalPieces",
       "totalRevenue",
       "totalRevenueUSD",
       "totalVolume",
       "totalVolumeConverted",
       "totalVolumeUnits",
       "totalWeight",
       "totalWeightConverted",
       "totalWeightUnits",
       type
FROM stg.shipments AS ss
$$;

alter procedure prod.history_upsert_shipments() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_mainfreight()
    language sql
as
$$
INSERT INTO prod.shipments_mainfreight ("creationDateTime",
                                        "mainFreight_freightPieces_commodityDescription",
                                        "mainFreight_freightPieces_commodityType",
                                        "mainFreight_freightPieces_freightPieceId",
                                        "mainFreight_freightPieces_freightPieceType",
                                        "mainFreight_freightPieces_hazardClass",
                                        "mainFreight_freightPieces_hazardous",
                                        "mainFreight_freightPieces_height",
                                        "mainFreight_freightPieces_heightConverted",
                                        "mainFreight_freightPieces_length",
                                        "mainFreight_freightPieces_lengthConverted",
                                        "mainFreight_freightPieces_measurementUnits",
                                        "mainFreight_freightPieces_pieceVolume",
                                        "mainFreight_freightPieces_pieceVolumeConverted",
                                        "mainFreight_freightPieces_pieceVolumeUnits",
                                        "mainFreight_freightPieces_pieceWeight",
                                        "mainFreight_freightPieces_pieceWeightConverted",
                                        "mainFreight_freightPieces_pieceWeightUnits",
                                        "mainFreight_freightPieces_quantity",
                                        "mainFreight_freightPieces_subType",
                                        "mainFreight_freightPieces_width",
                                        "mainFreight_freightPieces_widthConverted",
                                        s_id,
                                        shipment_id)
SELECT "creationDateTime",
       "mainFreight_freightPieces_commodityDescription",
       "mainFreight_freightPieces_commodityType",
       "mainFreight_freightPieces_freightPieceId",
       "mainFreight_freightPieces_freightPieceType",
       "mainFreight_freightPieces_hazardClass",
       "mainFreight_freightPieces_hazardous",
       "mainFreight_freightPieces_height",
       "mainFreight_freightPieces_heightConverted",
       "mainFreight_freightPieces_length",
       "mainFreight_freightPieces_lengthConverted",
       "mainFreight_freightPieces_measurementUnits",
       "mainFreight_freightPieces_pieceVolume",
       "mainFreight_freightPieces_pieceVolumeConverted",
       "mainFreight_freightPieces_pieceVolumeUnits",
       "mainFreight_freightPieces_pieceWeight",
       "mainFreight_freightPieces_pieceWeightConverted",
       "mainFreight_freightPieces_pieceWeightUnits",
       "mainFreight_freightPieces_quantity",
       "mainFreight_freightPieces_subType",
       "mainFreight_freightPieces_width",
       "mainFreight_freightPieces_widthConverted",
       s_id,
       shipment_id
FROM stg.shipments_mainfreight AS ss
$$;

alter procedure prod.history_upsert_shipments_mainfreight() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_origin()
    language sql
as
$$
INSERT INTO prod.shipments_origin ("creationDateTime",
                                   "origin_serviceItems_chargeCode",
                                   "origin_serviceItems_chargeDescription",
                                   "origin_serviceItems_quantityUnit",
                                   "origin_serviceItems_serviceCost_exchangeCurrency",
                                   "origin_serviceItems_serviceCost_exchangeRate",
                                   "origin_serviceItems_serviceCost_foreignCurrencyAmount",
                                   "origin_serviceItems_serviceCost_invoiceNumber",
                                   "origin_serviceItems_serviceCost_localCurrencyAmount",
                                   "origin_serviceItems_serviceCost_numberOfUnits",
                                   "origin_serviceItems_serviceCost_rateCurrencyCode",
                                   "origin_serviceItems_serviceCost_ratePerUnit",
                                   "origin_serviceItems_serviceCost_ratePerUnitConverted",
                                   "origin_serviceItems_serviceCost_rateUnitType",
                                   "origin_serviceItems_serviceParty_address_location_id",
                                   "origin_serviceItems_serviceParty_contact_email",
                                   "origin_serviceItems_serviceParty_contact_erpId",
                                   "origin_serviceItems_serviceParty_contact_fax",
                                   "origin_serviceItems_serviceParty_contact_givenName",
                                   "origin_serviceItems_serviceParty_contact_id",
                                   "origin_serviceItems_serviceParty_contact_lastName",
                                   "origin_serviceItems_serviceParty_contact_mobile",
                                   "origin_serviceItems_serviceParty_contact_phone",
                                   "origin_serviceItems_serviceParty_erpId",
                                   "origin_serviceItems_serviceParty_id",
                                   "origin_serviceItems_serviceParty_name",
                                   "origin_serviceItems_serviceParty_type",
                                   "origin_serviceItems_serviceRevenue_exchangeCurrency",
                                   "origin_serviceItems_serviceRevenue_exchangeRate",
                                   "origin_serviceItems_serviceRevenue_foreignCurrencyAmount",
                                   "origin_serviceItems_serviceRevenue_invoiceNumber",
                                   "origin_serviceItems_serviceRevenue_localCurrencyAmount",
                                   "origin_serviceItems_serviceRevenue_numberOfUnits",
                                   "origin_serviceItems_serviceRevenue_rateCurrencyCode",
                                   "origin_serviceItems_serviceRevenue_ratePerUnit",
                                   "origin_serviceItems_serviceRevenue_ratePerUnitConverted",
                                   "origin_serviceItems_serviceRevenue_rateUnitType",
                                   "origin_serviceItems_serviceTier",
                                   "origin_serviceItems_serviceTypeEnum",
                                   s_id,
                                   shipment_id)
SELECT "creationDateTime",
       "origin_serviceItems_chargeCode",
       "origin_serviceItems_chargeDescription",
       "origin_serviceItems_quantityUnit",
       "origin_serviceItems_serviceCost_exchangeCurrency",
       "origin_serviceItems_serviceCost_exchangeRate",
       "origin_serviceItems_serviceCost_foreignCurrencyAmount",
       "origin_serviceItems_serviceCost_invoiceNumber",
       "origin_serviceItems_serviceCost_localCurrencyAmount",
       "origin_serviceItems_serviceCost_numberOfUnits",
       "origin_serviceItems_serviceCost_rateCurrencyCode",
       "origin_serviceItems_serviceCost_ratePerUnit",
       "origin_serviceItems_serviceCost_ratePerUnitConverted",
       "origin_serviceItems_serviceCost_rateUnitType",
       "origin_serviceItems_serviceParty_address_location_id",
       "origin_serviceItems_serviceParty_contact_email",
       "origin_serviceItems_serviceParty_contact_erpId",
       "origin_serviceItems_serviceParty_contact_fax",
       "origin_serviceItems_serviceParty_contact_givenName",
       "origin_serviceItems_serviceParty_contact_id",
       "origin_serviceItems_serviceParty_contact_lastName",
       "origin_serviceItems_serviceParty_contact_mobile",
       "origin_serviceItems_serviceParty_contact_phone",
       "origin_serviceItems_serviceParty_erpId",
       "origin_serviceItems_serviceParty_id",
       "origin_serviceItems_serviceParty_name",
       "origin_serviceItems_serviceParty_type",
       "origin_serviceItems_serviceRevenue_exchangeCurrency",
       "origin_serviceItems_serviceRevenue_exchangeRate",
       "origin_serviceItems_serviceRevenue_foreignCurrencyAmount",
       "origin_serviceItems_serviceRevenue_invoiceNumber",
       "origin_serviceItems_serviceRevenue_localCurrencyAmount",
       "origin_serviceItems_serviceRevenue_numberOfUnits",
       "origin_serviceItems_serviceRevenue_rateCurrencyCode",
       "origin_serviceItems_serviceRevenue_ratePerUnit",
       "origin_serviceItems_serviceRevenue_ratePerUnitConverted",
       "origin_serviceItems_serviceRevenue_rateUnitType",
       "origin_serviceItems_serviceTier",
       "origin_serviceItems_serviceTypeEnum",
       s_id,
       shipment_id
FROM stg.shipments_origin AS ss
$$;

alter procedure prod.history_upsert_shipments_origin() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_destination()
    language sql
as
$$
INSERT INTO prod.shipments_destination ("creationDateTime",
                                        "destination_serviceItems_chargeCode",
                                        "destination_serviceItems_chargeDescription",
                                        "destination_serviceItems_quantityUnit",
                                        "destination_serviceItems_serviceCost_exchangeCurrency",
                                        "destination_serviceItems_serviceCost_exchangeRate",
                                        "destination_serviceItems_serviceCost_foreignCurrencyAmount",
                                        "destination_serviceItems_serviceCost_invoiceNumber",
                                        "destination_serviceItems_serviceCost_localCurrencyAmount",
                                        "destination_serviceItems_serviceCost_numberOfUnits",
                                        "destination_serviceItems_serviceCost_rateCurrencyCode",
                                        "destination_serviceItems_serviceCost_ratePerUnit",
                                        "destination_serviceItems_serviceCost_ratePerUnitConverted",
                                        "destination_serviceItems_serviceCost_rateUnitType",
                                        "destination_serviceItems_serviceParty_address_location_id",
                                        "destination_serviceItems_serviceParty_contact_email",
                                        "destination_serviceItems_serviceParty_contact_erpId",
                                        "destination_serviceItems_serviceParty_contact_fax",
                                        "destination_serviceItems_serviceParty_contact_givenName",
                                        "destination_serviceItems_serviceParty_contact_id",
                                        "destination_serviceItems_serviceParty_contact_lastName",
                                        "destination_serviceItems_serviceParty_contact_mobile",
                                        "destination_serviceItems_serviceParty_contact_phone",
                                        "destination_serviceItems_serviceParty_erpId",
                                        "destination_serviceItems_serviceParty_id",
                                        "destination_serviceItems_serviceParty_name",
                                        "destination_serviceItems_serviceParty_type",
                                        "destination_serviceItems_serviceRevenue_exchangeCurrency",
                                        "destination_serviceItems_serviceRevenue_exchangeRate",
                                        "destination_serviceItems_serviceRevenue_foreignCurrencyAmount",
                                        "destination_serviceItems_serviceRevenue_invoiceNumber",
                                        "destination_serviceItems_serviceRevenue_localCurrencyAmount",
                                        "destination_serviceItems_serviceRevenue_numberOfUnits",
                                        "destination_serviceItems_serviceRevenue_rateCurrencyCode",
                                        "destination_serviceItems_serviceRevenue_ratePerUnit",
                                        "destination_serviceItems_serviceRevenue_ratePerUnitConverted",
                                        "destination_serviceItems_serviceRevenue_rateUnitType",
                                        "destination_serviceItems_serviceTier",
                                        "destination_serviceItems_serviceTypeEnum",
                                        s_id,
                                        shipment_id)
SELECT "creationDateTime",
       "destination_serviceItems_chargeCode",
       "destination_serviceItems_chargeDescription",
       "destination_serviceItems_quantityUnit",
       "destination_serviceItems_serviceCost_exchangeCurrency",
       "destination_serviceItems_serviceCost_exchangeRate",
       "destination_serviceItems_serviceCost_foreignCurrencyAmount",
       "destination_serviceItems_serviceCost_invoiceNumber",
       "destination_serviceItems_serviceCost_localCurrencyAmount",
       "destination_serviceItems_serviceCost_numberOfUnits",
       "destination_serviceItems_serviceCost_rateCurrencyCode",
       "destination_serviceItems_serviceCost_ratePerUnit",
       "destination_serviceItems_serviceCost_ratePerUnitConverted",
       "destination_serviceItems_serviceCost_rateUnitType",
       "destination_serviceItems_serviceParty_address_location_id",
       "destination_serviceItems_serviceParty_contact_email",
       "destination_serviceItems_serviceParty_contact_erpId",
       "destination_serviceItems_serviceParty_contact_fax",
       "destination_serviceItems_serviceParty_contact_givenName",
       "destination_serviceItems_serviceParty_contact_id",
       "destination_serviceItems_serviceParty_contact_lastName",
       "destination_serviceItems_serviceParty_contact_mobile",
       "destination_serviceItems_serviceParty_contact_phone",
       "destination_serviceItems_serviceParty_erpId",
       "destination_serviceItems_serviceParty_id",
       "destination_serviceItems_serviceParty_name",
       "destination_serviceItems_serviceParty_type",
       "destination_serviceItems_serviceRevenue_exchangeCurrency",
       "destination_serviceItems_serviceRevenue_exchangeRate",
       "destination_serviceItems_serviceRevenue_foreignCurrencyAmount",
       "destination_serviceItems_serviceRevenue_invoiceNumber",
       "destination_serviceItems_serviceRevenue_localCurrencyAmount",
       "destination_serviceItems_serviceRevenue_numberOfUnits",
       "destination_serviceItems_serviceRevenue_rateCurrencyCode",
       "destination_serviceItems_serviceRevenue_ratePerUnit",
       "destination_serviceItems_serviceRevenue_ratePerUnitConverted",
       "destination_serviceItems_serviceRevenue_rateUnitType",
       "destination_serviceItems_serviceTier",
       "destination_serviceItems_serviceTypeEnum",
       s_id,
       shipment_id
FROM stg.shipments_destination AS ss
$$;

alter procedure prod.history_upsert_shipments_destination() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_charges()
    language sql
as
$$
INSERT INTO prod.shipments_charges("buyRatePerUnit",
                                   "creationDateTime",
                                   "chargeCode",
                                   "chargeDescription",
                                   "chargeSide",
                                   "quantityUnit",
                                   "sellRatePerUnit",
                                   "serviceCost_exchangeCurrency",
                                   "serviceCost_exchangeRate",
                                   "serviceCost_foreignCurrencyAmount",
                                   "serviceCost_invoiceNumber",
                                   "serviceCost_localCurrencyAmount",
                                   "serviceCost_numberOfUnits",
                                   "serviceCost_rateCurrencyCode",
                                   "serviceCost_ratePerUnit",
                                   "serviceCost_ratePerUnitConverted",
                                   "serviceCost_rateUnitType",
                                   "serviceParty_address_location_id",
                                   "serviceParty_contact_email",
                                   "serviceParty_contact_erpId",
                                   "serviceParty_contact_fax",
                                   "serviceParty_contact_givenName",
                                   "serviceParty_contact_id",
                                   "serviceParty_contact_lastName",
                                   "serviceParty_contact_mobile",
                                   "serviceParty_contact_phone",
                                   "serviceParty_erpId",
                                   "serviceParty_id",
                                   "serviceParty_name",
                                   "serviceParty_type",
                                   "serviceRevenue_exchangeCurrency",
                                   "serviceRevenue_exchangeRate",
                                   "serviceRevenue_foreignCurrencyAmount",
                                   "serviceRevenue_invoiceNumber",
                                   "serviceRevenue_localCurrencyAmount",
                                   "serviceRevenue_numberOfUnits",
                                   "serviceRevenue_rateCurrencyCode",
                                   "serviceRevenue_ratePerUnit",
                                   "serviceRevenue_ratePerUnitConverted",
                                   "serviceRevenue_rateUnitType",
                                   "serviceTier",
                                   "serviceTypeEnum",
                                   "s_id",
                                   "shipment_id")
SELECT "buyRatePerUnit",
       "creationDateTime",
       "chargeCode",
       "chargeDescription",
       "chargeSide",
       "quantityUnit",
       "sellRatePerUnit",
       "serviceCost_exchangeCurrency",
       "serviceCost_exchangeRate",
       "serviceCost_foreignCurrencyAmount",
       "serviceCost_invoiceNumber",
       "serviceCost_localCurrencyAmount",
       "serviceCost_numberOfUnits",
       "serviceCost_rateCurrencyCode",
       "serviceCost_ratePerUnit",
       "serviceCost_ratePerUnitConverted",
       "serviceCost_rateUnitType",
       "serviceParty_address_location_id",
       "serviceParty_contact_email",
       "serviceParty_contact_erpId",
       "serviceParty_contact_fax",
       "serviceParty_contact_givenName",
       "serviceParty_contact_id",
       "serviceParty_contact_lastName",
       "serviceParty_contact_mobile",
       "serviceParty_contact_phone",
       "serviceParty_erpId",
       "serviceParty_id",
       "serviceParty_name",
       "serviceParty_type",
       "serviceRevenue_exchangeCurrency",
       "serviceRevenue_exchangeRate",
       "serviceRevenue_foreignCurrencyAmount",
       "serviceRevenue_invoiceNumber",
       "serviceRevenue_localCurrencyAmount",
       "serviceRevenue_numberOfUnits",
       "serviceRevenue_rateCurrencyCode",
       "serviceRevenue_ratePerUnit",
       "serviceRevenue_ratePerUnitConverted",
       "serviceRevenue_rateUnitType",
       "serviceTier",
       "serviceTypeEnum",
       "s_id",
       "shipment_id"
FROM stg.shipments_charges;
$$;

alter procedure prod.history_upsert_shipments_charges() owner to "Postgresadmin";

create procedure prod.history_etl_routes()
    language sql
as
$$
INSERT INTO prod.routes("last_date",
                        "currency",
                        "customer_id",
                        "customer_type",
                        "importExport",
                        "isFreight",
                        "mode",
                        "number_of_shipments_last150days",
                        "portOfDischarge_location_id",
                        "portOfLoading_location_id",
                        "second_party_id",
                        "tenantId",
                        "totalCost",
                        "totalRevenue",
                        "totalRevenueUSD")
SELECT MAX("creationDateErp"),
       max("totalCurrency")   AS "currency",
       "customer_id",
       "customer_type",
       "importExport",
       "isFreight",
       "mode",
       count(*)               AS "number_of_shipments_last150days",
       "portOfDischarge_location_id",
       "portOfLoading_location_id",
       "second_party_id",
       "tenantId",
       sum("totalCost")       AS "totalCost",
       sum("totalRevenue")    AS "totalRevenue",
       sum("totalRevenueUSD") AS "totalRevenueUSD"
FROM prod.shipments
GROUP BY "tenantId",
         "customer_id",
         "second_party_id",
         "customer_type",
         "isFreight",
         "mode",
         "importExport",
         "portOfDischarge_location_id",
         "portOfLoading_location_id";
$$;

alter procedure prod.history_etl_routes() owner to "Postgresadmin";

create function prod.get_customers(p_tenant_id character, p_customer_ids character)
    returns TABLE
            (
                "customerId"     character,
                "numberOfRoutes" integer,
                "freightTypes"   character
            )
    language sql
as
$$
SELECT "customer_id"                   as "customerId",
       cast(count(distinct
                  cast("portOfLoading_location_id" as character) || cast("portOfDischarge_location_id" as character) ||
                  "mode" -- || "importExport"
           ) as int)                   as "numberOfRoutes",
       string_agg(distinct Mode, ', ') as "freightTypes"
FROM prod.routes
where "tenantId" = p_tenant_id
  and p_customer_ids LIKE '%' || "customer_id" || '%'
  and "isFreight" = TRUE
group by "customer_id"

$$;

alter function prod.get_customers(char, char) owner to "Postgresadmin";

create procedure prod.stardox_doc_set_route_number(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------Document Parse ROUTES------------------------------
    IF p_table_name = 'document_parse' THEN
        UPDATE mrr.document_parse AS a
        SET route_number = mr.row_num
        FROM (SELECT destination_city_code,
                     destination_city_name,
                     destination_country_code,
                     destination_country_name,
                     destination_port_code,
                     destination_state_code,
                     destination_state_name,
                     origin_city_code,
                     origin_city_name,
                     origin_country_code,
                     origin_country_name,
                     origin_port_code,
                     origin_state_code,
                     origin_state_name,
                     route_name,
                     row_number() OVER () AS row_num
              FROM mrr.document_parse
              WHERE document_serial = p_document_serial
                AND tab_index = p_tab_index
                AND tab_index = p_tab_index
              GROUP BY destination_city_code,
                       destination_city_name,
                       destination_country_code,
                       destination_country_name,
                       destination_port_code,
                       destination_state_code,
                       destination_state_name,
                       origin_city_code,
                       origin_city_name,
                       origin_country_code,
                       origin_country_name,
                       origin_port_code,
                       origin_state_code,
                       origin_state_name,
                       route_name
             ) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_index = p_tab_index
          AND a.destination_city_code = destination_city_code
          AND a.destination_city_name = destination_city_name
          AND a.destination_country_code = destination_country_code
          AND a.destination_country_name = destination_country_name
          AND a.destination_port_code = destination_port_code
          AND a.destination_state_code = destination_state_code
          AND a.destination_state_name = destination_state_name
          AND a.origin_city_code = origin_city_code
          AND a.origin_city_name = origin_city_name
          AND a.origin_country_code = origin_country_code
          AND a.origin_country_name = origin_country_name
          AND a.origin_port_code = origin_port_code
          AND a.origin_state_code = origin_state_code
          AND a.origin_state_name = origin_state_name
          AND a.route_name = mr.route_name;
    END IF;
END ;
$$;

alter procedure prod.stardox_doc_set_route_number(integer, text, integer) owner to "Postgresadmin";

create function prod.get_best_routes_history(p_tenant_id text, p_pickup_address_id integer,
                                             p_delivery_address_id integer, p_mode text, p_loadterm text,
                                             p_incoterms text, p_port_of_loading_id integer,
                                             p_port_of_discharge_id integer, p_importexport text, p_carrier_ids text,
                                             p_weight double precision, p_hazard_class text, p_service_type text,
                                             p_commodity_type text)
    returns TABLE
            (
                call_id                integer,
                s_id                   text,
                "chargeCode"           text,
                "serviceTypeEnum"      text,
                "isSelected"           boolean,
                "durationInHours"      double precision,
                "sendSpot"             boolean,
                location_type          text,
                location_id            integer,
                location_city          text,
                "location_stateCode"   text,
                "location_countryCode" text,
                location_name          text,
                location_address       text,
                "location_postalCode"  text,
                "location_portCode"    text,
                "location_portName"    text,
                "location_portType"    text,
                "carrierId"            text,
                carrier_key            text,
                "carrierErpId"         text,
                "carrierName"          text,
                "carrierType"          text,
                "numberOfUnits"        double precision,
                "ratePerUnit"          double precision,
                "rateUnitType"         text,
                "rateCurrencyCode"     text,
                "ratePerUnitConverted" double precision,
                shipment_id            text,
                local_currency         text,
                "existsInHistory"      boolean
            )
    language plpgsql
as
$$
    --select * from prod.get_best_routes_history('c4f9bc43-5355-4755-be33-eab750e06e18', 8064,6583,'AIR','LCL','CFR',24384,30429,'Import','',1000,'','','General cargo') --UPS
--select * from prod.get_best_routes_history('28e8a314-4018-4b5b-9de4-7547dd1e3ac3', 8587,6644,'AIR','LCL','FOB',4108,9719,'Export','',1000,'','','General cargo') --JSC


DECLARE
    v_from    INTEGER = 0;
    v_to      INTEGER = 9999990;
    v_call_id INTEGER;

BEGIN

    DROP TABLE IF EXISTS tmp_shipments;

    /*INSERT INTO prod.log_best_routes ("LogDateTime", "call")
    VALUES (NOW(), concat('select * from prod.get_best_routes(''', p_tenant_id, ''', ',
                          p_pickup_address_id, ',', p_delivery_address_id, ',''', p_mode, ''',''', p_loadterm, ''',''',
                          p_incoterms,
                          ''',', p_port_of_loading_id, ',', p_port_of_discharge_id, ',''', p_importexport, ''',''',
                          p_carrier_ids,
                          ''',', p_weight, ',''', p_hazard_class, ''',''', p_service_type, ''',''', p_commodity_type,
                          ''')'));
	*/
    -- SELECT INTO v_call_id currval(pg_get_serial_sequence('prod.log_best_routes', 'call_id'));

--set v_from = 0;
--set v_to = 99999999;

--get weight tier
/*    SELECT INTO v_from, v_to ti."from",
                             ti."to"
    FROM mrr.freight_weight_tiers ti
    WHERE "mode" = p_mode
      AND "loadterm" = p_loadterm
      AND p_weight BETWEEN "from" AND "to";*/

    --drop table if exists prod.tmp_shipments;

--select shipments matching the parameters
    CREATE TEMP TABLE IF NOT EXISTS tmp_shipments AS
        (SELECT sh.*
         FROM prod.shipments sh
         WHERE "tenantId" = p_tenant_id
           AND "isFreight" = TRUE
           AND sh."mode" = p_mode
           AND coalesce("mainFreight_freight_loadTerm", 'LCL') = p_loadterm
           AND (p_pickup_address_id is null or sh."pickupAddress_location_id" = p_pickup_address_id)
           AND (p_delivery_address_id is null or sh."deliveryAddress_location_id" = p_delivery_address_id)
           AND sh."portOfLoading_location_id" = p_port_of_loading_id
           AND sh."portOfDischarge_location_id" = p_port_of_discharge_id
           --and p_carrier_ids LIKE '%' || "mainFreight_freight_carrierId" || '%'
           --	and sh."incoTerms" = p_incoterms
           --	and sh."serviceType" = p_service_type -- Door_to_Port, etc.
           --	and "commodityType" = p_commodityType
           -- and month("erpDate?") = month(Now())  -- add later - similar period - need to figure out what is similar period (holiday season, etc.)

           --and (p_hazard_class == '' or sh."hazardClass" == p_hazard_class) --add after ETL? - there are no hazardous shipments in history
           AND ((sh."mode" = 'AIR' AND "totalWeight" BETWEEN v_from AND v_to)
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'FCL'
                    --and "totalNumberOfUnits" between v_from and v_to --need to add this parameter!!
                    )
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'LCL'))
            --add ROAD mode later
            --what about non-freight mode?
        )
            ORDER BY sh."totalCost" ASC, sh."totalProfit" DESC, sh.s_id -- "creationDateErp" desc
            LIMIT 1;
    --add freightPieceType for later versions (Damco use only pallets)

    /*INSERT INTO prod.log_best_routes_responses (call_id, s_id, "chargeCode", "isSelected",
                                                "durationInHours", "sendSpot", location_type, location_id,
                                                location_city, "location_stateCode",
                                                "location_countryCode", location_name, location_address,
                                                "location_postalCode",
                                                "location_portCode", "location_portName", "location_portType",
                                                "carrierId", carrier_key,
                                                "carrierErpId", "carrierName", "carrierType", "numberOfUnits",
                                                "ratePerUnit",
                                                "rateUnitType", "rateCurrencyCode", "ratePerUnitConverted", shipment_id)
        (*/
    return query
--origin charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(o."origin_serviceItems_chargeCode" as text) as                                            "chargeCode",
                        cast(o."origin_serviceItems_serviceTypeEnum" AS TEXT) AS                                       "serviceTypeEnum",
                        TRUE AS                                                                                        "isSelected",
                        cast(0 AS DOUBLE PRECISION) AS                                                                 "durationInHours",
                        cast(FALSE AS BOOLEAN) AS                                                                      "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(o."origin_serviceItems_serviceParty_id" AS TEXT) AS                                       "carrierId",
                        cast(NULL AS TEXT) AS                                                                          "carrier_key", --see python
                        cast(o."origin_serviceItems_serviceParty_erpId" AS TEXT) AS                                    "carrierErpId", --change to "erpId"
                        cast(o."origin_serviceItems_serviceParty_name" AS TEXT) AS                                     "carrierName",
                        --cast(o."origin_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT) AS                                                    "carrierType",

                        cast(
                                coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION) AS "numberOfUnits",
                        cast(
                                coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) as DOUBLE PRECISION) AS   "ratePerUnit",
                        cast(o."origin_serviceItems_quantityUnit" AS TEXT) AS                                          "rateUnitType",
                        cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT) AS                          "rateCurrencyCode",

                        cast(coalesce(o."origin_serviceItems_serviceRevenue_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION) AS                                                       "ratePerUnitConverted",
                        sh.id AS                                                                                       "shipment_id",
                        "totalCurrency" as                                                                             "local_currency",
                        cast(TRUE as boolean) as                                                                       "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_origin o
                            ON o.s_id = sh.s_id
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfLoading_location_id"
             --on service_location.location_id = o."origin_serviceItems_serviceParty_location_id"
--where o."origin_serviceItems_serviceCost_ratePerUnit" is not null

        UNION ALL

--destination charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(d."destination_serviceItems_chargeCode" as text) as                               "chargeCode",
                        cast(d."destination_serviceItems_serviceTypeEnum" AS TEXT) AS                          "serviceTypeEnum",
                        TRUE AS                                                                                "isSelected",
                        cast(0 AS DOUBLE PRECISION) AS                                                         "durationInHours",
                        cast(FALSE AS BOOLEAN) AS                                                              "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(d."destination_serviceItems_serviceParty_id" AS TEXT) AS                          "carrierId",
                        cast(NULL AS TEXT) AS                                                                  "carrier_key", --see python
                        cast(d."destination_serviceItems_serviceParty_erpId" AS TEXT) AS                       "carrierErpId", --change to "erpId"
                        cast(d."destination_serviceItems_serviceParty_name" AS TEXT) AS                        "carrierName",
                        --cast(d."destination_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT) AS                                            "carrierType",

                        cast(
                                d."destination_serviceItems_serviceCost_numberOfUnits" AS DOUBLE PRECISION) AS "numberOfUnits",
                        cast(
                                d."destination_serviceItems_serviceCost_ratePerUnit" as DOUBLE PRECISION) AS   "ratePerUnit",
                        cast(d."destination_serviceItems_quantityUnit" AS TEXT) AS                             "rateUnitType",
                        cast(
                                d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT) AS          "rateCurrencyCode",
                        cast(coalesce(d."destination_serviceItems_serviceCost_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION) AS                                               "ratePerUnitConverted",
                        sh.id AS                                                                               "shipment_id",
                        "totalCurrency" as                                                                     "local_currency",
                        cast(TRUE as boolean) as                                                               "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_destination d
                            ON d.s_id = sh.s_id
                 LEFT JOIN prod.shipments_mainfreight f
                           ON f.s_id = sh.s_id
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfDischarge_location_id"
--where d."destination_serviceItems_serviceCost_ratePerUnit" is not null
    ;

    /* RETURN QUERY
         SELECT *
         FROM prod.log_best_routes_responses r
         WHERE r."call_id" = v_call_id;*/

END;
$$;

alter function prod.get_best_routes_history(text, integer, integer, text, text, text, integer, integer, text, text, double precision, text, text, text) owner to "Postgresadmin";

create procedure prod.stardox_parse_set_route_number(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------Document Parse ROUTES------------------------------
    IF p_table_name = 'document_parse' THEN

        UPDATE mrr.document_parse AS a
        SET route_number = mr.row_num
        FROM (SELECT route_name,
                     row_number() OVER () AS row_num
              FROM mrr.document_parse
              WHERE document_serial = p_document_serial
                AND tab_index = p_tab_index
                AND tab_index = p_tab_index
              GROUP BY route_name
             ) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_index = p_tab_index
          AND a.route_name = mr.route_name;
    END IF;
END ;
$$;

alter procedure prod.stardox_parse_set_route_number(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_parse_insert_doc_routes(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------DOCUMENT ROUTES------------------------------
    IF p_table_name = 'document_parse' THEN
        INSERT INTO prod.document_routes("tenantId",
                                         document_serial,
                                         route_number,
                                         origin_city_code,
                                         origin_city_name,
                                         origin_country_code,
                                         origin_country_name,
                                         origin_port_code,
                                         origin_state_code,
                                         origin_state_name,
                                         destination_city_code,
                                         destination_city_name,
                                         destination_country_code,
                                         destination_country_name,
                                         destination_port_code,
                                         destination_state_code,
                                         destination_state_name,
                                         validity_date,
                                         route_name,
                                         tab_index,
                                         service)
        SELECT m."tenantId",
               m.document_serial,
               m.route_number,
               m.origin_city_code,
               m.origin_city_name,
               m.origin_country_code,
               m.origin_country_name,
               m.origin_port_code,
               m.origin_state_code,
               m.origin_state_name,
               m.destination_city_code,
               m.destination_city_name,
               m.destination_country_code,
               m.destination_country_name,
               m.destination_port_code,
               m.destination_state_code,
               m.destination_state_name,
               m.validity_date,
               m.route_name,
               m.tab_index,
               m.service
        FROM mrr.document_parse AS m
        WHERE m.tab_index = p_tab_index
          AND m.document_serial = p_document_serial
        GROUP BY "tenantId",
                 m.document_serial,
                 m.route_number,
                 m.destination_city_code,
                 m.destination_city_name,
                 m.destination_country_code,
                 m.destination_country_name,
                 m.destination_port_code,
                 m.destination_state_code,
                 m.destination_state_name,
                 m.origin_city_code,
                 m.origin_city_name,
                 m.origin_country_code,
                 m.origin_country_name,
                 m.origin_port_code,
                 m.origin_state_code,
                 m.origin_state_name,
                 m.validity_date,
                 m.route_name,
                 m.tab_index,
                 m.service;

    END IF;
END;
$$;

alter procedure prod.stardox_parse_insert_doc_routes(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_parse_insert_doc_charges(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------Document Parse CHARGES------------------------------
    IF p_table_name = 'document_parse' THEN

        INSERT INTO prod.document_charges("tenantId",
                                          document_serial,
                                          charge_type,
                                          units,
                                          price_value,
                                          price_currency_code,
                                          remarks,
                                          route_number,
                                          record_id,
                                          tab_index,
                                          last30d_value,
                                          last30d_currency_code,
                                          last60d_value,
                                          last60d_currency_code,
                                          last90d_value,
                                          last90d_currency_code,
                                          last120d_value,
                                          last120d_currency_code)
        SELECT "tenantId",
               m.document_serial,
               concat_ws('-', m.charge_name),
               m.container,
               CAST(m.cost as DOUBLE PRECISION),
               m.currency,
               concat_ws('|', concat('ContainerType:', m.container),
                         concat('ServiceProvider:', m.service_provider_name), concat('IncoTerm:', m.incoterm),
                         concat('Commodity:', m.commodity), concat('Remarks:', m.rate_remarks)),
               m.route_number,
               m.record_id,
               m.tab_index,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM mrr.document_parse AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_index = p_tab_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_index = p_tab_index);


    END IF;

END;
$$;

alter procedure prod.stardox_parse_insert_doc_charges(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_parse_doc_etl(p_document_serial integer, p_table_name text, p_tab_index integer)
    language sql
as
$$
CALL prod.stardox_parse_set_route_number(p_document_serial, p_table_name, p_tab_index);
CALL prod.stardox_parse_insert_doc_routes(p_document_serial, p_table_name, p_tab_index);
CALL prod.stardox_parse_insert_doc_charges(p_document_serial, p_table_name, p_tab_index);

------------------------------
UPDATE prod.documents
SET document_status = 'ACTIVATED'
WHERE documents.document_serial = p_document_serial;


$$;

alter procedure prod.stardox_parse_doc_etl(integer, text, integer) owner to "Postgresadmin";

create function prod.stardox_doc_price_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid           text,
                document_serial    integer,
                tab_sheet_index    integer,
                "exceptionId"      integer,
                exception_type     text,
                origin             text,
                destination        text,
                charge_type        text,
                charge_description text,
                current_value      double precision,
                current_currency   text,
                pervious_value     double precision,
                pervious_currency  text,
                accepted           boolean
            )
    language sql
as
$$
SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       exception_type,
       origin,
       destination,
       charge_type,
       charge_description,
       current_value,
       current_currency,
       previous_value,
       previous_currency,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND "tab_index" = p_tab_index
  AND "exception_type" = 'PRICE'

$$;

alter function prod.stardox_doc_price_exceptions(text, integer, integer) owner to "Postgresadmin";

