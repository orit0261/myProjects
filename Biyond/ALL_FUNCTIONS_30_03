create function prod.get_customers(p_tenant_id character, p_customer_ids character)
    returns TABLE
            (
                "customerId"     character,
                "numberOfRoutes" integer,
                "freightTypes"   character
            )
    language sql
as
$$
SELECT "customer_id"                   as "customerId",
       cast(count(distinct
                  cast("portOfLoading_location_id" as character) || cast("portOfDischarge_location_id" as character) ||
                  "mode" -- || "importExport"
           ) as int)                   as "numberOfRoutes",
       string_agg(distinct Mode, ', ') as "freightTypes"
FROM prod.routes
where "tenantId" = p_tenant_id
  and p_customer_ids LIKE '%' || "customer_id" || '%'
  and "isFreight" = TRUE
group by "customer_id"

$$;

alter function prod.get_customers(char, char) owner to "Postgresadmin";

create function prod.get_customer_routes(p_tenant_id character, p_customer_id character, p_number_of_days integer)
    returns TABLE
            (
                "customerId"                            character,
                "RouteNum"                              bigint,
                "lastDate"                              timestamp without time zone,
                "freightType"                           character,
                "customerType"                          character,
                "importExportType"                      character,
                "portOfLoading_location_id"             integer,
                "portOfLoading_type"                    character,
                "portOfLoading_address"                 character,
                "portOfLoading_city"                    character,
                "portOfLoading_state"                   character,
                "portOfLoading_postalCode"              character,
                "portOfLoading_country"                 character,
                "portOfLoading_code"                    character,
                "portOfLoading_name"                    character,
                "portOfDischarge_location_id"           integer,
                "portOfDischarge_type"                  character,
                "portOfDischarge_address"               character,
                "portOfDischarge_city"                  character,
                "portOfDischarge_state"                 character,
                "portOfDischarge_postalCode"            character,
                "portOfDischarge_country"               character,
                "portOfDischarge_code"                  character,
                "portOfDischarge_name"                  character,
                "portType"                              character,
                "amountOfShipments"                     integer,
                "shipmentsTotalValue"                   integer,
                "shipmentsTotalValueCurrency"           character,
                "amountOfContractedShipments"           integer,
                "contractedShipmentsTotalValue"         integer,
                "contractedShipmentsTotalValueCurrency" character
            )
    language sql
as
$$
--select * from prod.get_customer_routes('005237f9-6779-4c68-89d6-d0800559d4f4', '93d471b0-c39c-4874-9847-957bf72cad7c', 1000)

SELECT DISTINCT "customer_id"                                      AS "customerId",
                cast(route_id AS BIGINT)                           AS "RouteNum",
                cast("last_date" AS TIMESTAMP)                     AS "lastDate",
                "mode"                                             AS "freightType",
                "customer_type"                                    AS "customerType",
                "importExport"                                     AS "importExportType",
                cast(pol.location_id AS INTEGER)                   AS "portOfLoading_location_id",
                pol."location_type"                                AS "portOfLoading_type",-- "PORT" vs "DOOR"
                coalesce(pol."location_city", '') || ', ' || coalesce(pol."location_stateCode", '') || ', ' ||
                coalesce(pol."location_countryCode", '')           AS "portOfLoading_address",
                pol."location_city"                                AS "portOfLoading_city",
                pol."location_stateCode"                           AS "portOfLoading_state",
                pol."location_postalCode"                          AS "portOfLoading_postalCode",
                pol."location_countryCode"                         AS "portOfLoading_country",
                pol."location_portCode"                            AS "portOfLoading_code",
                pol."location_portName"                            AS "portOfLoading_name",
                cast(pod.location_id AS INTEGER)                   AS "portOfDischarge_location_id",
                pod."location_type"                                AS "portOfDischarge_type", --"PORT" vs "DOOR"
                coalesce(pod."location_city", '') || ', ' || coalesce(pod."location_stateCode", '') || ', ' ||
                coalesce(pod."location_countryCode", '')           AS "portOfDischarge_address",
                pod."location_city"                                AS "portOfDischarge_city",
                pod."location_stateCode"                           AS "portOfDischarge_state",
                pod."location_postalCode"                          AS "portOfDischarge_postalCode",
                pod."location_countryCode"                         AS "portOfDischarge_country",
                pod."location_portCode"                            AS "portOfDischarge_code",
                pod."location_portName"                            AS "portOfDischarge_name",
                pol."location_portType"                            AS "portType",
                cast("number_of_shipments_last150days" AS INTEGER) AS "amountOfShipments",
                cast("totalRevenueUSD" AS INTEGER)                 AS "shipmentsTotalValue",
                "currency"                                         AS "shipmentsTotalValueCurrency",
                cast(NULL AS INTEGER)                              AS "amountOfContractedShipments", --?
                cast(NULL AS INTEGER)                              AS "contractedShipmentsTotalValue", --?
                NULL                                               AS "contractedShipmentsTotalValueCurrency" --?

FROM (SELECT "customer_id",
             MAX(route_id)                          AS route_id,
             MAX("last_date")                       AS "last_date",
             "mode",
             "customer_type",
             "importExport",
             SUM("totalRevenueUSD")                 AS "totalRevenueUSD",
             'USD'                                  AS "currency",
             SUM("number_of_shipments_last150days") AS "number_of_shipments_last150days",
             "portOfLoading_location_id",
             "portOfDischarge_location_id",
             "tenantId",
             "isFreight"
      FROM prod.routes
      GROUP BY "customer_id", mode, customer_type, "importExport", "portOfLoading_location_id",
               "portOfDischarge_location_id", "tenantId", "isFreight") AS r
         LEFT JOIN prod.shipments_locations pol
                   ON pol.location_id = r."portOfLoading_location_id"
         LEFT JOIN prod.shipments_locations pod
                   ON pod.location_id = r."portOfDischarge_location_id"

WHERE "tenantId" = p_tenant_id
  AND customer_id = p_customer_id
  AND "isFreight" = TRUE;
    --and cast("executionDate" as timestamp) >= (Now() - (numberofdays * interval '1' day))
    --order by "lastDate" DESC;


$$;

alter function prod.get_customer_routes(char, char, integer) owner to "Postgresadmin";

create function prod.get_potential_freights(p_tenant_id character, p_shipper_id character, p_consignee_id character,
                                            p_amount_of_shipments integer, p_origin_port_location_id integer,
                                            p_destination_port_location_id integer,
                                            p_pickup_address_location_id integer,
                                            p_delivery_address_location_id integer)
    returns TABLE
            (
                date            timestamp without time zone,
                "shipmentId"    character,
                "freightType"   character,
                "loadType"      character,
                hazardous       boolean,
                units           double precision,
                total           integer,
                "totalCurrency" character,
                "incoTerms"     character
            )
    language sql
as
$$
SELECT cast("creationDateErp" as timestamp) as "date",
       "id"                                 as "shipmentId",
       "mode"                               as "freightType",
       "mainFreight_freight_loadTerm"       as "loadType",
       "hazardous",
       cast(null as double precision)       as "units",
       --"totalNumberOfUnits" as "units",
       cast("totalRevenue" as integer)      as "total",
       --'USD' as "totalCurrency", 
       coalesce("totalCurrency", 'USD')     as "totalCurrency",
       "incoTerms"                          as "incoterms"
FROM prod.shipments
where "tenantId" = p_tenant_id
  and "isFreight" = TRUE
  and shipper_id = shipper_id
  and consignee_id = consignee_id
  and "portOfLoading_location_id" = p_origin_port_location_id
  and "portOfDischarge_location_id" = p_destination_port_location_id
  and (p_pickup_address_location_id is null or "pickupAddress_location_id" = p_pickup_address_location_id)
  and (p_delivery_address_location_id is null or "deliveryAddress_location_id" = p_delivery_address_location_id)

order by "creationDateErp" desc
limit p_amount_of_shipments

$$;

alter function prod.get_potential_freights(char, char, char, integer, integer, integer, integer, integer) owner to "Postgresadmin";

create procedure prod.history_create_shipments_locations()
    language sql
as
$$
    CREATE TABLE prod.shipments_locations
    (
        "concat_id"            TEXT PRIMARY KEY,
        "location_address"     TEXT,
        "location_city"        TEXT,
        "location_countryCode" TEXT,
        "location_countryName" TEXT,
        "location_id"          SERIAL,
        "location_name"        TEXT,
        "location_portCode"    TEXT,
        "location_portName"    TEXT,
        "location_portType"    TEXT,
        "location_postalCode"  TEXT,
        "location_stateCode"   TEXT,
        "location_stateName"   TEXT,
        "location_type"        TEXT
    )

    $$;

alter procedure prod.history_create_shipments_locations() owner to "Postgresadmin";

create function prod.get_second_parties(p_tenant_id character, p_customer_id character, p_number_of_days integer,
                                        p_origin_port_location_id integer, p_destination_port_location_id integer,
                                        p_import_export character, p_freight_type character)
    returns TABLE
            (
                id                           character,
                "amountOfShipmentsLastXDays" integer,
                "shipmentsTotalValue"        integer
            )
    language sql
as
$$
SELECT "second_party_id"                       as "id",
       cast(count(distinct "id") as int)       as "amountOfShipments",
       cast(sum("totalRevenueUSD") as integer) as "shipmentsTotalValue"
FROM prod.shipments
where "tenantId" = p_tenant_id
  and "customer_id" = p_customer_id
  and mode = p_freight_type
  and "portOfLoading_location_id" = p_origin_port_location_id
  and "portOfDischarge_location_id" = p_destination_port_location_id
  --and cast("executionDateTime" as timestamp) >= (Now() - (p_number_of_days * interval '1' day))
group by "second_party_id"


$$;

alter function prod.get_second_parties(char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_optional_pickup_addresses(p_tenant_id character, p_shipper_id character,
                                                   p_number_of_days integer, p_origin_port_location_id integer,
                                                   p_import_export character, p_freight_type character)
    returns TABLE
            (
                location_id                  integer,
                type                         character,
                city                         character,
                "stateCode"                  character,
                "countryCode"                character,
                address                      character,
                "postalCode"                 character,
                "portCode"                   character,
                "portName"                   character,
                "portType"                   character,
                "originalShipmentId"         character,
                "amountOfShipmentsLastXDays" bigint,
                "freightType"                character,
                amount                       integer
            )
    language sql
as
$$
SELECT "location_id",
       "location_type"                            as "type",
       coalesce("location_name", "location_city") as "city",
       "location_stateCode"                       as "stateCode",
       "location_countryCode"                     as "countryCode",
       "location_address"                         as "address",
       "location_postalCode"                      as "postalCode",
       Null                                       as "portCode",
       Null                                       as "portName",
       Null                                       as "portType",
       max("id")                                  as "originalShipmentId", --this will change
       count(distinct id)                         as "amountOfShipmentsLastXDays",
       "mode"                                     as "freightType",
       cast(Null as int)                          as "amount"              --?

FROM prod.shipments sh
         inner join prod.shipments_locations loc
                    on loc.location_id = sh."pickupAddress_location_id"
where sh."tenantId" = p_tenant_id
  and "portOfLoading_location_id" = p_origin_port_location_id
  and shipper_id = p_shipper_id
  and "mode" = p_freight_type
  --and cast("executionDate" as timestamp) >= (Now() - (p_number_of_days * interval '1' day))
group by location_id, "location_city", "location_stateCode", "location_countryCode",
         "location_address", "location_postalCode", "mode", location_type, "location_name"

$$;

alter function prod.get_optional_pickup_addresses(char, char, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_optional_delivery_addresses(p_tenant_id character, p_consignee_id character,
                                                     p_number_of_days integer, p_destination_port_location_id integer,
                                                     p_import_export character, p_freight_type character)
    returns TABLE
            (
                location_id                  integer,
                type                         character,
                city                         character,
                "stateCode"                  character,
                "countryCode"                character,
                address                      character,
                "postalCode"                 character,
                "portCode"                   character,
                "portName"                   character,
                "portType"                   character,
                "originalShipmentId"         character,
                "amountOfShipmentsLastXDays" bigint,
                "freightType"                character,
                amount                       integer
            )
    language sql
as
$$
SELECT "location_id",
       "location_type"                            as "type",
       coalesce("location_name", "location_city") as "city",
       "location_stateCode"                       as "stateCode",
       "location_countryCode"                     as "countryCode",
       "location_address"                         as "address",
       "location_postalCode"                      as "postalCode",
       Null                                       as "portCode",
       Null                                       as "portName",
       Null                                       as "portType",
       max("id")                                  as "originalShipmentId", --this will change
       count(distinct id)                         as "amountOfShipmentsLastXDays",
       "mode"                                     as "freightType",
       cast(Null as int)                          as "amount"              --?

FROM prod.shipments sh
         inner join prod.shipments_locations loc
                    on loc.location_id = sh."deliveryAddress_location_id"
where sh."tenantId" = p_tenant_id
  and "portOfDischarge_location_id" = p_destination_port_location_id
  and consignee_id = p_consignee_id
  and "mode" = p_freight_type
  --and cast("executionDate" as timestamp) >= (Now() - (p_number_of_days * interval '1' day))
group by location_id, "location_city", "location_stateCode", "location_countryCode",
         "location_address", "location_postalCode", "mode", location_type, "location_name"

$$;

alter function prod.get_optional_delivery_addresses(char, char, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_freights(p_tenant_id character, p_freight_ids character)
    returns TABLE
            (
                id                            character,
                "pickupAddress_id"            integer,
                "pickupAddress_city"          character,
                "pickupAddress_stateCode"     character,
                "pickupAddress_name"          character,
                "pickupAddress_countryCode"   character,
                "pickupAddress_postalCode"    character,
                "pickupAddress_address"       character,
                "pickupAddressType"           character,
                "pickupAddress_insertTime"    character,
                "deliveryAddress_id"          integer,
                "deliveryAddress_city"        character,
                "deliveryAddress_stateCode"   character,
                "deliveryAddress_name"        character,
                "deliveryAddress_countryCode" character,
                "deliveryAddress_postalCode"  character,
                "deliveryAddress_address"     character,
                "deliveryAddressType"         character,
                "deliveryAddress_insertTime"  character,
                "findBy"                      character,
                "jobMode"                     character,
                "loadTerm"                    character,
                "incoTerms"                   character,
                "importExport"                character,
                "pieceId"                     integer,
                "commodityType"               character,
                hazardous                     boolean,
                "hazardClass"                 character,
                "freightPieceType"            character,
                "subType"                     character,
                weight                        numeric,
                "weightUnit"                  character,
                width                         numeric,
                height                        numeric,
                depth                         numeric,
                "measurementUnits"            character,
                amount                        numeric
            )
    language sql
as
$$
SELECT "id",
       pickup_loc."location_id"                                 as "pickupAddress_id",
       pickup_loc."location_city"                               as "pickupAddress_city",
       pickup_loc."location_stateCode"                          as "pickupAddress_stateCode",
       pickup_loc."location_name"                               as "pickupAddress_name",
       pickup_loc."location_countryCode"                        as "pickupAddress_countryCode",
       pickup_loc."location_postalCode"                         as "pickupAddress_postalCode",
       pickup_loc."location_address"                            as "pickupAddress_address",
       pickup_loc."location_type"                               as "pickupAddressType",
       Null                                                     as "pickupAddress_insertTime",

       delivery_loc."location_id"                               as "deliveryAddress_id",
       delivery_loc."location_city"                             as "deliveryAddress_city",
       delivery_loc."location_stateCode"                        as "deliveryAddress_stateCode",
       delivery_loc."location_name"                             as "deliveryAddress_name",
       delivery_loc."location_countryCode"                      as "deliveryAddress_countryCode",
       delivery_loc."location_postalCode"                       as "deliveryAddress_postalCode",
       delivery_loc."location_address"                          as "deliveryAddress_address1",
       delivery_loc."location_type"                             as "deliveryAddressType",
       Null                                                     as "deliveryAddress_insertTime",

       null                                                     as "findBy",
       "mode"                                                   as "jobMode",
       case
           when "mode" = 'AIR' then 'LCL'
           else "mainFreight_freight_loadTerm" end              as "loadTerm",
       "incoTerms",
       "importExport",

       "mainFreight_freightPieces_freightPieceId"               as "pieceId",
       "mainFreight_freightPieces_commodityType"                as "commodityType",
       cast("mainFreight_freightPieces_hazardous" as boolean)   as "hazardous",
       "mainFreight_freightPieces_hazardClass"                  as "hazardClass",
       "mainFreight_freightPieces_freightPieceType"             as "freightPieceType",
       "mainFreight_freightPieces_subType"                      as "subType",
       cast("mainFreight_freightPieces_pieceWeight" as numeric) as "weight",
       "mainFreight_freightPieces_pieceWeightUnits"             as "weightUnit",
       cast("mainFreight_freightPieces_width" as numeric)       as "width",
       cast("mainFreight_freightPieces_height" as numeric)      as "height",
       cast("mainFreight_freightPieces_length" as numeric)      as "depth",
       "mainFreight_freightPieces_measurementUnits"             as "measurementUnits",
       cast("mainFreight_freightPieces_quantity" as numeric)    as "amount"

FROM prod.shipments sh
         left join prod.shipments_mainfreight f
                   on sh.id = f.shipment_id
         left join prod.shipments_locations pickup_loc
                   on pickup_loc.location_id = sh."pickupAddress_location_id"
         left join prod.shipments_locations delivery_loc
                   on pickup_loc.location_id = sh."deliveryAddress_location_id"
where "tenantId" = p_tenant_id
  and p_freight_ids LIKE '%' || id || '%'
order by "creationDateErp" desc


$$;

alter function prod.get_freights(char, char) owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_locations()
    language sql
as
$$
INSERT INTO prod.shipments_locations ("concat_id",
                                      "location_address",
                                      "location_city",
                                      "location_countryCode",
                                      "location_countryName",
                                      "location_name",
                                      "location_portCode",
                                      "location_portName",
                                      "location_portType",
                                      "location_postalCode",
                                      "location_stateCode",
                                      "location_stateName",
                                      "location_type")

SELECT DISTINCT "concat_id",
                "location_address",
                "location_city",
                "location_countryCode",
                "location_countryName",
                "location_name",
                "location_portCode",
                "location_portName",
                "location_portType",
                "location_postalCode",
                "location_stateCode",
                "location_stateName",
                "location_type"
FROM stg.shipments_locations

ON CONFLICT ("concat_id")
    DO NOTHING
$$;

alter procedure prod.history_upsert_shipments_locations() owner to "Postgresadmin";

create function prod.get_frequently_used_values_hazardclass(p_tenant_id character, p_shipper_id character,
                                                            p_consignee_id character, p_amount_of_shipments integer,
                                                            p_origin_port_location_id integer,
                                                            p_destination_port_location_id integer,
                                                            p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freightPieces_hazardClass", ', ') as "value"
from (select f."mainFreight_freightPieces_hazardClass"
      FROM prod.shipments sh
               inner join prod.shipments_mainfreight f
                          on sh.id = f.shipment_id
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_hazardclass(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create procedure prod.history_upsert_shipments()
    language sql
as
$$
INSERT INTO prod.shipments AS ps("calculatedVolume",
                                 "calculatedVolumeConverted",
--"calculatedVolumeUnits",
--"calculatedWeight",
--"calculatedWeightConverted",
--"calculatedWeightUnits",
--"chargeableVolume",
--"chargeableVolumeConverted",
--"chargeableVolumeUnits",
                                 "chargeableWeight",
                                 "chargeableWeightConverted",
                                 "chargeableWeightUnits",
                                 "consigneeAddress_location_id",
                                 "consignee_contact_fax",
                                 "consignee_contact_givenName",
                                 "consignee_contact_lastName",
                                 "consignee_contact_phone",
                                 "consignee_erpId",
                                 "consignee_id",
                                 "consignee_name",
                                 "consolLotUNID",
                                 "consolNumber",
                                 "creationDateErp",
                                 "creationDateTime",
--"creationTime",
                                 "customer_id",
                                 "customer_type",
                                 "deliveryAddress_location_id",
                                 "erpId",
--"executionDate",
                                 "globalShipmentId",
                                 "hazardClass",
                                 "hazardous",
                                 "houseDocumentNumber",
                                 "id",
                                 "importExport",
                                 "incoTerms",
                                 "isAllIn",
                                 "isFreight",
                                 "jobNumber",
--"lastModifiedTime",
                                 "mainFreight_freight_amountOfInsurance",
--"mainFreight_freight_arriveTime",
                                 "mainFreight_freight_carrierCode",
--"mainFreight_freight_carrierErpId",
                                 "mainFreight_freight_carrierIATACode",
                                 "mainFreight_freight_carrierId",
                                 "mainFreight_freight_carrierName",
                                 "mainFreight_freight_collectCharge",
--"mainFreight_freight_collectChargeCurrency",
                                 "mainFreight_freight_collectedTax",
--"mainFreight_freight_convertedAmountOfInsurance",
--"mainFreight_freight_convertedCollectCharge",
--"mainFreight_freight_convertedCollectedTax",
--"mainFreight_freight_convertedManifestVolume",
--"mainFreight_freight_convertedManifestWeight",
--"mainFreight_freight_convertedPrepaidCharge",
--"mainFreight_freight_convertedPrepaidTax",
--"mainFreight_freight_convertedTotalTax",
--"mainFreight_freight_departTime",
--"mainFreight_freight_durationInHours",
                                 "mainFreight_freight_feederVesselArvDate",
                                 "mainFreight_freight_feederVesselArvTime",
                                 "mainFreight_freight_feederVesselCallSign",
                                 "mainFreight_freight_feederVesselCode",
                                 "mainFreight_freight_feederVesselDepartDate",
                                 "mainFreight_freight_feederVesselDepartTime",
                                 "mainFreight_freight_feederVesselName",
                                 "mainFreight_freight_feederVesselVoyage",
                                 "mainFreight_freight_flightNumber",
                                 "mainFreight_freight_flightTime",
                                 "mainFreight_freight_freightChargeCurrency",
                                 "mainFreight_freight_freightChargePerUnit",
                                 "mainFreight_freight_freightChargeUnit",
                                 "mainFreight_freight_insuranceCurrency",
                                 "mainFreight_freight_loadTerm",
                                 "mainFreight_freight_manifestDescription",
                                 "mainFreight_freight_manifestVolume",
                                 "mainFreight_freight_manifestVolumeUnits",
                                 "mainFreight_freight_manifestWeight",
                                 "mainFreight_freight_manifestWeightUnits",
                                 "mainFreight_freight_mode",
                                 "mainFreight_freight_motherVesselArvDateTime",
                                 "mainFreight_freight_motherVesselCallSign",
                                 "mainFreight_freight_motherVesselCode",
                                 "mainFreight_freight_motherVesselDepartDateTime",
                                 "mainFreight_freight_motherVesselFlag",
                                 "mainFreight_freight_motherVesselName",
                                 "mainFreight_freight_motherVoyage",
                                 "mainFreight_freight_prepaidCharge",
                                 "mainFreight_freight_prepaidTax",
                                 "mainFreight_freight_prepaidTaxCurrency",
                                 "masterDocumentNumber",
                                 "mode",
                                 "notifyAddress_location_id",
                                 "notify_contact_fax",
                                 "notify_contact_givenName",
                                 "notify_contact_lastName",
                                 "notify_contact_phone",
                                 "notify_erpId",
                                 "notify_id",
                                 "notify_name",
                                 "pickupAddress_location_id",
                                 "portOfDischarge_codeIATA",
                                 "portOfDischarge_eta",
                                 "portOfDischarge_location_id",
                                 "portOfLoading_codeIATA",
                                 "portOfLoading_etd",
                                 "portOfLoading_location_id",
                                 "record_id",
                                 "second_party_id",
                                 "shipperAddress_location_id",
                                 "shipper_contact_fax",
                                 "shipper_contact_givenName",
                                 "shipper_contact_lastName",
                                 "shipper_contact_phone",
                                 "shipper_erpId",
                                 "shipper_id",
                                 "shipper_name",
                                 "s_id",
                                 "status",
                                 "tenantId",
                                 "totalCost",
                                 "totalCurrency",
                                 "totalDestinationCost",
                                 "totalDestinationRevenue",
                                 "totalOriginCost",
                                 "totalOriginRevenue",
                                 "totalPieces",
                                 "totalProfit",
                                 "totalRevenue",
                                 "totalVolume",
                                 "totalVolumeConverted",
                                 "totalVolumeUnits",
                                 "totalWeight",
                                 "totalWeightConverted",
                                 "totalWeightUnits",
                                 "type")
SELECT "calculatedVolume",
       "calculatedVolumeConverted",
--"calculatedVolumeUnits",
--"calculatedWeight",
--"calculatedWeightConverted",
--"calculatedWeightUnits",
--"chargeableVolume",
--"chargeableVolumeConverted",
--"chargeableVolumeUnits",
       "chargeableWeight",
       "chargeableWeightConverted",
       "chargeableWeightUnits",
       "consigneeAddress_location_id",
       "consignee_contact_fax",
       "consignee_contact_givenName",
       "consignee_contact_lastName",
       "consignee_contact_phone",
       "consignee_erpId",
       "consignee_id",
       "consignee_name",
       "consolLotUNID",
       "consolNumber",
       "creationDateErp",
       "creationDateTime",
--"creationTime",
       "customer_id",
       "customer_type",
       "deliveryAddress_location_id",
       "erpId",
--"executionDate",
       "globalShipmentId",
       "hazardClass",
       "hazardous",
       "houseDocumentNumber",
       "id",
       "importExport",
       "incoTerms",
       "isAllIn",
       "isFreight",
       "jobNumber",
--"lastModifiedTime",
       "mainFreight_freight_amountOfInsurance",
--"mainFreight_freight_arriveTime",
       "mainFreight_freight_carrierCode",
--"mainFreight_freight_carrierErpId",
       "mainFreight_freight_carrierIATACode",
       "mainFreight_freight_carrierId",
       "mainFreight_freight_carrierName",
       "mainFreight_freight_collectCharge",
--"mainFreight_freight_collectChargeCurrency",
       "mainFreight_freight_collectedTax",
--"mainFreight_freight_convertedAmountOfInsurance",
--"mainFreight_freight_convertedCollectCharge",
--"mainFreight_freight_convertedCollectedTax",
--"mainFreight_freight_convertedManifestVolume",
--"mainFreight_freight_convertedManifestWeight",
--"mainFreight_freight_convertedPrepaidCharge",
--"mainFreight_freight_convertedPrepaidTax",
--"mainFreight_freight_convertedTotalTax",
--"mainFreight_freight_departTime",
--"mainFreight_freight_durationInHours",
       "mainFreight_freight_feederVesselArvDate",
       "mainFreight_freight_feederVesselArvTime",
       "mainFreight_freight_feederVesselCallSign",
       "mainFreight_freight_feederVesselCode",
       "mainFreight_freight_feederVesselDepartDate",
       "mainFreight_freight_feederVesselDepartTime",
       "mainFreight_freight_feederVesselName",
       "mainFreight_freight_feederVesselVoyage",
       "mainFreight_freight_flightNumber",
       "mainFreight_freight_flightTime",
       "mainFreight_freight_freightChargeCurrency",
       "mainFreight_freight_freightChargePerUnit",
       "mainFreight_freight_freightChargeUnit",
       "mainFreight_freight_insuranceCurrency",
       "mainFreight_freight_loadTerm",
       "mainFreight_freight_manifestDescription",
       "mainFreight_freight_manifestVolume",
       "mainFreight_freight_manifestVolumeUnits",
       "mainFreight_freight_manifestWeight",
       "mainFreight_freight_manifestWeightUnits",
       "mainFreight_freight_mode",
       "mainFreight_freight_motherVesselArvDateTime",
       "mainFreight_freight_motherVesselCallSign",
       "mainFreight_freight_motherVesselCode",
       "mainFreight_freight_motherVesselDepartDateTime",
       "mainFreight_freight_motherVesselFlag",
       "mainFreight_freight_motherVesselName",
       "mainFreight_freight_motherVoyage",
       "mainFreight_freight_prepaidCharge",
       "mainFreight_freight_prepaidTax",
       "mainFreight_freight_prepaidTaxCurrency",
       "masterDocumentNumber",
       "mode",
       "notifyAddress_location_id",
       "notify_contact_fax",
       "notify_contact_givenName",
       "notify_contact_lastName",
       "notify_contact_phone",
       "notify_erpId",
       "notify_id",
       "notify_name",
       "pickupAddress_location_id",
       "portOfDischarge_codeIATA",
       "portOfDischarge_eta",
       "portOfDischarge_location_id",
       "portOfLoading_codeIATA",
       "portOfLoading_etd",
       "portOfLoading_location_id",
       "record_id",
       "second_party_id",
       "shipperAddress_location_id",
       "shipper_contact_fax",
       "shipper_contact_givenName",
       "shipper_contact_lastName",
       "shipper_contact_phone",
       "shipper_erpId",
       "shipper_id",
       "shipper_name",
       "s_id",
       "status",
       "tenantId",
       "totalCost",
       "totalCurrency",
       "totalDestinationCost",
       "totalDestinationRevenue",
       "totalOriginCost",
       "totalOriginRevenue",
       "totalPieces",
       "totalProfit",
       "totalRevenue",
       "totalVolume",
       "totalVolumeConverted",
       "totalVolumeUnits",
       "totalWeight",
       "totalWeightConverted",
       "totalWeightUnits",
       "type"
FROM stg.shipments AS ss
/*
ON CONFLICT ("id")
DO UPDATE
SET
"calculatedVolume" = EXCLUDED."calculatedVolume",
"calculatedVolumeConverted" = EXCLUDED."calculatedVolumeConverted",
--"calculatedVolumeUnits" = EXCLUDED.--"calculatedVolumeUnits",
--"calculatedWeight" = EXCLUDED."calculatedWeight",
--"calculatedWeightConverted = EXCLUDED."calculatedWeightConverted",
--"calculatedWeightUnits" = EXCLUDED."calculatedWeightUnits",
--"chargeableVolume" = EXCLUDED."chargeableVolume",
--"chargeableVolumeConverted" = EXCLUDED."chargeableVolumeConverted",
--"chargeableVolumeUnits" = EXCLUDED."chargeableVolumeUnits",
"chargeableWeight" = EXCLUDED."chargeableWeight",
"chargeableWeightConverted" = EXCLUDED."chargeableWeightConverted",
"chargeableWeightUnits" = EXCLUDED."chargeableWeightUnits",
"consigneeAddress_location_id" = EXCLUDED."consigneeAddress_location_id",
"consignee_contact_fax" = EXCLUDED."consignee_contact_fax",
"consignee_contact_givenName" = EXCLUDED."consignee_contact_givenName",
"consignee_contact_lastName" = EXCLUDED."consignee_contact_lastName",
"consignee_contact_phone" = EXCLUDED."consignee_contact_phone",
"consignee_erpId" = EXCLUDED."consignee_erpId",
"consignee_id" = EXCLUDED."consignee_id",
"consignee_name" = EXCLUDED."consignee_name",
"consolLotUNID" = EXCLUDED."consolLotUNID",
"consolNumber" = EXCLUDED."consolNumber",
"creationDateErp" = EXCLUDED."creationDateErp",
"creationDateTime" = EXCLUDED."creationDateTime",
--"creationTime" = EXCLUDED."creationTime",
"customer_id" = EXCLUDED."customer_id",
"customer_type" = EXCLUDED."customer_type",
"deliveryAddress_location_id" = EXCLUDED."deliveryAddress_location_id",
"erpId" = EXCLUDED."erpId",
--"executionDate" = EXCLUDED."executionDate",
"globalShipmentId" = EXCLUDED."globalShipmentId",
"hazardClass" = EXCLUDED."hazardClass",
"hazardous" = EXCLUDED."hazardous",
"houseDocumentNumber" = EXCLUDED."houseDocumentNumber",
"id" = EXCLUDED."id",
"importExport" = EXCLUDED."importExport",
"incoTerms" = EXCLUDED."incoTerms",
"isAllIn" = EXCLUDED."isAllIn",
"isFreight" = EXCLUDED."isFreight,"
"jobNumber" = EXCLUDED."jobNumber",
--"lastModifiedTime" = EXCLUDED."lastModifiedTime",
"mainFreight_freight_amountOfInsurance" = EXCLUDED."mainFreight_freight_amountOfInsurance",
--"mainFreight_freight_arriveTime" = EXCLUDED."mainFreight_freight_arriveTime",
"mainFreight_freight_carrierCode" = EXCLUDED."mainFreight_freight_carrierCode",
--"mainFreight_freight_carrierErpId" = EXCLUDED."mainFreight_freight_carrierErpId",
"mainFreight_freight_carrierIATACode" = EXCLUDED."mainFreight_freight_carrierIATACode",
"mainFreight_freight_carrierId" = EXCLUDED."mainFreight_freight_carrierId",
"mainFreight_freight_carrierName" = EXCLUDED."mainFreight_freight_carrierName",
"mainFreight_freight_collectCharge" = EXCLUDED."mainFreight_freight_collectCharge",
--"mainFreight_freight_collectChargeCurrency" = EXCLUDED."mainFreight_freight_collectChargeCurrency",
"mainFreight_freight_collectedTax" = EXCLUDED."mainFreight_freight_collectedTax",
--"mainFreight_freight_convertedAmountOfInsurance" = EXCLUDED."mainFreight_freight_convertedAmountOfInsurance",
--"mainFreight_freight_convertedCollectCharge" = EXCLUDED."mainFreight_freight_convertedCollectCharge",
--"mainFreight_freight_convertedCollectedTax" = EXCLUDED."mainFreight_freight_convertedCollectedTax",
--"mainFreight_freight_convertedManifestVolume" = EXCLUDED."mainFreight_freight_convertedManifestVolume",
--"mainFreight_freight_convertedManifestWeight" = EXCLUDED."mainFreight_freight_convertedManifestWeight",
--"mainFreight_freight_convertedPrepaidCharge" = EXCLUDED."mainFreight_freight_convertedPrepaidCharge",
--"mainFreight_freight_convertedPrepaidTax" = EXCLUDED."mainFreight_freight_convertedPrepaidTax",
--"mainFreight_freight_convertedTotalTax" = EXCLUDED."mainFreight_freight_convertedTotalTax",
--"mainFreight_freight_departTime" = EXCLUDED."mainFreight_freight_departTime",
--"mainFreight_freight_durationInHours" = EXCLUDED."mainFreight_freight_durationInHours",
"mainFreight_freight_feederVesselArvDate" = EXCLUDED."mainFreight_freight_feederVesselArvDate",
"mainFreight_freight_feederVesselArvTime" = EXCLUDED."mainFreight_freight_feederVesselArvTime",
"mainFreight_freight_feederVesselCallSign" = EXCLUDED."mainFreight_freight_feederVesselCallSign",
"mainFreight_freight_feederVesselCode" = EXCLUDED."mainFreight_freight_feederVesselCode",
"mainFreight_freight_feederVesselDepartDate" = EXCLUDED."mainFreight_freight_feederVesselDepartDate",
"mainFreight_freight_feederVesselDepartTime" = EXCLUDED."mainFreight_freight_feederVesselDepartTime",
"mainFreight_freight_feederVesselName" = EXCLUDED."mainFreight_freight_feederVesselName",
"mainFreight_freight_feederVesselVoyage" = EXCLUDED."mainFreight_freight_feederVesselVoyage",
"mainFreight_freight_flightNumber" = EXCLUDED."mainFreight_freight_flightNumber",
"mainFreight_freight_flightTime" = EXCLUDED."mainFreight_freight_flightTime",
"mainFreight_freight_freightChargeCurrency" = EXCLUDED."mainFreight_freight_freightChargeCurrency",
"mainFreight_freight_freightChargePerUnit" = EXCLUDED."mainFreight_freight_freightChargePerUnit",
"mainFreight_freight_freightChargeUnit" = EXCLUDED."mainFreight_freight_freightChargeUnit",
"mainFreight_freight_insuranceCurrency" = EXCLUDED."mainFreight_freight_insuranceCurrency",
"mainFreight_freight_loadTerm" = EXCLUDED."mainFreight_freight_loadTerm",
"mainFreight_freight_manifestDescription" = EXCLUDED."mainFreight_freight_manifestDescription",
"mainFreight_freight_manifestVolume" = EXCLUDED."mainFreight_freight_manifestVolume",
"mainFreight_freight_manifestVolumeUnits" = EXCLUDED."mainFreight_freight_manifestVolumeUnits",
"mainFreight_freight_manifestWeight" = EXCLUDED."mainFreight_freight_manifestWeight",
"mainFreight_freight_manifestWeightUnits" = EXCLUDED."mainFreight_freight_manifestWeightUnits",
"mainFreight_freight_mode" = EXCLUDED."mainFreight_freight_mode",
"mainFreight_freight_motherVesselArvDateTime" = EXCLUDED."mainFreight_freight_motherVesselArvDateTime",
"mainFreight_freight_motherVesselCallSign" = EXCLUDED."mainFreight_freight_motherVesselCallSign",
"mainFreight_freight_motherVesselCode" = EXCLUDED."mainFreight_freight_motherVesselCode",
"mainFreight_freight_motherVesselDepartDateTime" = EXCLUDED."mainFreight_freight_motherVesselDepartDateTime",
"mainFreight_freight_motherVesselFlag" = EXCLUDED."mainFreight_freight_motherVesselFlag",
"mainFreight_freight_motherVesselName" = EXCLUDED."mainFreight_freight_motherVesselName",
"mainFreight_freight_motherVoyage" = EXCLUDED."mainFreight_freight_motherVoyage",
"mainFreight_freight_prepaidCharge" = EXCLUDED."mainFreight_freight_prepaidCharge",
"mainFreight_freight_prepaidTax" = EXCLUDED."mainFreight_freight_prepaidTax",
"mainFreight_freight_prepaidTaxCurrency" = EXCLUDED."mainFreight_freight_prepaidTaxCurrency",
"masterDocumentNumber" = EXCLUDED."masterDocumentNumber",
"mode" = EXCLUDED."mode",
"notifyAddress_location_id" = EXCLUDED."notifyAddress_location_id",
"notify_contact_fax" = EXCLUDED."notify_contact_fax",
"notify_contact_givenName" = EXCLUDED."notify_contact_givenName",
"notify_contact_lastName" = EXCLUDED."notify_contact_lastName",
"notify_contact_phone" = EXCLUDED."notify_contact_phone",
"notify_erpId" = EXCLUDED."notify_erpId",
"notify_id" = EXCLUDED."notify_id",
"notify_name" = EXCLUDED."notify_name",
"pickupAddress_location_id" = EXCLUDED."pickupAddress_location_id",
"portOfDischarge_codeIATA" = EXCLUDED."portOfDischarge_codeIATA",
"portOfDischarge_eta" = EXCLUDED."portOfDischarge_eta",
"portOfDischarge_location_id" = EXCLUDED."portOfDischarge_location_id",
"portOfLoading_codeIATA" = EXCLUDED."portOfLoading_codeIATA",
"portOfLoading_etd" = EXCLUDED."portOfLoading_etd",
"portOfLoading_location_id" = EXCLUDED."portOfLoading_location_id",
"record_id" = EXCLUDED."record_id",
"second_party_id" = EXCLUDED."second_party_id",
"shipperAddress_location_id" = EXCLUDED."shipperAddress_location_id",
"shipper_contact_fax" = EXCLUDED."shipper_contact_fax",
"shipper_contact_givenName" = EXCLUDED."shipper_contact_givenName",
"shipper_contact_lastName" = EXCLUDED."shipper_contact_lastName",
"shipper_contact_phone" = EXCLUDED."shipper_contact_phone",
"shipper_erpId" = EXCLUDED."shipper_erpId",
"shipper_id" = EXCLUDED."shipper_id",
"shipper_name" = EXCLUDED."shipper_name",
"s_id" = EXCLUDED."s_id",
"status" = EXCLUDED."status",
"tenantId" = EXCLUDED."tenantId",
"totalCost" = EXCLUDED."totalCost",
"totalCurrency" = EXCLUDED."totalCurrency",
"totalDestinationCost" = EXCLUDED."totalDestinationCost",
"totalDestinationRevenue" = EXCLUDED."totalDestinationRevenue",
"totalNumberOfUnits" = EXCLUDED."totalNumberOfUnits",
"totalOriginCost" = EXCLUDED."totalOriginCost",
"totalOriginRevenue" = EXCLUDED."totalOriginRevenue",
"totalPieces" = EXCLUDED."totalPieces",
"totalRevenue" = EXCLUDED."totalRevenue",
"totalVolume" = EXCLUDED."totalVolume",
"totalVolumeConverted" = EXCLUDED."totalVolumeConverted",
"totalVolumeUnits" = EXCLUDED."totalVolumeUnits",
"totalWeight" = EXCLUDED."totalWeight",
"totalWeightConverted" = EXCLUDED."totalWeightConverted",
"totalWeightUnits" = EXCLUDED."totalWeightUnits",
"type" = EXCLUDED."type"*/
$$;

alter procedure prod.history_upsert_shipments() owner to "Postgresadmin";

create function prod.get_frequently_used_values_incoterms(p_tenant_id character, p_shipper_id character,
                                                          p_consignee_id character, p_amount_of_shipments integer,
                                                          p_origin_port_location_id integer,
                                                          p_destination_port_location_id integer,
                                                          p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "incoTerms", ', ') as "value"
from (select "incoTerms"
      FROM prod.shipments sh
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_incoterms(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_mainfreight()
    language sql
as
$$
INSERT INTO prod.shipments_mainfreight AS psm( "creationDateTime"
                                             , "mainFreight_freightPieces_commodityDescription"
                                             , "mainFreight_freightPieces_commodityType"
--,"mainFreight_freightPieces_depth"
--,"mainFreight_freightPieces_depthConverted"
                                             , "mainFreight_freightPieces_freightPieceId"
                                             , "mainFreight_freightPieces_freightPieceType"
                                             , "mainFreight_freightPieces_hazardClass"
                                             , "mainFreight_freightPieces_hazardous"
                                             , "mainFreight_freightPieces_height"
--,"mainFreight_freightPieces_heightConverted"
                                             , "mainFreight_freightPieces_length"
                                             , "mainFreight_freightPieces_measurementUnits"
                                             , "mainFreight_freightPieces_pieceVolume"
--,"mainFreight_freightPieces_pieceVolumeConverted"
                                             , "mainFreight_freightPieces_pieceVolumeUnits"
                                             , "mainFreight_freightPieces_pieceWeight"
--,"mainFreight_freightPieces_pieceWeightConverted"
                                             , "mainFreight_freightPieces_pieceWeightUnits"
                                             , "mainFreight_freightPieces_quantity"
                                             , "mainFreight_freightPieces_subType"
                                             , "mainFreight_freightPieces_width"
--,"mainFreight_freightPieces_widthConverted"
                                             , "s_id"
                                             , "shipment_id")
SELECT "creationDateTime"
     , "mainFreight_freightPieces_commodityDescription"
     , "mainFreight_freightPieces_commodityType"
--,"mainFreight_freightPieces_depth"
--,"mainFreight_freightPieces_depthConverted"
     , "mainFreight_freightPieces_freightPieceId"
     , "mainFreight_freightPieces_freightPieceType"
     , "mainFreight_freightPieces_hazardClass"
     , "mainFreight_freightPieces_hazardous"
     , "mainFreight_freightPieces_height"
--,"mainFreight_freightPieces_heightConverted"
     , "mainFreight_freightPieces_length"
     , "mainFreight_freightPieces_measurementUnits"
     , "mainFreight_freightPieces_pieceVolume"
--,"mainFreight_freightPieces_pieceVolumeConverted"
     , "mainFreight_freightPieces_pieceVolumeUnits"
     , "mainFreight_freightPieces_pieceWeight"
--,"mainFreight_freightPieces_pieceWeightConverted"
     , "mainFreight_freightPieces_pieceWeightUnits"
     , "mainFreight_freightPieces_quantity"
     , "mainFreight_freightPieces_subType"
     , "mainFreight_freightPieces_width"
--,"mainFreight_freightPieces_widthConverted"
     , "s_id"
     , "shipment_id"
FROM stg.shipments_mainfreight

/*
ON CONFLICT ON CONSTRAINT shipments_mainfreight_pkey
DO UPDATE
SET
"creationDateTime" = EXCLUDED."creationDateTime"
,"mainFreight_freightPieces_commodityDescription" = EXCLUDED."mainFreight_freightPieces_commodityDescription"
,"mainFreight_freightPieces_commodityType" = EXCLUDED."mainFreight_freightPieces_commodityType"
--,"mainFreight_freightPieces_depth" = EXCLUDED."mainFreight_freightPieces_depth"
--,"mainFreight_freightPieces_depthConverted" = EXCLUDED."mainFreight_freightPieces_depthConverted"
,"mainFreight_freightPieces_freightPieceType" = EXCLUDED."mainFreight_freightPieces_freightPieceType"
,"mainFreight_freightPieces_hazardClass" = EXCLUDED."mainFreight_freightPieces_hazardClass"
,"mainFreight_freightPieces_hazardous" = EXCLUDED."mainFreight_freightPieces_hazardous"
,"mainFreight_freightPieces_height" = EXCLUDED."mainFreight_freightPieces_height"
--,"mainFreight_freightPieces_heightConverted" = EXCLUDED."mainFreight_freightPieces_heightConverted"
,"mainFreight_freightPieces_length" = EXCLUDED."mainFreight_freightPieces_length"
,"mainFreight_freightPieces_measurementUnits" = EXCLUDED."mainFreight_freightPieces_measurementUnits"
,"mainFreight_freightPieces_pieceVolume" = EXCLUDED."mainFreight_freightPieces_pieceVolume"
--,"mainFreight_freightPieces_pieceVolumeConverted" = EXCLUDED."mainFreight_freightPieces_pieceVolumeConverted"
,"mainFreight_freightPieces_pieceVolumeUnits" = EXCLUDED."mainFreight_freightPieces_pieceVolumeUnits"
,"mainFreight_freightPieces_pieceWeight" = EXCLUDED."mainFreight_freightPieces_pieceWeight"
--,"mainFreight_freightPieces_pieceWeightConverted" = EXCLUDED."mainFreight_freightPieces_pieceWeightConverted"
,"mainFreight_freightPieces_pieceWeightUnits" = EXCLUDED."mainFreight_freightPieces_pieceWeightUnits"
,"mainFreight_freightPieces_quantity" = EXCLUDED."mainFreight_freightPieces_quantity"
,"mainFreight_freightPieces_subType" = EXCLUDED."mainFreight_freightPieces_subType"
,"mainFreight_freightPieces_width" = EXCLUDED."mainFreight_freightPieces_width"
--,"mainFreight_freightPieces_widthConverted" = EXCLUDED."mainFreight_freightPieces_widthConverted"
,"s_id" = EXCLUDED."s_id"
*/
$$;

alter procedure prod.history_upsert_shipments_mainfreight() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_origin()
    language sql
as
$$
INSERT INTO prod.shipments_origin AS pso( "concat_id"
                                        , "creationDateTime"
                                        , "origin_serviceItems_chargeCode"
                                        , "origin_serviceItems_chargeDescription"
                                        , "origin_serviceItems_quantityUnit"
                                        , "origin_serviceItems_serviceCost_exchangeRate"
                                        , "origin_serviceItems_serviceCost_foreignCurrencyAmount"
                                        , "origin_serviceItems_serviceCost_invoiceNumber"
                                        , "origin_serviceItems_serviceCost_localCurrencyAmount"
                                        , "origin_serviceItems_serviceCost_numberOfUnits"
                                        , "origin_serviceItems_serviceCost_rateCurrencyCode"
                                        , "origin_serviceItems_serviceCost_ratePerUnit"
--,"origin_serviceItems_serviceCost_ratePerUnitConverted"
--,"origin_serviceItems_serviceCost_rateUnitType"
--,"origin_serviceItems_serviceParty_contact_givenName"
--,"origin_serviceItems_serviceParty_contact_lastName"
--,"origin_serviceItems_serviceParty_contact_mobile"
                                        , "origin_serviceItems_serviceParty_erpId"
                                        , "origin_serviceItems_serviceParty_id"
--,"origin_serviceItems_serviceParty_location_id"
--,"origin_serviceItems_serviceParty_name"
--,"origin_serviceItems_serviceParty_type"
                                        , "origin_serviceItems_serviceRevenue_exchangeRate"
                                        , "origin_serviceItems_serviceRevenue_foreignCurrencyAmount"
                                        , "origin_serviceItems_serviceRevenue_invoiceNumber"
                                        , "origin_serviceItems_serviceRevenue_localCurrencyAmount"
                                        , "origin_serviceItems_serviceRevenue_numberOfUnits"
                                        , "origin_serviceItems_serviceRevenue_rateCurrencyCode"
                                        , "origin_serviceItems_serviceRevenue_ratePerUnit"
--,"origin_serviceItems_serviceRevenue_ratePerUnitConverted"
--,"origin_serviceItems_serviceRevenue_rateUnitType"
                                        , "origin_serviceItems_serviceTypeEnum"
                                        , "s_id"
                                        , "shipment_id")
SELECT "concat_id"
     , "creationDateTime"
     , "origin_serviceItems_chargeCode"
     , "origin_serviceItems_chargeDescription"
     , "origin_serviceItems_quantityUnit"
     , "origin_serviceItems_serviceCost_exchangeRate"
     , "origin_serviceItems_serviceCost_foreignCurrencyAmount"
     , "origin_serviceItems_serviceCost_invoiceNumber"
     , "origin_serviceItems_serviceCost_localCurrencyAmount"
     , "origin_serviceItems_serviceCost_numberOfUnits"
     , "origin_serviceItems_serviceCost_rateCurrencyCode"
     , "origin_serviceItems_serviceCost_ratePerUnit"
--,"origin_serviceItems_serviceCost_ratePerUnitConverted"
--,"origin_serviceItems_serviceCost_rateUnitType"
--,"origin_serviceItems_serviceParty_contact_givenName"
--,"origin_serviceItems_serviceParty_contact_lastName"
--,"origin_serviceItems_serviceParty_contact_mobile"
     , "origin_serviceItems_serviceParty_erpId"
     , "origin_serviceItems_serviceParty_id"
--,"origin_serviceItems_serviceParty_location_id"
--,"origin_serviceItems_serviceParty_name"
--,"origin_serviceItems_serviceParty_type"
     , "origin_serviceItems_serviceRevenue_exchangeRate"
     , "origin_serviceItems_serviceRevenue_foreignCurrencyAmount"
     , "origin_serviceItems_serviceRevenue_invoiceNumber"
     , "origin_serviceItems_serviceRevenue_localCurrencyAmount"
     , "origin_serviceItems_serviceRevenue_numberOfUnits"
     , "origin_serviceItems_serviceRevenue_rateCurrencyCode"
     , "origin_serviceItems_serviceRevenue_ratePerUnit"
--,"origin_serviceItems_serviceRevenue_ratePerUnitConverted"
--,"origin_serviceItems_serviceRevenue_rateUnitType"
     , "origin_serviceItems_serviceTypeEnum"
     , "s_id"
     , "shipment_id"
FROM stg.shipments_origin

/*
ON CONFLICT ("concat_id")
DO UPDATE
SET
"creationDateTime" = EXCLUDED."creationDateTime"
,"origin_serviceItems_chargeDescription" = EXCLUDED."origin_serviceItems_chargeDescription"
,"origin_serviceItems_quantityUnit" = EXCLUDED."origin_serviceItems_quantityUnit"
,"origin_serviceItems_serviceCost_exchangeRate" = EXCLUDED."origin_serviceItems_serviceCost_exchangeRate"
,"origin_serviceItems_serviceCost_foreignCurrencyAmount" = EXCLUDED."origin_serviceItems_serviceCost_foreignCurrencyAmount"
,"origin_serviceItems_serviceCost_invoiceNumber" = EXCLUDED."origin_serviceItems_serviceCost_invoiceNumber"
,"origin_serviceItems_serviceCost_localCurrencyAmount" = EXCLUDED."origin_serviceItems_serviceCost_localCurrencyAmount"
,"origin_serviceItems_serviceCost_numberOfUnits" = EXCLUDED."origin_serviceItems_serviceCost_numberOfUnits"
,"origin_serviceItems_serviceCost_rateCurrencyCode" = EXCLUDED."origin_serviceItems_serviceCost_rateCurrencyCode"
,"origin_serviceItems_serviceCost_ratePerUnit" = EXCLUDED."origin_serviceItems_serviceCost_ratePerUnit"
--,"origin_serviceItems_serviceCost_ratePerUnitConverted" = EXCLUDED."origin_serviceItems_serviceCost_ratePerUnitConverted"
--,"origin_serviceItems_serviceCost_rateUnitType" = EXCLUDED."origin_serviceItems_serviceCost_rateUnitType"
--,"origin_serviceItems_serviceParty_contact_givenName" = EXCLUDED."origin_serviceItems_serviceParty_contact_givenName"
--,"origin_serviceItems_serviceParty_contact_lastName" = EXCLUDED."origin_serviceItems_serviceParty_contact_lastName"
--,"origin_serviceItems_serviceParty_contact_mobile" = EXCLUDED."origin_serviceItems_serviceParty_contact_mobile"
,"origin_serviceItems_serviceParty_erpId" = EXCLUDED."origin_serviceItems_serviceParty_erpId"
--,"origin_serviceItems_serviceParty_location_id" = EXCLUDED."origin_serviceItems_serviceParty_location_id"
--,"origin_serviceItems_serviceParty_name" = EXCLUDED."origin_serviceItems_serviceParty_name"
--,"origin_serviceItems_serviceParty_type" = EXCLUDED."origin_serviceItems_serviceParty_type"
,"origin_serviceItems_serviceRevenue_exchangeRate" = EXCLUDED."origin_serviceItems_serviceRevenue_exchangeRate"
,"origin_serviceItems_serviceRevenue_foreignCurrencyAmount" = EXCLUDED."origin_serviceItems_serviceRevenue_foreignCurrencyAmount"
,"origin_serviceItems_serviceRevenue_invoiceNumber" = EXCLUDED."origin_serviceItems_serviceRevenue_invoiceNumber"
,"origin_serviceItems_serviceRevenue_localCurrencyAmount" = EXCLUDED."origin_serviceItems_serviceRevenue_localCurrencyAmount"
,"origin_serviceItems_serviceRevenue_numberOfUnits" = EXCLUDED."origin_serviceItems_serviceRevenue_numberOfUnits"
,"origin_serviceItems_serviceRevenue_rateCurrencyCode" = EXCLUDED."origin_serviceItems_serviceRevenue_rateCurrencyCode"
,"origin_serviceItems_serviceRevenue_ratePerUnit" = EXCLUDED."origin_serviceItems_serviceRevenue_ratePerUnit"
--,"origin_serviceItems_serviceRevenue_ratePerUnitConverted" = EXCLUDED."origin_serviceItems_serviceRevenue_ratePerUnitConverted"
--,"origin_serviceItems_serviceRevenue_rateUnitType" = EXCLUDED."origin_serviceItems_serviceRevenue_rateUnitType"
,"origin_serviceItems_serviceTypeEnum" = EXCLUDED."origin_serviceItems_serviceTypeEnum"
,"s_id" = EXCLUDED."s_id"
*/
$$;

alter procedure prod.history_upsert_shipments_origin() owner to "Postgresadmin";

create procedure prod.history_upsert_shipments_destination()
    language sql
as
$$
INSERT INTO prod.shipments_destination AS psd( "creationDateTime"
                                             , "concat_id"
                                             , "destination_serviceItems_chargeCode"
                                             , "destination_serviceItems_chargeDescription"
                                             , "destination_serviceItems_quantityUnit"
                                             , "destination_serviceItems_serviceCost_exchangeRate"
                                             , "destination_serviceItems_serviceCost_foreignCurrencyAmount"
                                             , "destination_serviceItems_serviceCost_invoiceNumber"
                                             , "destination_serviceItems_serviceCost_localCurrencyAmount"
                                             , "destination_serviceItems_serviceCost_numberOfUnits"
                                             , "destination_serviceItems_serviceCost_rateCurrencyCode"
                                             , "destination_serviceItems_serviceCost_ratePerUnit"
--,"destination_serviceItems_serviceCost_ratePerUnitConverted"
--,"destination_serviceItems_serviceCost_rateUnitType"
--,"destination_serviceItems_serviceParty_contact_email"
--,"destination_serviceItems_serviceParty_contact_fax"
--,"destination_serviceItems_serviceParty_contact_givenName"
--,"destination_serviceItems_serviceParty_contact_lastName"
--,"destination_serviceItems_serviceParty_contact_mobile"
--,"destination_serviceItems_serviceParty_contact_phone"
                                             , "destination_serviceItems_serviceParty_erpId"
                                             , "destination_serviceItems_serviceParty_id"
--,"destination_serviceItems_serviceParty_location_id"
--,"destination_serviceItems_serviceParty_name"
--,"destination_serviceItems_serviceParty_type"
                                             , "destination_serviceItems_serviceRevenue_exchangeRate"
                                             , "destination_serviceItems_serviceRevenue_foreignCurrencyAmount"
                                             , "destination_serviceItems_serviceRevenue_invoiceNumber"
                                             , "destination_serviceItems_serviceRevenue_localCurrencyAmount"
                                             , "destination_serviceItems_serviceRevenue_numberOfUnits"
                                             , "destination_serviceItems_serviceRevenue_rateCurrencyCode"
                                             , "destination_serviceItems_serviceRevenue_ratePerUnit"
--,"destination_serviceItems_serviceRevenue_ratePerUnitConverted"
--,"destination_serviceItems_serviceRevenue_rateUnitType"
                                             , "destination_serviceItems_serviceTypeEnum"
                                             , "s_id"
                                             , "shipment_id")
SELECT "creationDateTime"
     , "concat_id"
     , "destination_serviceItems_chargeCode"
     , "destination_serviceItems_chargeDescription"
     , "destination_serviceItems_quantityUnit"
     , "destination_serviceItems_serviceCost_exchangeRate"
     , "destination_serviceItems_serviceCost_foreignCurrencyAmount"
     , "destination_serviceItems_serviceCost_invoiceNumber"
     , "destination_serviceItems_serviceCost_localCurrencyAmount"
     , "destination_serviceItems_serviceCost_numberOfUnits"
     , "destination_serviceItems_serviceCost_rateCurrencyCode"
     , "destination_serviceItems_serviceCost_ratePerUnit"
--,"destination_serviceItems_serviceCost_ratePerUnitConverted"
--,"destination_serviceItems_serviceCost_rateUnitType"
--,"destination_serviceItems_serviceParty_contact_email"
--,"destination_serviceItems_serviceParty_contact_fax"
--,"destination_serviceItems_serviceParty_contact_givenName"
--,"destination_serviceItems_serviceParty_contact_lastName"
--,"destination_serviceItems_serviceParty_contact_mobile"
--,"destination_serviceItems_serviceParty_contact_phone"
     , "destination_serviceItems_serviceParty_erpId"
     , "destination_serviceItems_serviceParty_id"
--,"destination_serviceItems_serviceParty_location_id"
--,"destination_serviceItems_serviceParty_name"
--,"destination_serviceItems_serviceParty_type"
     , "destination_serviceItems_serviceRevenue_exchangeRate"
     , "destination_serviceItems_serviceRevenue_foreignCurrencyAmount"
     , "destination_serviceItems_serviceRevenue_invoiceNumber"
     , "destination_serviceItems_serviceRevenue_localCurrencyAmount"
     , "destination_serviceItems_serviceRevenue_numberOfUnits"
     , "destination_serviceItems_serviceRevenue_rateCurrencyCode"
     , "destination_serviceItems_serviceRevenue_ratePerUnit"
--,"destination_serviceItems_serviceRevenue_ratePerUnitConverted"
--,"destination_serviceItems_serviceRevenue_rateUnitType"
     , "destination_serviceItems_serviceTypeEnum"
     , "s_id"
     , "shipment_id"
FROM stg.shipments_destination

/*
ON CONFLICT ("concat_id")
DO UPDATE
SET
"creationDateTime" = EXCLUDED."creationDateTime"
,"destination_serviceItems_chargeDescription" = EXCLUDED."destination_serviceItems_chargeDescription"
,"destination_serviceItems_quantityUnit" = EXCLUDED."destination_serviceItems_quantityUnit"
,"destination_serviceItems_serviceCost_exchangeRate" = EXCLUDED."destination_serviceItems_serviceCost_exchangeRate"
,"destination_serviceItems_serviceCost_foreignCurrencyAmount" = EXCLUDED."destination_serviceItems_serviceCost_foreignCurrencyAmount"
,"destination_serviceItems_serviceCost_invoiceNumber" = EXCLUDED."destination_serviceItems_serviceCost_invoiceNumber"
,"destination_serviceItems_serviceCost_localCurrencyAmount" = EXCLUDED."destination_serviceItems_serviceCost_localCurrencyAmount"
,"destination_serviceItems_serviceCost_numberOfUnits" = EXCLUDED."destination_serviceItems_serviceCost_numberOfUnits"
,"destination_serviceItems_serviceCost_rateCurrencyCode" = EXCLUDED."destination_serviceItems_serviceCost_rateCurrencyCode"
,"destination_serviceItems_serviceCost_ratePerUnit" = EXCLUDED."destination_serviceItems_serviceCost_ratePerUnit"
--,"destination_serviceItems_serviceCost_ratePerUnitConverted" = EXCLUDED."destination_serviceItems_serviceCost_ratePerUnitConverted"
--,"destination_serviceItems_serviceCost_rateUnitType" = EXCLUDED."destination_serviceItems_serviceCost_rateUnitType"
--,"destination_serviceItems_serviceParty_contact_email" = EXCLUDED."destination_serviceItems_serviceParty_contact_email"
--,"destination_serviceItems_serviceParty_contact_fax" = EXCLUDED."destination_serviceItems_serviceParty_contact_fax"
--,"destination_serviceItems_serviceParty_contact_givenName" = EXCLUDED."destination_serviceItems_serviceParty_contact_givenName"
--,"destination_serviceItems_serviceParty_contact_lastName" = EXCLUDED."destination_serviceItems_serviceParty_contact_lastName"
--,"destination_serviceItems_serviceParty_contact_mobile" = EXCLUDED."destination_serviceItems_serviceParty_contact_mobile"
--,"destination_serviceItems_serviceParty_contact_phone" = EXCLUDED."destination_serviceItems_serviceParty_contact_phone"
,"destination_serviceItems_serviceParty_erpId" = EXCLUDED."destination_serviceItems_serviceParty_erpId"
--,"destination_serviceItems_serviceParty_location_id" = EXCLUDED."destination_serviceItems_serviceParty_location_id"
--,"destination_serviceItems_serviceParty_name" = EXCLUDED."destination_serviceItems_serviceParty_name"
--,"destination_serviceItems_serviceParty_type" = EXCLUDED."destination_serviceItems_serviceParty_type"
,"destination_serviceItems_serviceRevenue_exchangeRate" = EXCLUDED."destination_serviceItems_serviceRevenue_exchangeRate"
,"destination_serviceItems_serviceRevenue_foreignCurrencyAmount" = EXCLUDED."destination_serviceItems_serviceRevenue_foreignCurrencyAmount"
,"destination_serviceItems_serviceRevenue_invoiceNumber" = EXCLUDED."destination_serviceItems_serviceRevenue_invoiceNumber"
,"destination_serviceItems_serviceRevenue_localCurrencyAmount" = EXCLUDED."destination_serviceItems_serviceRevenue_localCurrencyAmount"
,"destination_serviceItems_serviceRevenue_numberOfUnits" = EXCLUDED."destination_serviceItems_serviceRevenue_numberOfUnits"
,"destination_serviceItems_serviceRevenue_rateCurrencyCode" = EXCLUDED."destination_serviceItems_serviceRevenue_rateCurrencyCode"
,"destination_serviceItems_serviceRevenue_ratePerUnit" = EXCLUDED."destination_serviceItems_serviceRevenue_ratePerUnit"
--,"destination_serviceItems_serviceRevenue_ratePerUnitConverted" = EXCLUDED."destination_serviceItems_serviceRevenue_ratePerUnitConverted"
--,"destination_serviceItems_serviceRevenue_rateUnitType" = EXCLUDED."destination_serviceItems_serviceRevenue_rateUnitType"
,"destination_serviceItems_serviceTypeEnum" = EXCLUDED."destination_serviceItems_serviceTypeEnum"
,"s_id" = EXCLUDED."s_id"
*/
$$;

alter procedure prod.history_upsert_shipments_destination() owner to "Postgresadmin";

create function prod.get_frequently_used_values_loadtype(p_tenant_id character, p_shipper_id character,
                                                         p_consignee_id character, p_amount_of_shipments integer,
                                                         p_origin_port_location_id integer,
                                                         p_destination_port_location_id integer,
                                                         p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freight_loadTerm", ', ') as "value"
from (select "mainFreight_freight_loadTerm"
      FROM prod.shipments sh
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_loadtype(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_packagetype(p_tenant_id character, p_shipper_id character,
                                                            p_consignee_id character, p_amount_of_shipments integer,
                                                            p_origin_port_location_id integer,
                                                            p_destination_port_location_id integer,
                                                            p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freightPieces_freightPieceType", ', ') as "value"
from (select f."mainFreight_freightPieces_freightPieceType"
      FROM prod.shipments sh
               inner join prod.shipments_mainfreight f
                          on sh.id = f.shipment_id
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_packagetype(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create function prod.get_frequently_used_values_commoditytype(p_tenant_id character, p_shipper_id character,
                                                              p_consignee_id character, p_amount_of_shipments integer,
                                                              p_origin_port_location_id integer,
                                                              p_destination_port_location_id integer,
                                                              p_import_export character, p_freight_type character)
    returns TABLE
            (
                value character
            )
    language sql
as
$$
SELECT string_agg(distinct "mainFreight_freightPieces_commodityType", ', ') as "value"
from (select f."mainFreight_freightPieces_commodityType"
      FROM prod.shipments sh
               inner join prod.shipments_mainfreight f
                          on sh.id = f.shipment_id
      where "tenantId" = p_tenant_id
        and "portOfLoading_location_id" = p_origin_port_location_id
        and "portOfDischarge_location_id" = p_destination_port_location_id
        and trim(shipper_id) = p_shipper_id
        and trim(consignee_id) = p_consignee_id
        and "importExport" = p_import_export
        and "mode" = p_freight_type
      order by "creationDateErp" desc
      limit p_amount_of_shipments) as A

$$;

alter function prod.get_frequently_used_values_commoditytype(char, char, char, integer, integer, integer, char, char) owner to "Postgresadmin";

create procedure prod.history_create_routes()
    language sql
as
$$
    CREATE TABLE prod.routes
    (
        "currency"                        TEXT,
        "customer_id"                     TEXT,
        "customer_type"                   TEXT,
        "importExport"                    TEXT,
        "isFreight"                       BOOLEAN,
        "last_date"                       TIMESTAMP,
        "mode"                            TEXT,
        "number_of_shipments_last150days" INTEGER,
        "portOfDischarge_location_id"     INTEGER,
        "portOfLoading_location_id"       INTEGER,
        "route_id"                        SERIAL,
        "second_party_id"                 TEXT,
        "tenantId"                        TEXT,
        "totalCost"                       DOUBLE PRECISION,
        "totalRevenue"                    DOUBLE PRECISION
    )

    $$;

alter procedure prod.history_create_routes() owner to "Postgresadmin";

create procedure prod.history_create_shipments()
    language sql
as
$$
    CREATE TABLE prod.shipments
    (
        "calculatedVolume"                               DOUBLE PRECISION,
        "calculatedVolumeConverted"                      DOUBLE PRECISION,
        "calculatedVolumeUnits"                          TEXT,
--"calculatedWeight" DOUBLE PRECISION,
--"calculatedWeightConverted" DOUBLE PRECISION,
        "calculatedWeightUnits"                          TEXT,
--"chargeableVolume" DOUBLE PRECISION,
--"chargeableVolumeConverted" DOUBLE PRECISION,
--"chargeableVolumeUnits" TEXT,
        "chargeableWeight"                               DOUBLE PRECISION,
        "chargeableWeightConverted"                      DOUBLE PRECISION,
        "chargeableWeightUnits"                          TEXT,
        "consigneeAddress_location_id"                   INTEGER,
        "consignee_contact_fax"                          TEXT,
        "consignee_contact_givenName"                    TEXT,
        "consignee_contact_lastName"                     TEXT,
        "consignee_contact_phone"                        TEXT,
        "consignee_erpId"                                TEXT,
        "consignee_id"                                   TEXT,
        "consignee_name"                                 TEXT,
        "consolLotUNID"                                  TEXT,
        "consolNumber"                                   TEXT,
        "creationDateErp"                                TIMESTAMP,
        "creationDateTime"                               TIMESTAMP,
--"creationTime" TIMESTAMP,
        "customer_id"                                    TEXT,
        "customer_type"                                  TEXT,
        "deliveryAddress_location_id"                    INTEGER,
        "erpId"                                          TEXT,
--"executionDate" TIMESTAMP,
        "globalShipmentId"                               TEXT,
        "hazardClass"                                    TEXT,
        "hazardous"                                      BOOLEAN,
        "houseDocumentNumber"                            TEXT,
        "id"                                             TEXT PRIMARY KEY,
        "importExport"                                   TEXT,
        "incoTerms"                                      TEXT,
        "isAllIn"                                        BOOLEAN,
        "isFreight"                                      BOOLEAN DEFAULT TRUE,
        "jobNumber"                                      TEXT,
--"lastModifiedTime" TIMESTAMP,
        "mainFreight_freight_amountOfInsurance"          DOUBLE PRECISION,
        "mainFreight_freight_arriveTime"                 TIMESTAMP,
        "mainFreight_freight_carrierCode"                TEXT,
        "mainFreight_freight_carrierErpId"               TEXT,
        "mainFreight_freight_carrierIATACode"            TEXT,
        "mainFreight_freight_carrierId"                  TEXT,
        "mainFreight_freight_carrierName"                TEXT,
        "mainFreight_freight_collectCharge"              DOUBLE PRECISION,
        "mainFreight_freight_collectChargeCurrency"      TEXT,
        "mainFreight_freight_collectedTax"               DOUBLE PRECISION,
        "mainFreight_freight_convertedAmountOfInsurance" DOUBLE PRECISION,
        "mainFreight_freight_convertedCollectCharge"     DOUBLE PRECISION,
        "mainFreight_freight_convertedCollectedTax"      DOUBLE PRECISION,
        "mainFreight_freight_convertedManifestVolume"    DOUBLE PRECISION,
        "mainFreight_freight_convertedManifestWeight"    DOUBLE PRECISION,
        "mainFreight_freight_convertedPrepaidCharge"     DOUBLE PRECISION,
        "mainFreight_freight_convertedPrepaidTax"        DOUBLE PRECISION,
        "mainFreight_freight_convertedTotalTax"          DOUBLE PRECISION,
        "mainFreight_freight_departTime"                 TIMESTAMP,
        "mainFreight_freight_durationInHours"            DOUBLE PRECISION,
        "mainFreight_freight_feederVesselArvDate"        TIMESTAMP,
        "mainFreight_freight_feederVesselArvTime"        TIMESTAMP,
        "mainFreight_freight_feederVesselCallSign"       TEXT,
        "mainFreight_freight_feederVesselCode"           TEXT,
        "mainFreight_freight_feederVesselDepartDate"     TIMESTAMP,
        "mainFreight_freight_feederVesselDepartTime"     TIMESTAMP,
        "mainFreight_freight_feederVesselName"           TEXT,
        "mainFreight_freight_feederVesselVoyage"         TEXT,
        "mainFreight_freight_flightNumber"               TEXT,
        "mainFreight_freight_flightTime"                 TIMESTAMP,
        "mainFreight_freight_freightChargeCurrency"      TEXT,
        "mainFreight_freight_freightChargePerUnit"       DOUBLE PRECISION,
        "mainFreight_freight_freightChargeUnit"          TEXT,
        "mainFreight_freight_insuranceCurrency"          TEXT,
        "mainFreight_freight_loadTerm"                   TEXT,
        "mainFreight_freight_manifestDescription"        TEXT,
        "mainFreight_freight_manifestVolume"             DOUBLE PRECISION,
        "mainFreight_freight_manifestVolumeUnits"        TEXT,
        "mainFreight_freight_manifestWeight"             DOUBLE PRECISION,
        "mainFreight_freight_manifestWeightUnits"        TEXT,
        "mainFreight_freight_mode"                       TEXT,
        "mainFreight_freight_motherVesselArvDateTime"    TIMESTAMP,
        "mainFreight_freight_motherVesselCallSign"       TEXT,
        "mainFreight_freight_motherVesselCode"           TEXT,
        "mainFreight_freight_motherVesselDepartDateTime" TIMESTAMP,
        "mainFreight_freight_motherVesselFlag"           TEXT,
        "mainFreight_freight_motherVesselName"           TEXT,
        "mainFreight_freight_motherVoyage"               TEXT,
        "mainFreight_freight_prepaidCharge"              DOUBLE PRECISION,
        "mainFreight_freight_prepaidTax"                 DOUBLE PRECISION,
        "mainFreight_freight_prepaidTaxCurrency"         TEXT,
        "masterDocumentNumber"                           TEXT,
        "mode"                                           TEXT,
        "notifyAddress_location_id"                      INTEGER,
        "notify_contact_fax"                             TEXT,
        "notify_contact_givenName"                       TEXT,
        "notify_contact_lastName"                        TEXT,
        "notify_contact_phone"                           TEXT,
        "notify_erpId"                                   TEXT,
        "notify_id"                                      TEXT,
        "notify_name"                                    TEXT,
        "pickupAddress_location_id"                      INTEGER,
        "portOfDischarge_codeIATA"                       TEXT,
        "portOfDischarge_eta"                            TIMESTAMP,
        "portOfDischarge_location_id"                    INTEGER,
        "portOfLoading_codeIATA"                         TEXT,
        "portOfLoading_etd"                              TIMESTAMP,
        "portOfLoading_location_id"                      INTEGER,
        "record_id"                                      INTEGER,
        "second_party_id"                                TEXT,
        "shipperAddress_location_id"                     INTEGER,
        "shipper_contact_fax"                            TEXT,
        "shipper_contact_givenName"                      TEXT,
        "shipper_contact_lastName"                       TEXT,
        "shipper_contact_phone"                          TEXT,
        "shipper_erpId"                                  TEXT,
        "shipper_id"                                     TEXT,
        "shipper_name"                                   TEXT,
        "s_id"                                           BIGINT,
        "status"                                         TEXT,
        "tenantId"                                       TEXT,
        "totalCost"                                      DOUBLE PRECISION,
        "totalCurrency"                                  TEXT,
        "totalDestinationCost"                           DOUBLE PRECISION,
        "totalDestinationRevenue"                        DOUBLE PRECISION,
        "totalOriginCost"                                DOUBLE PRECISION,
        "totalOriginRevenue"                             DOUBLE PRECISION,
        "totalPieces"                                    INTEGER,
        "totalProfit"                                    DOUBLE PRECISION,
        "totalRevenue"                                   DOUBLE PRECISION,
        "totalVolume"                                    DOUBLE PRECISION,
        "totalVolumeConverted"                           DOUBLE PRECISION,
        "totalVolumeUnits"                               TEXT,
        "totalWeight"                                    DOUBLE PRECISION,
        "totalWeightConverted"                           DOUBLE PRECISION,
        "totalWeightUnits"                               TEXT,
        "type"                                           TEXT
    )
    $$;

alter procedure prod.history_create_shipments() owner to "Postgresadmin";

create procedure prod.history_create_shipments_destination()
    language sql
as
$$
    CREATE TABLE prod.shipments_destination
    (
        "concat_id"                                                     TEXT PRIMARY KEY,
        "creationDateTime"                                              TIMESTAMP,
        "destination_serviceItems_chargeCode"                           TEXT,
        "destination_serviceItems_chargeDescription"                    TEXT,
        "destination_serviceItems_quantityUnit"                         TEXT,
        "destination_serviceItems_serviceCost_exchangeRate"             DOUBLE PRECISION,
        "destination_serviceItems_serviceCost_foreignCurrencyAmount"    DOUBLE PRECISION,
        "destination_serviceItems_serviceCost_invoiceNumber"            TEXT,
        "destination_serviceItems_serviceCost_localCurrencyAmount"      DOUBLE PRECISION,
        "destination_serviceItems_serviceCost_numberOfUnits"            DOUBLE PRECISION,
        "destination_serviceItems_serviceCost_rateCurrencyCode"         TEXT,
        "destination_serviceItems_serviceCost_ratePerUnit"              DOUBLE PRECISION,
        "destination_serviceItems_serviceCost_ratePerUnitConverted"     DOUBLE PRECISION,
        "destination_serviceItems_serviceCost_rateUnitType"             TEXT,
--"destination_serviceItems_serviceParty_contact_email" TEXT,
--"destination_serviceItems_serviceParty_contact_fax" TEXT,
--"destination_serviceItems_serviceParty_contact_givenName" TEXT,
--"destination_serviceItems_serviceParty_contact_lastName" TEXT,
--"destination_serviceItems_serviceParty_contact_mobile" TEXT,
--"destination_serviceItems_serviceParty_contact_phone" TEXT,
        "destination_serviceItems_serviceParty_erpId"                   TEXT,
        "destination_serviceItems_serviceParty_id"                      TEXT,
--"destination_serviceItems_serviceParty_location_id" INTEGER,
        "destination_serviceItems_serviceParty_name"                    TEXT,
        "destination_serviceItems_serviceParty_type"                    TEXT,
        "destination_serviceItems_serviceRevenue_exchangeRate"          DOUBLE PRECISION,
        "destination_serviceItems_serviceRevenue_foreignCurrencyAmount" DOUBLE PRECISION,
        "destination_serviceItems_serviceRevenue_invoiceNumber"         TEXT,
        "destination_serviceItems_serviceRevenue_localCurrencyAmount"   DOUBLE PRECISION,
        "destination_serviceItems_serviceRevenue_numberOfUnits"         DOUBLE PRECISION,
        "destination_serviceItems_serviceRevenue_rateCurrencyCode"      TEXT,
        "destination_serviceItems_serviceRevenue_ratePerUnit"           DOUBLE PRECISION,
        "destination_serviceItems_serviceRevenue_ratePerUnitConverted"  DOUBLE PRECISION,
        "destination_serviceItems_serviceRevenue_rateUnitType"          TEXT,
        "destination_serviceItems_serviceTypeEnum"                      TEXT,
        "s_id"                                                          BIGINT,
        "shipment_id"                                                   TEXT
    )
    $$;

alter procedure prod.history_create_shipments_destination() owner to "Postgresadmin";

create procedure prod.history_create_shipments_mainfreight()
    language sql
as
$$
    CREATE TABLE prod.shipments_mainfreight
    (
        "creationDateTime"                               TIMESTAMP,
        "mainFreight_freightPieces_commodityDescription" TEXT,
        "mainFreight_freightPieces_commodityType"        TEXT,
--"mainFreight_freightPieces_depth" DOUBLE PRECISION,
--"mainFreight_freightPieces_depthConverted" DOUBLE PRECISION,
        "mainFreight_freightPieces_freightPieceId"       INTEGER,
        "mainFreight_freightPieces_freightPieceType"     TEXT,
        "mainFreight_freightPieces_hazardClass"          TEXT,
        "mainFreight_freightPieces_hazardous"            BOOLEAN NOT NULL DEFAULT FALSE,
        "mainFreight_freightPieces_height"               DOUBLE PRECISION,
        "mainFreight_freightPieces_heightConverted"      DOUBLE PRECISION,
        "mainFreight_freightPieces_length"               DOUBLE PRECISION,
        "mainFreight_freightPieces_measurementUnits"     TEXT,
        "mainFreight_freightPieces_pieceVolume"          DOUBLE PRECISION,
        "mainFreight_freightPieces_pieceVolumeConverted" DOUBLE PRECISION,
        "mainFreight_freightPieces_pieceVolumeUnits"     TEXT,
        "mainFreight_freightPieces_pieceWeight"          DOUBLE PRECISION,
        "mainFreight_freightPieces_pieceWeightConverted" DOUBLE PRECISION,
        "mainFreight_freightPieces_pieceWeightUnits"     TEXT,
        "mainFreight_freightPieces_quantity"             DOUBLE PRECISION,
        "mainFreight_freightPieces_subType"              TEXT,
        "mainFreight_freightPieces_width"                DOUBLE PRECISION,
        "mainFreight_freightPieces_widthConverted"       DOUBLE PRECISION,
        "s_id"                                           BIGINT,
        "shipment_id"                                    TEXT,
        CONSTRAINT shipments_mainfreight_pkey PRIMARY KEY ("shipment_id", "mainFreight_freightPieces_freightPieceId")
    )

    $$;

alter procedure prod.history_create_shipments_mainfreight() owner to "Postgresadmin";

create procedure prod.history_create_shipments_origin()
    language sql
as
$$
    CREATE TABLE prod.shipments_origin
    (
        "concat_id"                                                TEXT PRIMARY KEY,
        "creationDateTime"                                         TIMESTAMP,
        "origin_serviceItems_chargeCode"                           TEXT,
        "origin_serviceItems_chargeDescription"                    TEXT,
        "origin_serviceItems_quantityUnit"                         TEXT,
        "origin_serviceItems_serviceCost_exchangeRate"             DOUBLE PRECISION,
        "origin_serviceItems_serviceCost_foreignCurrencyAmount"    DOUBLE PRECISION,
        "origin_serviceItems_serviceCost_invoiceNumber"            TEXT,
        "origin_serviceItems_serviceCost_localCurrencyAmount"      DOUBLE PRECISION,
        "origin_serviceItems_serviceCost_numberOfUnits"            DOUBLE PRECISION,
        "origin_serviceItems_serviceCost_rateCurrencyCode"         TEXT,
        "origin_serviceItems_serviceCost_ratePerUnit"              DOUBLE PRECISION,
        "origin_serviceItems_serviceCost_ratePerUnitConverted"     DOUBLE PRECISION,
        "origin_serviceItems_serviceCost_rateUnitType"             TEXT,
--"origin_serviceItems_serviceParty_contact_givenName" TEXT,
--"origin_serviceItems_serviceParty_contact_lastName" TEXT,
--"origin_serviceItems_serviceParty_contact_mobile" TEXT,
        "origin_serviceItems_serviceParty_erpId"                   TEXT,
        "origin_serviceItems_serviceParty_id"                      TEXT,
--"origin_serviceItems_serviceParty_location_id" INTEGER,
        "origin_serviceItems_serviceParty_name"                    TEXT,
        "origin_serviceItems_serviceParty_type"                    TEXT,
        "origin_serviceItems_serviceRevenue_exchangeRate"          DOUBLE PRECISION,
        "origin_serviceItems_serviceRevenue_foreignCurrencyAmount" DOUBLE PRECISION,
        "origin_serviceItems_serviceRevenue_invoiceNumber"         TEXT,
        "origin_serviceItems_serviceRevenue_localCurrencyAmount"   DOUBLE PRECISION,
        "origin_serviceItems_serviceRevenue_numberOfUnits"         DOUBLE PRECISION,
        "origin_serviceItems_serviceRevenue_rateCurrencyCode"      TEXT,
        "origin_serviceItems_serviceRevenue_ratePerUnit"           DOUBLE PRECISION,
        "origin_serviceItems_serviceRevenue_ratePerUnitConverted"  DOUBLE PRECISION,
        "origin_serviceItems_serviceRevenue_rateUnitType"          TEXT,
        "origin_serviceItems_serviceTypeEnum"                      TEXT,
        "s_id"                                                     BIGINT,
        "shipment_id"                                              TEXT
    )

    $$;

alter procedure prod.history_create_shipments_origin() owner to "Postgresadmin";

create procedure prod.history_create_tables()
    language sql
as
$$
CALL prod.history_create_routes();
CALL prod.history_create_shipments();
CALL prod.history_create_shipments_destination();
CALL prod.history_create_shipments_locations();
CALL prod.history_create_shipments_mainfreight();
CALL prod.history_create_shipments_origin();

$$;

alter procedure prod.history_create_tables() owner to "Postgresadmin";

create function prod.get_potential_legs(p_tenant_id character, p_pickup_address_location_id integer,
                                        p_delivery_address_location_id integer, p_mode character, p_loadterm character,
                                        p_incoterms character)
    returns TABLE
            (
                "portOfLoading_location_id"   integer,
                "portOfLoading_type"          character,
                "portOfLoading_city"          character,
                "portOfLoading_state"         character,
                "portOfLoading_country"       character,
                "portOfLoading_code"          character,
                "portOfLoading_name"          character,
                "portOfLoading_portType"      character,
                "portOfDischarge_location_id" integer,
                "portOfDischarge_type"        character,
                "portOfDischarge_city"        character,
                "portOfDischarge_state"       character,
                "portOfDischarge_country"     character,
                "portOfDischarge_code"        character,
                "portOfDischarge_name"        character,
                "portOfDischarge_portType"    character,
                "carrierName"                 character,
                "carrierCode"                 character,
                "carrierId"                   character,
                "isCharged"                   boolean
            )
    language sql
as
$$
SELECT distinct pol."location_id"                 as "portOfLoading_location_id",
                pol."location_type"               as "portOfLoading_type",-- "PORT" vs "DOOR"
                pol."location_city"               as "portOfLoading_city",
                pol."location_stateCode"          as "portOfLoading_state",
                pol."location_countryCode"        as "portOfLoading_country",
                pol."location_portCode"           as "portOfLoading_code",
                pol."location_portName"           as "portOfLoading_name",
                pol."location_portType"           as "portOfLoading_portType", --'Airport' vs 'Seaport'

                pod.location_id                   as "portOfDischarge_location_id",
                pod."location_type"               as "portOfDischarge_type", --"PORT" vs "DOOR"
                pod."location_city"               as "portOfDischarge_city",
                pod."location_stateCode"          as "portOfDischarge_state",
                pod."location_countryCode"        as "portOfDischarge_country",
                pod."location_portCode"           as "portOfDischarge_code",
                pod."location_portName"           as "portOfDischarge_name",
                pol."location_portType"           as "portOfDischarge_portType",

                "mainFreight_freight_carrierName" as "carrierName",
                "mainFreight_freight_carrierCode" as "carrierCode",
                "mainFreight_freight_carrierId"   as "carrierId",

                true                              as "isCharged" -- logic is in python (based on incoterms)

FROM prod.shipments sh
         left join prod.shipments_locations pol
                   on pol.location_id = sh."portOfLoading_location_id"
         left join prod.shipments_locations pod
                   on pod.location_id = sh."portOfDischarge_location_id"

where "tenantId" = p_tenant_id
  and "mode" = p_mode
  and "mainFreight_freight_loadTerm" = p_loadterm
  and "pickupAddress_location_id" = p_pickup_address_location_id
  and "deliveryAddress_location_id" = p_delivery_address_location_id
limit 10
$$;

alter function prod.get_potential_legs(char, integer, integer, char, char, char) owner to "Postgresadmin";

create procedure prod.history_etl_routes()
    language sql
as
$$
INSERT INTO prod.routes("last_date",
                        "currency", "customer_id", "customer_type", "importExport", "isFreight", "mode",
                        "number_of_shipments_last150days",
                        "portOfDischarge_location_id", "portOfLoading_location_id", "second_party_id", "tenantId",
                        "totalCost", "totalRevenue", "totalRevenueUSD")
select MAX("creationDateErp"),
       max("totalCurrency")   as "currency",
       "customer_id",
       "customer_type",
       "importExport",
       "isFreight",
       "mode",
       count(*)               as "number_of_shipments_last150days",
       "portOfDischarge_location_id",
       "portOfLoading_location_id",
       "second_party_id",
       "tenantId",
       sum("totalCost")       as "totalCost",
       sum("totalRevenue")    as "totalRevenue"
        ,
       sum("totalRevenueUSD") AS "totalRevenueUSD"

FROM prod.shipments
--where cast("creationDateErp" as timestamp) >= (Now() - (150 * interval '1' day))
group by "tenantId", "customer_id", "second_party_id", "customer_type", "isFreight", "mode", "importExport",
         "portOfDischarge_location_id", "portOfLoading_location_id";

$$;

alter procedure prod.history_etl_routes() owner to "Postgresadmin";

create procedure prod.log_trace(p_api_name text, p_trace_id text, p_status integer, p_message text, p_request_json text,
                                p_response_json text)
    language sql
as
$$
INSERT INTO prod.traces ("TraceDateTime", "APIname", "Trace-Id", "Status", "Message", "RequestJSON", "ResponseJSON")
values (NOW(), p_api_name, p_trace_id, p_status, p_message, p_request_json, p_response_json);

$$;

alter procedure prod.log_trace(text, text, integer, text, text, text) owner to "Postgresadmin";

create procedure prod.log_trace(p_api_name text, p_trace_id text, p_status integer, p_message text, p_request_json text,
                                p_response_json text, p_ip text)
    language sql
as
$$
INSERT INTO prod.traces ("TraceDateTime", "APIname", "Trace-Id", "Status", "Message", "RequestJSON", "ResponseJSON",
                         "IP")
values (NOW(), p_api_name, p_trace_id, p_status, p_message, p_request_json, p_response_json, p_ip);

$$;

alter procedure prod.log_trace(text, text, integer, text, text, text, text) owner to "Postgresadmin";

create function prod.check_charges("p_portLoading" integer, "P_portDischarge" integer, p_mode text, "p_loadTerm" text,
                                   "p_subType" text)
    returns TABLE
            (
                "MIN" double precision,
                "MAX" double precision,
                "AVG" double precision
            )
    language plpgsql
as
$$
BEGIN
    RETURN QUERY
        WITH cte AS (
            SELECT s.s_id,
                   s."portOfLoading_location_id",
                   s."portOfDischarge_location_id",
                   s.mode,
                   s."mainFreight_freight_loadTerm",
                   m."mainFreight_freightPieces_subType"
            FROM prod.shipments AS s
                     LEFT JOIN prod.shipments_mainfreight AS m USING (s_id)
            --WHERE s_id = 10744348
        )

        SELECT
--        cte."portOfLoading_location_id",
-- --        cte."portOfDischarge_location_id",
-- --        cte.mode,
-- --        cte."mainFreight_freight_loadTerm",
-- --        cte."mainFreight_freightPieces_subType",
-- --        o."origin_serviceItems_chargeCode",
-- --        o."origin_serviceItems_chargeDescription",
-- --        o."origin_serviceItems_serviceTypeEnum",
min(o."origin_serviceItems_serviceCost_ratePerUnit") AS "MIN",
max(o."origin_serviceItems_serviceCost_ratePerUnit") AS "MAX",
avg(o."origin_serviceItems_serviceCost_ratePerUnit") AS "AVG"
        FROM cte
                 LEFT JOIN prod.shipments_origin AS o USING (s_id)
             --LEFT JOIN prod.shipments_destination AS d USING (s_id)

        WHERE cte."portOfLoading_location_id" = "p_portLoading"
          AND cte."portOfDischarge_location_id" = "P_portDischarge"
          AND cte.mode = "p_mode"
          AND cte."mainFreight_freight_loadTerm" = "p_loadTerm"
          AND cte."mainFreight_freightPieces_subType" = "p_subType"
          AND o."origin_serviceItems_serviceTypeEnum" = 'MAIN_FREIGHT'
        GROUP BY cte."portOfLoading_location_id",
                 cte."portOfDischarge_location_id",
                 cte.mode,
                 cte."mainFreight_freight_loadTerm",
                 cte."mainFreight_freightPieces_subType",
                 o."origin_serviceItems_chargeCode",
                 o."origin_serviceItems_chargeDescription",
                 o."origin_serviceItems_serviceTypeEnum";

END ;
$$;

alter function prod.check_charges(integer, integer, text, text, text) owner to "Postgresadmin";

create function prod.check_charges("p_portLoading" integer, "P_portDischarge" integer, p_mode text, "p_loadTerm" text,
                                   "p_subType" text, "p_chargeCode" text, p_currency text)
    returns TABLE
            (
                "MIN" double precision,
                "MAX" double precision,
                "AVG" double precision,
                cnt   integer
            )
    language plpgsql
as
$$
BEGIN
    RETURN QUERY
        WITH cte AS (
            SELECT s.s_id,
                   s."portOfLoading_location_id",
                   s."portOfDischarge_location_id",
                   s.mode,
                   s."mainFreight_freight_loadTerm",
                   m."mainFreight_freightPieces_subType"
            FROM prod.shipments AS s
                     LEFT JOIN prod.shipments_mainfreight AS m USING (s_id)
            --WHERE s_id = 10744348
        )

        SELECT
--     cte."portOfLoading_location_id",
--        cte."portOfDischarge_location_id",
--        cte.mode,
--        cte."mainFreight_freight_loadTerm",
--        cte."mainFreight_freightPieces_subType",
--."origin_serviceItems_chargeCode"                   AS "chargeCode",
--        o."origin_serviceItems_serviceTypeEnum",
min(o."origin_serviceItems_serviceCost_ratePerUnit") AS "MIN",
max(o."origin_serviceItems_serviceCost_ratePerUnit") AS "MAX",
avg(o."origin_serviceItems_serviceCost_ratePerUnit") AS "AVG",
cast(COUNT(*) AS INTEGER)                            AS "cnt"
        FROM cte
                 LEFT JOIN prod.shipments_origin AS o USING (s_id)
             --LEFT JOIN prod.shipments_destination AS d USING (s_id)

        WHERE cte."portOfLoading_location_id" = "p_portLoading"
          AND cte."portOfDischarge_location_id" = "P_portDischarge"
          AND cte.mode = "p_mode"
          AND cte."mainFreight_freight_loadTerm" = "p_loadTerm"
          AND cte."mainFreight_freightPieces_subType" = "p_subType"
          AND o."origin_serviceItems_serviceCost_rateCurrencyCode" = p_currency
          AND o."origin_serviceItems_chargeCode" = "p_chargeCode"
          --AND o."origin_serviceItems_serviceTypeEnum" = 'MAIN_FREIGHT'
        GROUP BY cte."portOfLoading_location_id",
                 cte."portOfDischarge_location_id",
                 cte.mode,
                 cte."mainFreight_freight_loadTerm",
                 cte."mainFreight_freightPieces_subType",
                 o."origin_serviceItems_chargeCode",
                 --o."origin_serviceItems_serviceTypeEnum",
                 o."origin_serviceItems_serviceCost_rateCurrencyCode";

END ;
$$;

alter function prod.check_charges(integer, integer, text, text, text, text, text) owner to "Postgresadmin";

create function prod.get_best_routes_real(p_tenant_id text, p_pickup_address_id integer, p_delivery_address_id integer,
                                          p_mode text, p_loadterm text, p_incoterms text, p_port_of_loading_id integer,
                                          p_port_of_discharge_id integer, p_importexport text, p_carrier_ids text,
                                          p_weight double precision, p_hazard_class text, p_service_type text,
                                          p_commodity_type text)
    returns TABLE
            (
                call_id                integer,
                s_id                   text,
                "chargeCode"           text,
                "serviceTypeEnum"      text,
                "isSelected"           boolean,
                "durationInHours"      double precision,
                "sendSpot"             boolean,
                location_type          text,
                location_id            integer,
                location_city          text,
                "location_stateCode"   text,
                "location_countryCode" text,
                location_name          text,
                location_address       text,
                "location_postalCode"  text,
                "location_portCode"    text,
                "location_portName"    text,
                "location_portType"    text,
                "carrierId"            text,
                carrier_key            text,
                "carrierErpId"         text,
                "carrierName"          text,
                "carrierType"          text,
                "numberOfUnits"        double precision,
                "ratePerUnit"          double precision,
                "rateUnitType"         text,
                "rateCurrencyCode"     text,
                "ratePerUnitConverted" double precision,
                shipment_id            text,
                local_currency         text,
                "existsInHistory"      boolean
            )
    language plpgsql
as
$$
--select * from prod.get_best_routes('005237f9-6779-4c68-89d6-d0800559d4f4', 656992,31539,'SEA','FCL','CFR',29068,7784,'Export','aa0ce6c7-aaf7-4a49-9d0f-a076b9155c21',5577,'','','General cargo')

DECLARE
    v_from    INTEGER;
    v_to      INTEGER;
    v_call_id INTEGER;

BEGIN

    DROP TABLE IF EXISTS tmp_shipments;

    /*    INSERT INTO prod.log_best_routes ("LogDateTime", "call")
    VALUES (NOW(), concat('select * from prod.get_best_routes(''', p_tenant_id, ''', ',
                          p_pickup_address_id, ',', p_delivery_address_id, ',''', p_mode, ''',''', p_loadterm, ''',''',
                          p_incoterms,
                          ''',', p_port_of_loading_id, ',', p_port_of_discharge_id, ',''', p_importexport, ''',''',
                          p_carrier_ids,
                          ''',', p_weight, ',''', p_hazard_class, ''',''', p_service_type, ''',''', p_commodity_type,
                          ''')'));

    SELECT INTO v_call_id currval(pg_get_serial_sequence('prod.log_best_routes', 'call_id'));
*/
--get weight tier
    SELECT INTO v_from, v_to ti."from",
                             ti."to"
    FROM mrr.freight_weight_tiers ti
    WHERE "mode" = p_mode
      AND "loadterm" = p_loadterm
      AND p_weight BETWEEN "from" AND "to";

    --drop table if exists prod.tmp_shipments;

--select shipments matching the parameters
    CREATE TEMP TABLE IF NOT EXISTS tmp_shipments AS
        (SELECT sh.*
         FROM prod.shipments sh
         WHERE "tenantId" = p_tenant_id
           AND "isFreight" = TRUE
           AND sh."mode" = p_mode
           AND coalesce("mainFreight_freight_loadTerm", 'LCL') = p_loadterm
           AND sh."pickupAddress_location_id" = p_pickup_address_id
           AND sh."deliveryAddress_location_id" = p_delivery_address_id
           AND sh."portOfLoading_location_id" = p_port_of_loading_id
           AND sh."portOfDischarge_location_id" = p_port_of_discharge_id
           --and p_carrier_ids LIKE '%' || "mainFreight_freight_carrierId" || '%'
           --	and sh."incoTerms" = p_incoterms
           --	and sh."serviceType" = p_service_type -- Door_to_Port, etc.
           --	and "commodityType" = p_commodityType
           -- and month("erpDate?") = month(Now())  -- add later - similar period - need to figure out what is similar period (holiday season, etc.)

           --and (p_hazard_class == '' or sh."hazardClass" == p_hazard_class) --add after ETL? - there are no hazardous shipments in history
           AND ((sh."mode" = 'AIR' AND "totalWeight" BETWEEN v_from AND v_to)
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'FCL'
                    --and "totalNumberOfUnits" between v_from and v_to --need to add this parameter!!
                    )
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'LCL'))
            --add ROAD mode later
            --what about non-freight mode?
        )
            ORDER BY sh."totalCost" ASC, sh."totalProfit" DESC-- "creationDateErp" desc
            LIMIT 1;
    --add freightPieceType for later versions (Damco use only pallets)

    /*INSERT INTO prod.log_best_routes_responses (call_id, s_id, "chargeCode", "isSelected",
                                                "durationInHours", "sendSpot", location_type, location_id,
                                                location_city, "location_stateCode",
                                                "location_countryCode", location_name, location_address,
                                                "location_postalCode",
                                                "location_portCode", "location_portName", "location_portType",
                                                "carrierId", carrier_key,
                                                "carrierErpId", "carrierName", "carrierType", "numberOfUnits",
                                                "ratePerUnit",
                                                "rateUnitType", "rateCurrencyCode", "ratePerUnitConverted", shipment_id)
        (*/
    return query
--origin charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(o."origin_serviceItems_chargeCode" as text)         as "chargeCode",
                        cast(o."origin_serviceItems_serviceTypeEnum" AS TEXT)    AS "serviceTypeEnum",
                        TRUE                                                     AS "isSelected",
            /*cast(case when trim(o."origin_serviceItems_chargeDescription") = 'Airfreight'
                    then DATE_PART('day', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp)) * 24 + DATE_PART('hour', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp) )
                    else null
                    end as double precision) as "durationInHours",*/
                        cast(0 AS DOUBLE PRECISION)                              AS "durationInHours",
                        cast(FALSE AS BOOLEAN)                                   AS "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(o."origin_serviceItems_serviceParty_id" AS TEXT)    AS "carrierId",
                        cast(NULL AS TEXT)                                       AS "carrier_key", --see python
                        cast(o."origin_serviceItems_serviceParty_erpId" AS TEXT) AS "carrierErpId", --change to "erpId"
                        cast(o."origin_serviceItems_serviceParty_name" AS TEXT)  AS "carrierName",
                        --cast(o."origin_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT)                 AS "carrierType",

                        CASE
                            WHEN o."origin_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                                    COALESCE(o."origin_serviceItems_serviceRevenue_numberOfUnits", 0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
                            END                                                  AS "numberOfUnits",
                        CASE
                            WHEN o."origin_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                                    COALESCE(o."origin_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
                            END                                                  AS "ratePerUnit",
                        cast(o."origin_serviceItems_quantityUnit" AS TEXT)       AS "rateUnitType",
                        CASE
                            WHEN o."origin_serviceItems_serviceCost_rateCurrencyCode" IS NULL
                                THEN CAST(o."origin_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
                            ELSE cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
                            END                                                  AS "rateCurrencyCode",

                        --cast(o."origin_serviceItems_serviceCost_rateUnitType" as text) as "rateUnitType",

                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(o."origin_serviceItems_serviceRevenue_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION)                    AS "ratePerUnitConverted",
                        sh.id                                                    AS "shipment_id",
                        "totalCurrency"                                          as "local_currency",
                        cast(TRUE as boolean)                                    as "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_origin o
                            ON o.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = o."origin_serviceItems_chargeCode"
            /*left join mrr.charge_code_groups cc
                    on trim(cc.charge_code_group) = trim(o."origin_serviceItems_chargeCode")
                inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                    on inc.charge_code = cc.charge_code
                    and inc.incoterms = "incoterms"
                    and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfLoading_location_id"
             --on service_location.location_id = o."origin_serviceItems_serviceParty_location_id"

        UNION ALL

--destination charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(d."destination_serviceItems_chargeCode" as text)         as "chargeCode",
                        cast(d."destination_serviceItems_serviceTypeEnum" AS TEXT)    AS "serviceTypeEnum",
                        TRUE                                                          AS "isSelected",
                        cast(0 AS DOUBLE PRECISION)                                   AS "durationInHours",
                        cast(FALSE AS BOOLEAN)                                        AS "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(d."destination_serviceItems_serviceParty_id" AS TEXT)    AS "carrierId",
                        cast(NULL AS TEXT)                                            AS "carrier_key", --see python
                        cast(d."destination_serviceItems_serviceParty_erpId" AS TEXT) AS "carrierErpId", --change to "erpId"
                        cast(d."destination_serviceItems_serviceParty_name" AS TEXT)  AS "carrierName",
                        --cast(d."destination_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT)                      AS "carrierType",

                        CASE
                            WHEN d."destination_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                                    COALESCE(d."destination_serviceItems_serviceRevenue_numberOfUnits",
                                             0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(d."destination_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
                            END                                                       AS "numberOfUnits",
                        CASE
                            WHEN d."destination_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                                    COALESCE(d."destination_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(d."destination_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
                            END                                                       AS "ratePerUnit",
                        cast(d."destination_serviceItems_quantityUnit" AS TEXT)       AS "rateUnitType",
                        CASE
                            WHEN d."destination_serviceItems_serviceCost_rateCurrencyCode" IS NULL THEN CAST(
                                    d."destination_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
                            ELSE cast(d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
                            END                                                       AS "rateCurrencyCode",
                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(d."destination_serviceItems_serviceCost_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION)                         AS "ratePerUnitConverted",
                        sh.id                                                         AS "shipment_id",
                        "totalCurrency"                                               as "local_currency",
                        cast(TRUE as boolean)                                         as "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_destination d
                            ON d.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = d."destination_serviceItems_chargeCode"
                 LEFT JOIN prod.shipments_mainfreight f
                           ON f.s_id = sh.s_id
            /*left join mrr.charge_code_groups cc
                    on trim(cc.charge_code_group) = trim(d."destination_serviceItems_chargeCode")
                inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                    on inc.charge_code = cc.charge_code
                    and inc.incoterms = "incoterms"
                    and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfDischarge_location_id";

    /* RETURN QUERY
        SELECT *
        FROM prod.log_best_routes_responses r
        WHERE r."call_id" = v_call_id;*/

END;
$$;

alter function prod.get_best_routes_real(text, integer, integer, text, text, text, integer, integer, text, text, double precision, text, text, text) owner to "Postgresadmin";

create function prod.get_best_routes_new(p_tenant_id text, p_pickup_address_id integer, p_delivery_address_id integer,
                                         p_mode text, p_loadterm text, p_incoterms text, p_port_of_loading_id integer,
                                         p_port_of_discharge_id integer, p_importexport text, p_carrier_ids text,
                                         p_weight double precision, p_hazard_class text, p_service_type text,
                                         p_commodity_type text)
    returns TABLE
            (
                call_id                integer,
                s_id                   text,
                "chargeCode"           text,
                "serviceTypeEnum"      text,
                "isSelected"           boolean,
                "durationInHours"      double precision,
                "sendSpot"             boolean,
                location_type          text,
                location_id            integer,
                location_city          text,
                "location_stateCode"   text,
                "location_countryCode" text,
                location_name          text,
                location_address       text,
                "location_postalCode"  text,
                "location_portCode"    text,
                "location_portName"    text,
                "location_portType"    text,
                "carrierId"            text,
                carrier_key            text,
                "carrierErpId"         text,
                "carrierName"          text,
                "carrierType"          text,
                "numberOfUnits"        double precision,
                "ratePerUnit"          double precision,
                "rateUnitType"         text,
                "rateCurrencyCode"     text,
                "ratePerUnitConverted" double precision,
                shipment_id            text,
                local_currency         text,
                "existsInHistory"      boolean,
                "exchangeRate"         double precision
            )
    language plpgsql
as
$$
--select * from prod.get_best_routes('005237f9-6779-4c68-89d6-d0800559d4f4', 656992,31539,'SEA','FCL','CFR',29068,7784,'Export','aa0ce6c7-aaf7-4a49-9d0f-a076b9155c21',5577,'','','General cargo')

DECLARE
    v_from    INTEGER;
    v_to      INTEGER;
    v_call_id INTEGER;

BEGIN

    --get weight tier
    SELECT INTO v_from, v_to ti."from",
                             ti."to"
    FROM mrr.freight_weight_tiers ti
    WHERE "mode" = p_mode
      AND "loadterm" = p_loadterm
      AND p_weight BETWEEN "from" AND "to";

    DROP TABLE IF EXISTS tmp_shipments;

--select shipments matching the parameters
    CREATE TEMP TABLE IF NOT EXISTS tmp_shipments AS
        (SELECT sh.*
         FROM prod.shipments sh
         WHERE "tenantId" = p_tenant_id
           AND "isFreight" = TRUE
           AND sh."mode" = p_mode
           AND coalesce("mainFreight_freight_loadTerm", 'LCL') = p_loadterm
           AND sh."pickupAddress_location_id" = p_pickup_address_id
           AND sh."deliveryAddress_location_id" = p_delivery_address_id
           AND sh."portOfLoading_location_id" = p_port_of_loading_id
           AND sh."portOfDischarge_location_id" = p_port_of_discharge_id
           --and p_carrier_ids LIKE '%' || "mainFreight_freight_carrierId" || '%'
           --	and sh."incoTerms" = p_incoterms
           --	and sh."serviceType" = p_service_type -- Door_to_Port, etc.
           --	and "commodityType" = p_commodityType
           -- and month("erpDate?") = month(Now())  -- add later - similar period - need to figure out what is similar period (holiday season, etc.)

           --and (p_hazard_class == '' or sh."hazardClass" == p_hazard_class) --add after ETL? - there are no hazardous shipments in history
           AND ((sh."mode" = 'AIR' AND "totalWeight" BETWEEN v_from AND v_to)
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'FCL'
                    --and "totalNumberOfUnits" between v_from and v_to --need to add this parameter!!
                    )
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'LCL'))
            --add ROAD mode later
            --what about non-freight mode?
        )
            ORDER BY sh."totalCost" ASC, sh."totalProfit" DESC-- "creationDateErp" desc
            LIMIT 1;
    --add freightPieceType for later versions (Damco use only pallets)

    return query
--origin charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(o."origin_serviceItems_chargeCode" as text)                         as "chargeCode",
                        cast(o."origin_serviceItems_serviceTypeEnum" AS TEXT)                    AS "serviceTypeEnum",
                        TRUE                                                                     AS "isSelected",
            /*cast(case when trim(o."origin_serviceItems_chargeDescription") = 'Airfreight'
                    then DATE_PART('day', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp)) * 24 + DATE_PART('hour', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp) )
                    else null
                    end as double precision) as "durationInHours",*/
                        cast(0 AS DOUBLE PRECISION)                                              AS "durationInHours",
                        cast(FALSE AS BOOLEAN)                                                   AS "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(o."origin_serviceItems_serviceParty_id" AS TEXT)                    AS "carrierId",
                        cast(NULL AS TEXT)                                                       AS "carrier_key", --see python
                        cast(o."origin_serviceItems_serviceParty_erpId" AS TEXT)                 AS "carrierErpId", --change to "erpId"
                        cast(o."origin_serviceItems_serviceParty_name" AS TEXT)                  AS "carrierName",
                        --cast(o."origin_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT)                                 AS "carrierType",

                        CASE
                            WHEN o."origin_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                                    COALESCE(o."origin_serviceItems_serviceRevenue_numberOfUnits", 0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
                            END                                                                  AS "numberOfUnits",
                        CASE
                            WHEN o."origin_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                                    COALESCE(o."origin_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
                            END                                                                  AS "ratePerUnit",
                        cast(o."origin_serviceItems_quantityUnit" AS TEXT)                       AS "rateUnitType",
                        CASE
                            WHEN o."origin_serviceItems_serviceCost_rateCurrencyCode" IS NULL
                                THEN CAST(o."origin_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
                            ELSE cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
                            END                                                                  AS "rateCurrencyCode",

                        --cast(o."origin_serviceItems_serviceCost_rateUnitType" as text) as "rateUnitType",

                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(o."origin_serviceItems_serviceRevenue_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION)                                    AS "ratePerUnitConverted",
                        sh.id                                                                    AS "shipment_id",
                        "totalCurrency"                                                          as "local_currency",
                        cast(TRUE as boolean)                                                    as "existsInHistory",
                        cast("origin_serviceItems_serviceCost_exchangeRate" as double precision) as "exchangeRate"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_origin o
                            ON o.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = o."origin_serviceItems_chargeCode"
            /*left join mrr.charge_code_groups cc
                    on trim(cc.charge_code_group) = trim(o."origin_serviceItems_chargeCode")
                inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                    on inc.charge_code = cc.charge_code
                    and inc.incoterms = "incoterms"
                    and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfLoading_location_id"
             --on service_location.location_id = o."origin_serviceItems_serviceParty_location_id"

        UNION ALL

--destination charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(d."destination_serviceItems_chargeCode" as text)                         as "chargeCode",
                        cast(d."destination_serviceItems_serviceTypeEnum" AS TEXT)                    AS "serviceTypeEnum",
                        TRUE                                                                          AS "isSelected",
                        cast(0 AS DOUBLE PRECISION)                                                   AS "durationInHours",
                        cast(FALSE AS BOOLEAN)                                                        AS "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(d."destination_serviceItems_serviceParty_id" AS TEXT)                    AS "carrierId",
                        cast(NULL AS TEXT)                                                            AS "carrier_key", --see python
                        cast(d."destination_serviceItems_serviceParty_erpId" AS TEXT)                 AS "carrierErpId", --change to "erpId"
                        cast(d."destination_serviceItems_serviceParty_name" AS TEXT)                  AS "carrierName",
                        --cast(d."destination_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT)                                      AS "carrierType",

                        CASE
                            WHEN d."destination_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                                    COALESCE(d."destination_serviceItems_serviceRevenue_numberOfUnits",
                                             0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(d."destination_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
                            END                                                                       AS "numberOfUnits",
                        CASE
                            WHEN d."destination_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                                    COALESCE(d."destination_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
                            ELSE cast(
                                    coalesce(d."destination_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
                            END                                                                       AS "ratePerUnit",
                        cast(d."destination_serviceItems_quantityUnit" AS TEXT)                       AS "rateUnitType",
                        CASE
                            WHEN d."destination_serviceItems_serviceCost_rateCurrencyCode" IS NULL THEN CAST(
                                    d."destination_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
                            ELSE cast(d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
                            END                                                                       AS "rateCurrencyCode",
                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(d."destination_serviceItems_serviceCost_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION)                                         AS "ratePerUnitConverted",
                        sh.id                                                                         AS "shipment_id",
                        "totalCurrency"                                                               as "local_currency",
                        cast(TRUE as boolean)                                                         as "existsInHistory",
                        cast("destination_serviceItems_serviceCost_exchangeRate" as double precision) as "exchangeRate"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_destination d
                            ON d.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = d."destination_serviceItems_chargeCode"
                 LEFT JOIN prod.shipments_mainfreight f
                           ON f.s_id = sh.s_id
            /*left join mrr.charge_code_groups cc
                    on trim(cc.charge_code_group) = trim(d."destination_serviceItems_chargeCode")
                inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                    on inc.charge_code = cc.charge_code
                    and inc.incoterms = "incoterms"
                    and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfDischarge_location_id"

        union all

--charges that are missing in history
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(u."chargeCode" as text)              as "chargeCode",
                        cast(u."enumtype" AS TEXT)                AS "serviceTypeEnum",
                        TRUE                                      AS "isSelected",
                        cast(0 AS DOUBLE PRECISION)               AS "durationInHours",
                        cast(FALSE AS BOOLEAN)                    AS "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(null AS TEXT)                        AS "carrierId",
                        cast(NULL AS TEXT)                        AS "carrier_key",
                        cast(null AS TEXT)                        AS "carrierErpId",
                        cast(null AS TEXT)                        AS "carrierName",
                        cast(concat(p_mode, '_CARRIER') AS TEXT)  AS "carrierType",

                        cast(0 AS DOUBLE PRECISION)               AS "numberOfUnits",

                        cast(u."ratePerUnit" AS DOUBLE PRECISION) AS "ratePerUnit",
                        cast(u."rateUnitType" AS TEXT)            AS "rateUnitType",
                        cast("currency" AS TEXT)                  AS "rateCurrencyCode",
                        cast(null AS DOUBLE PRECISION)            AS "ratePerUnitConverted",
                        sh.id                                     AS "shipment_id",
                        cast(null AS TEXT)                        as "local_currency",
                        cast(FALSE as boolean)                    as "existsInHistory",
                        cast("exchange_rate" as double precision) as "exchangeRate"

        FROM tmp_shipments sh
                 INNER JOIN mrr.cases_ai u
                            ON u.s_id = sh.s_id
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = u."location_id";

END;
$$;

alter function prod.get_best_routes_new(text, integer, integer, text, text, text, integer, integer, text, text, double precision, text, text, text) owner to "Postgresadmin";

create function prod.get_best_routes(p_tenant_id text, p_pickup_address_id integer, p_delivery_address_id integer,
                                     p_mode text, p_loadterm text, p_incoterms text, p_port_of_loading_id integer,
                                     p_port_of_discharge_id integer, p_importexport text, p_carrier_ids text,
                                     p_weight double precision, p_hazard_class text, p_service_type text,
                                     p_commodity_type text)
    returns TABLE
            (
                call_id                integer,
                s_id                   text,
                "chargeCode"           text,
                "serviceTypeEnum"      text,
                "isSelected"           boolean,
                "durationInHours"      double precision,
                "sendSpot"             boolean,
                location_type          text,
                location_id            integer,
                location_city          text,
                "location_stateCode"   text,
                "location_countryCode" text,
                location_name          text,
                location_address       text,
                "location_postalCode"  text,
                "location_portCode"    text,
                "location_portName"    text,
                "location_portType"    text,
                "carrierId"            text,
                carrier_key            text,
                "carrierErpId"         text,
                "carrierName"          text,
                "carrierType"          text,
                "numberOfUnits"        double precision,
                "ratePerUnit"          double precision,
                "rateUnitType"         text,
                "rateCurrencyCode"     text,
                "ratePerUnitConverted" double precision,
                shipment_id            text,
                local_currency         text,
                "existsInHistory"      boolean
            )
    language plpgsql
as
$$
--select * from prod.get_best_routes('005237f9-6779-4c68-89d6-d0800559d4f4', 656992,31539,'SEA','FCL','CFR',29068,7784,'Export','aa0ce6c7-aaf7-4a49-9d0f-a076b9155c21',5577,'','','General cargo')

DECLARE
    v_from    INTEGER;
    v_to      INTEGER;
    v_call_id INTEGER;

BEGIN

    DROP TABLE IF EXISTS tmp_shipments;

    INSERT INTO prod.log_best_routes ("LogDateTime", "call")
    VALUES (NOW(), concat('select * from prod.get_best_routes(''', p_tenant_id, ''', ',
                          p_pickup_address_id, ',', p_delivery_address_id, ',''', p_mode, ''',''', p_loadterm, ''',''',
                          p_incoterms,
                          ''',', p_port_of_loading_id, ',', p_port_of_discharge_id, ',''', p_importexport, ''',''',
                          p_carrier_ids,
                          ''',', p_weight, ',''', p_hazard_class, ''',''', p_service_type, ''',''', p_commodity_type,
                          ''')'));

    -- SELECT INTO v_call_id currval(pg_get_serial_sequence('prod.log_best_routes', 'call_id'));

--get weight tier
    SELECT INTO v_from, v_to ti."from",
                             ti."to"
    FROM mrr.freight_weight_tiers ti
    WHERE "mode" = p_mode
      AND "loadterm" = p_loadterm
      AND p_weight BETWEEN "from" AND "to";

    --drop table if exists prod.tmp_shipments;

--select shipments matching the parameters
    CREATE TEMP TABLE IF NOT EXISTS tmp_shipments AS
        (SELECT sh.*
         FROM prod.shipments sh
         WHERE "tenantId" = p_tenant_id
           AND "isFreight" = TRUE
           AND sh."mode" = p_mode
           AND coalesce("mainFreight_freight_loadTerm", 'LCL') = p_loadterm
           AND sh."pickupAddress_location_id" = p_pickup_address_id
           AND sh."deliveryAddress_location_id" = p_delivery_address_id
           AND sh."portOfLoading_location_id" = p_port_of_loading_id
           AND sh."portOfDischarge_location_id" = p_port_of_discharge_id
           --and p_carrier_ids LIKE '%' || "mainFreight_freight_carrierId" || '%'
           --	and sh."incoTerms" = p_incoterms
           --	and sh."serviceType" = p_service_type -- Door_to_Port, etc.
           --	and "commodityType" = p_commodityType
           -- and month("erpDate?") = month(Now())  -- add later - similar period - need to figure out what is similar period (holiday season, etc.)

           --and (p_hazard_class == '' or sh."hazardClass" == p_hazard_class) --add after ETL? - there are no hazardous shipments in history
           AND ((sh."mode" = 'AIR' AND "totalWeight" BETWEEN v_from AND v_to)
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'FCL'
                    --and "totalNumberOfUnits" between v_from and v_to --need to add this parameter!!
                    )
             OR (sh."mode" = 'SEA' AND "mainFreight_freight_loadTerm" = 'LCL'))
            --add ROAD mode later
            --what about non-freight mode?
        )
            ORDER BY sh."totalCost" ASC, sh."totalProfit" DESC-- "creationDateErp" desc
            LIMIT 1;
    --add freightPieceType for later versions (Damco use only pallets)

    /*INSERT INTO prod.log_best_routes_responses (call_id, s_id, "chargeCode", "isSelected",
                                                "durationInHours", "sendSpot", location_type, location_id,
                                                location_city, "location_stateCode",
                                                "location_countryCode", location_name, location_address,
                                                "location_postalCode",
                                                "location_portCode", "location_portName", "location_portType",
                                                "carrierId", carrier_key,
                                                "carrierErpId", "carrierName", "carrierType", "numberOfUnits",
                                                "ratePerUnit",
                                                "rateUnitType", "rateCurrencyCode", "ratePerUnitConverted", shipment_id)
        (*/
    return query
--origin charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(o."origin_serviceItems_chargeCode" as text) as                                            "chargeCode",
                        cast(o."origin_serviceItems_serviceTypeEnum" AS TEXT) AS                                       "serviceTypeEnum",
                        TRUE AS                                                                                        "isSelected",
            /*cast(case when trim(o."origin_serviceItems_chargeDescription") = 'Airfreight'
                    then DATE_PART('day', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp)) * 24 + DATE_PART('hour', cast("mainFreight_freight_arriveTime" as timestamp) - cast("mainFreight_freight_departTime" as timestamp) )
                    else null
                    end as double precision) as "durationInHours",*/
                        cast(0 AS DOUBLE PRECISION) AS                                                                 "durationInHours",
                        cast(FALSE AS BOOLEAN) AS                                                                      "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(o."origin_serviceItems_serviceParty_id" AS TEXT) AS                                       "carrierId",
                        cast(NULL AS TEXT) AS                                                                          "carrier_key", --see python
                        cast(o."origin_serviceItems_serviceParty_erpId" AS TEXT) AS                                    "carrierErpId", --change to "erpId"
                        cast(o."origin_serviceItems_serviceParty_name" AS TEXT) AS                                     "carrierName",
                        --cast(o."origin_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT) AS                                                    "carrierType",

                        cast(
                                coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION) AS "numberOfUnits",
                        cast(
                                coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) as DOUBLE PRECISION) AS   "ratePerUnit",
                        cast(o."origin_serviceItems_quantityUnit" AS TEXT) AS                                          "rateUnitType",
                        cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT) AS                          "rateCurrencyCode",

            /*
                            CASE
                                WHEN o."origin_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                                        COALESCE(o."origin_serviceItems_serviceRevenue_numberOfUnits", 0) AS DOUBLE PRECISION)
                                ELSE cast(
                                        coalesce(o."origin_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
                                END                                                  AS "numberOfUnits",
                            CASE
                                WHEN o."origin_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                                        COALESCE(o."origin_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
                                ELSE cast(
                                        coalesce(o."origin_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
                                END                                                  AS "ratePerUnit",
                            cast(o."origin_serviceItems_quantityUnit" AS TEXT)       AS "rateUnitType",
                            CASE
                                WHEN o."origin_serviceItems_serviceCost_rateCurrencyCode" IS NULL
                                    THEN CAST(o."origin_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
                                ELSE cast(o."origin_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
                                END                                                  AS "rateCurrencyCode",
*/
                        --cast(o."origin_serviceItems_serviceCost_rateUnitType" as text) as "rateUnitType",

                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(o."origin_serviceItems_serviceRevenue_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION) AS                                                       "ratePerUnitConverted",
                        sh.id AS                                                                                       "shipment_id",
                        "totalCurrency" as                                                                             "local_currency",
                        cast(TRUE as boolean) as                                                                       "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_origin o
                            ON o.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = o."origin_serviceItems_chargeCode"
            /*left join mrr.charge_code_groups cc
                    on trim(cc.charge_code_group) = trim(o."origin_serviceItems_chargeCode")
                inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                    on inc.charge_code = cc.charge_code
                    and inc.incoterms = "incoterms"
                    and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfLoading_location_id"
             --on service_location.location_id = o."origin_serviceItems_serviceParty_location_id"
        where o."origin_serviceItems_serviceCost_ratePerUnit" is not null

        UNION ALL

--destination charges
        SELECT DISTINCT cast(v_call_id AS INTEGER),
                        cast(sh.s_id AS TEXT),
                        cast(d."destination_serviceItems_chargeCode" as text) as                               "chargeCode",
                        cast(d."destination_serviceItems_serviceTypeEnum" AS TEXT) AS                          "serviceTypeEnum",
                        TRUE AS                                                                                "isSelected",
                        cast(0 AS DOUBLE PRECISION) AS                                                         "durationInHours",
                        cast(FALSE AS BOOLEAN) AS                                                              "sendSpot",

                        --service location
                        cast(service_location."location_type" AS TEXT),--"PORT" vs "DOOR"
                        cast(service_location."location_id" AS INTEGER),
                        cast(service_location."location_city" AS TEXT),
                        cast(service_location."location_stateCode" AS TEXT),
                        cast(service_location."location_countryCode" AS TEXT),
                        cast(service_location."location_name" AS TEXT),
                        cast(service_location."location_address" AS TEXT),
                        cast(service_location."location_postalCode" AS TEXT),
                        cast(service_location."location_portCode" AS TEXT),
                        cast(service_location."location_portName" AS TEXT),
                        cast(service_location."location_portType" AS TEXT),

                        --carrier details
                        cast(d."destination_serviceItems_serviceParty_id" AS TEXT) AS                          "carrierId",
                        cast(NULL AS TEXT) AS                                                                  "carrier_key", --see python
                        cast(d."destination_serviceItems_serviceParty_erpId" AS TEXT) AS                       "carrierErpId", --change to "erpId"
                        cast(d."destination_serviceItems_serviceParty_name" AS TEXT) AS                        "carrierName",
                        --cast(d."destination_serviceItems_serviceParty_type" as text) as "carrierType",
                        cast(concat(p_mode, '_CARRIER') AS TEXT) AS                                            "carrierType",

                        cast(
                                d."destination_serviceItems_serviceCost_numberOfUnits" AS DOUBLE PRECISION) AS "numberOfUnits",
                        cast(
                                d."destination_serviceItems_serviceCost_ratePerUnit" as DOUBLE PRECISION) AS   "ratePerUnit",
                        cast(d."destination_serviceItems_quantityUnit" AS TEXT) AS                             "rateUnitType",
                        cast(
                                d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT) AS          "rateCurrencyCode",
            /*
                            CASE
                                WHEN d."destination_serviceItems_serviceCost_numberOfUnits" IS NULL THEN CAST(
                                        COALESCE(d."destination_serviceItems_serviceRevenue_numberOfUnits",
                                                 0) AS DOUBLE PRECISION)
                                ELSE cast(
                                        coalesce(d."destination_serviceItems_serviceCost_numberOfUnits", 0) AS DOUBLE PRECISION)
                                END                                                       AS "numberOfUnits",
                            CASE
                                WHEN d."destination_serviceItems_serviceCost_ratePerUnit" IS NULL THEN CAST(
                                        COALESCE(d."destination_serviceItems_serviceRevenue_ratePerUnit", 0) AS DOUBLE PRECISION)
                                ELSE cast(
                                        coalesce(d."destination_serviceItems_serviceCost_ratePerUnit", 0) AS DOUBLE PRECISION)
                                END                                                       AS "ratePerUnit",
                            cast(d."destination_serviceItems_quantityUnit" AS TEXT)       AS "rateUnitType",
                            CASE
                                WHEN d."destination_serviceItems_serviceCost_rateCurrencyCode" IS NULL THEN CAST(
                                        d."destination_serviceItems_serviceRevenue_rateCurrencyCode" AS TEXT)
                                ELSE cast(d."destination_serviceItems_serviceCost_rateCurrencyCode" AS TEXT)
                                END                                                       AS "rateCurrencyCode",
								 */
                        --'USD' as "rateCurrencyCode",
                        cast(coalesce(d."destination_serviceItems_serviceCost_ratePerUnitConverted",
                                      0) AS DOUBLE PRECISION) AS                                               "ratePerUnitConverted",
                        sh.id AS                                                                               "shipment_id",
                        "totalCurrency" as                                                                     "local_currency",
                        cast(TRUE as boolean) as                                                               "existsInHistory"

        FROM tmp_shipments sh
                 INNER JOIN prod.shipments_destination d
                            ON d.s_id = sh.s_id
            --left join prod.charge_codes_gpm charge_names
            --	on charge_names.charge_code = d."destination_serviceItems_chargeCode"
                 LEFT JOIN prod.shipments_mainfreight f
                           ON f.s_id = sh.s_id
            /*left join mrr.charge_code_groups cc
                    on trim(cc.charge_code_group) = trim(d."destination_serviceItems_chargeCode")
                inner join mrr.charge_codes_incoterms inc --include only charges that the customer is supposed to pay for
                    on inc.charge_code = cc.charge_code
                    and inc.incoterms = "incoterms"
                    and inc.payer = "buyerseller"*/
                 LEFT JOIN prod.shipments_locations service_location
                           ON service_location.location_id = sh."portOfDischarge_location_id"
        where d."destination_serviceItems_serviceCost_ratePerUnit" is not null;

    /* RETURN QUERY
        SELECT *
        FROM prod.log_best_routes_responses r
        WHERE r."call_id" = v_call_id;*/

END;
$$;

alter function prod.get_best_routes(text, integer, integer, text, text, text, integer, integer, text, text, double precision, text, text, text) owner to "Postgresadmin";

create function prod.get_document_statistics_response(p_tenant_id text)
    returns TABLE
            (
                "tenantId"            text,
                document_status       text,
                document_status_count bigint
            )
    language sql
as
$$
select "tenantId"               as tenantId,
       "document_status"        as document_status,
       count("document_status") as document_status_count
from prod.documents
where "tenantId" = p_tenant_id
group by "tenantId", "document_status"
HAVING "document_status" is not null

$$;

alter function prod.get_document_statistics_response(text) owner to "Postgresadmin";

create function prod.update_document_response(p_tenantid text, p_document_id uuid, p_documentcategory text,
                                              p_documentname text, p_document_title text, p_documenttype text)
    returns TABLE
            (
                document_name text
            )
    language sql
as
$$
UPDATE prod.documents
SET "document_category"= p_documentCategory,
    "document_name"    = p_documentName,
    "document_title"   = p_document_title,
    "document_type"    = p_documentType,
    "document_status"  = 'PROCESSING'
WHERE "tenantId" = p_tenantId
  and "documentId" = p_document_id

RETURNING "document_name";

$$;

alter function prod.update_document_response(text, uuid, text, text, text, text) owner to "Postgresadmin";

create function prod.delete_document(p_tenantid text, p_document_id uuid, p_document_serial integer)
    returns TABLE
            (
                p_document_id uuid
            )
    language sql
as
$$
DELETE
FROM prod.documents
WHERE "tenantId" = p_tenantId
  and "documentId" = p_document_id;

DELETE
FROM prod.document_routes
WHERE "tenantId" = p_tenantId
  and "document_serial" = p_document_serial;

DELETE
FROM prod.document_charges
WHERE "tenantId" = p_tenantId
  and "document_serial" = p_document_serial

RETURNING "p_document_id";

$$;

alter function prod.delete_document(text, uuid, integer) owner to "Postgresadmin";

create function prod.update_document_report_detalis(p_tenantid text, p_document_id uuid, p_report_details text)
    returns TABLE
            (
                documentid uuid
            )
    language sql
as
$$
UPDATE prod.documents
SET "report_details"= p_report_details
WHERE "tenantId" = p_tenantid
  and "documentId" = p_document_id
RETURNING "documentId";

$$;

alter function prod.update_document_report_detalis(text, uuid, text) owner to "Postgresadmin";

create function prod.update_document_status(p_tenantid text, p_document_id uuid, p_status text)
    returns TABLE
            (
                documentid uuid
            )
    language sql
as
$$
UPDATE prod.documents
SET "document_status"= p_status
WHERE "tenantId" = p_tenantid
  and "documentId" = p_document_id
RETURNING "documentId";

$$;

alter function prod.update_document_status(text, uuid, text) owner to "Postgresadmin";

create function prod.pricing_get_linehaul()
    returns TABLE
            (
                origin_port text,
                dest_port   text
            )
    language plpgsql
as
$$
BEGIN

    return query
        SELECT origin_airport_code as origin_port,
               dest_gateway        as dest_port

        FROM prod.air_linehaul;
END;
$$;

alter function prod.pricing_get_linehaul() owner to "Postgresadmin";

create function prod.gpm_insert_calculated_route(p_origin_port text, p_destinatio_port text, p_origin_country_code text,
                                                 p_destination_country_code text)
    returns TABLE
            (
                route_id integer
            )
    language sql
as
$$
INSERT INTO prod.gpm_calculated_routes("origin_port", "destination_port", "origin_country", "destination_country")
VALUES (p_origin_port, p_destinatio_port, p_origin_country_code, p_destination_country_code)
RETURNING "route_id";

$$;

alter function prod.gpm_insert_calculated_route(text, text, text, text) owner to "Postgresadmin";

create function prod.gpm_insert_legs(p_route_id integer, p_leg_id integer, p_origin_airport text,
                                     p_destination_airport text, p_leg_type text, p_pricing_period text, p_hub boolean,
                                     p_origin_country_code text, p_destination_country_code text)
    returns TABLE
            (
                route_id integer
            )
    language sql
as
$$
INSERT INTO prod.gpm_calculated_routes_legs("route_id", "leg_id", "origin_airport", "destination_airport", "leg_type",
                                            "pricing_period", "hub", "origin_country", "destination_country")
VALUES (p_route_id, p_leg_id, p_origin_airport, p_destination_airport, p_leg_type, p_pricing_period, p_hub,
        p_origin_country_code, p_destination_country_code)
RETURNING "route_id";
$$;

alter function prod.gpm_insert_legs(integer, integer, text, text, text, text, boolean, text, text) owner to "Postgresadmin";

create procedure prod.gpm_insert_legs_p(p_route_id integer, p_leg_id integer, p_origin_airport text,
                                        p_destination_airport text, p_leg_type text, p_pricing_period text,
                                        p_hub boolean, p_origin_country_code text, p_destination_country_code text)
    language sql
as
$$
INSERT INTO prod.gpm_calculated_routes_legs("route_id", "leg_id", "origin_airport", "destination_airport", "leg_type",
                                            "pricing_period", "hub", "origin_country", "destination_country")
VALUES (p_route_id, p_leg_id, p_origin_airport, p_destination_airport, p_leg_type, p_pricing_period, p_hub,
        p_origin_country_code, p_destination_country_code);
$$;

alter procedure prod.gpm_insert_legs_p(integer, integer, text, text, text, text, boolean, text, text) owner to "Postgresadmin";

create function prod.pricing_get_main_freight()
    returns TABLE
            (
                origin         text,
                destination    text,
                origin_country text,
                dest_country   text,
                period         text,
                trade_lane     text
            )
    language plpgsql
as
$$
BEGIN

    return query
        SELECT wa.origin_gateway_airport_code as origin,
               wa.dest_gateway_airport_code   as destination,
               wa.origin_country              as origin_country,
               wa.dest_country                as dest_country,
               wa.pricing_period              as period,
               wa.trade_lane                  as trade_lane
        FROM prod.air_main_freight as wa;
END;
$$;

alter function prod.pricing_get_main_freight() owner to "Postgresadmin";

create function prod.insert_document(p_tenant_id text)
    returns TABLE
            (
                documentid      uuid,
                document_serial integer
            )
    language sql
as
$$
INSERT INTO prod.documents("tenantId", "received_date")
VALUES (p_tenant_id, current_timestamp)
RETURNING "documentId","document_serial";

$$;

alter function prod.insert_document(text) owner to "Postgresadmin";

create procedure prod.post_document_content("f_tenantId" text, f_document_serial integer, f_route_number integer,
                                            f_origin_country_name text, f_origin_country_code text,
                                            f_origin_city_name text, f_origin_city_code text, f_origin_state_name text,
                                            f_origin_state_code text, f_origin_port_code text,
                                            f_destination_country_name text, f_destination_country_code text,
                                            f_destination_city_name text, f_destination_city_code text,
                                            f_destination_state_name text, f_destination_state_code text,
                                            f_destination_port_code text, f_price_point_value double precision,
                                            f_price_point_currency_code text,
                                            f_validity_date timestamp without time zone, f_service text,
                                            f_accepted boolean)
    language sql
as
$$
INSERT INTO prod.document_routes( "tenantId"
                                , document_serial
                                , route_number
                                , origin_country_name
                                , origin_country_code
                                , origin_city_name
                                , origin_city_code
                                , origin_state_name
                                , origin_state_code
                                , origin_port_code
                                , destination_country_name
                                , destination_country_code
                                , destination_city_name
                                , destination_city_code
                                , destination_state_name
                                , destination_state_code
                                , destination_port_code
                                , price_point_value
                                , price_point_currency_code
                                , validity_date
                                , service
                                , accepted)
VALUES ( "f_tenantId"
       , f_document_serial
       , f_route_number
       , f_origin_country_name
       , f_origin_country_code
       , f_origin_city_name
       , f_origin_city_code
       , f_origin_state_name
       , f_origin_state_code
       , f_origin_port_code
       , f_destination_country_name
       , f_destination_country_code
       , f_destination_city_name
       , f_destination_city_code
       , f_destination_state_name
       , f_destination_state_code
       , f_destination_port_code
       , f_price_point_value
       , f_price_point_currency_code
       , f_validity_date
       , f_service
       , f_accepted);
$$;

alter procedure prod.post_document_content(text, integer, integer, text, text, text, text, text, text, text, text, text, text, text, text, text, text, double precision, text, timestamp, text, boolean) owner to "Postgresadmin";

create function prod.pricing_get_main_freight_with_price()
    returns TABLE
            (
                origin         text,
                destination    text,
                origin_country text,
                dest_country   text,
                period         text,
                trade_lane     text,
                price          double precision,
                trans_time     double precision
            )
    language plpgsql
as
$$
BEGIN

    return query
        SELECT wa.origin_gateway_airport_code                             as origin,
               wa.dest_gateway_airport_code                               as destination,
               wa.origin_country                                          as origin_country,
               wa.dest_country                                            as dest_country,
               wa.pricing_period                                          as period,
               wa.trade_lane                                              as trade_lane,
               wa.rate                                                    as price,
               GREATEST(wa.min_trans_time_hours, wa.max_trans_time_hours) as trans_time
        FROM prod.air_main_freight as wa
        where charge_type = 'Main Carriage';
END;
$$;

alter function prod.pricing_get_main_freight_with_price() owner to "Postgresadmin";

create procedure prod.stardox_update_doc_table_name(p_document_serial integer, p_table_name text)
    language sql
as
$$
UPDATE prod.documents
SET table_name = p_table_name
WHERE document_serial = p_document_serial
$$;

alter procedure prod.stardox_update_doc_table_name(integer, text) owner to "Postgresadmin";

create function prod.air_calculate(p_route_id integer, p_weight_kg double precision, p_density text,
                                   p_service_type text, p_tier text, p_pickup_code text, p_delivery_code text,
                                   p_service_level text)
    returns TABLE
            (
                charge_code        text,
                charge_description text,
                calculated_price   double precision,
                currency           text,
                calculation_notes  text
            )
    language plpgsql
as
$$
DECLARE
    v_origin_port          text;
    v_destination_port     text;
    v_origin_country       text;
    v_destination_country  text;
    v_fsc_min_price        double precision;
    v_fsc_per_kg           double precision;
    v_ssc_min_price        double precision;
    v_ssc_per_kg           double precision;
    v_weight_break_rate    double precision;
    v_main_freight_minimum double precision;
    v_number_of_units      double precision;
    v_ratio                integer;
    v_carriage_currency    text;
    v_ebr_price            double precision;

begin
    /*Shay's algorithm returns a list of possible leg pairs + leg_type (main_freight, linehaul, second_leg) and pricing period (weekly, monthly, quarterly) 
for each leg (gpm_calculated_routes_legs). Route can consist of 1 to 3 legs (main freight, or main freight + linehaul/secong leg, or main freight + 2 legs)
what about precarriage and oncarriage leg??
*/

--get route details
    select into v_origin_port, v_destination_port, v_origin_country, v_destination_country origin_port,
                                                                                           destination_port,
                                                                                           origin_country,
                                                                                           destination_country
    from prod.gpm_calculated_routes r
    where r.route_id = p_route_id;

    DROP TABLE IF EXISTS tmp_legs;
    DROP TABLE IF EXISTS tmp_charges;

    create TEMP TABLE tmp_legs as
        (select *
         from prod.gpm_calculated_routes_legs l
         where l.route_id = p_route_id);

    create TEMP TABLE tmp_charges
    (
        charge_id          serial,
        route_id           integer,
        charge_code        text COLLATE pg_catalog."default",
        charge_description text COLLATE pg_catalog."default",
        service_type_enum  text COLLATE pg_catalog."default",
        rate_per_unit      double precision,
        number_of_units    double precision,
        unit_type          text COLLATE pg_catalog."default",
        calculated_price   double precision,
        remarks            text COLLATE pg_catalog."default",
        calculation_notes  text COLLATE pg_catalog."default",
        currency           text COLLATE pg_catalog."default"
    );

    --main freight-------------------------------------------------------------------------------------------------------------------------------------
--look for the leg in air_main_freight table by POL and POD, leg_type = "main_freight" and pricing_period in (weekly, monthly, quarterly)
--price = main_carriage_price_per_kg * p_weight_kg
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select p_route_id,
           'code?',
           'Main Freight',
           'enum',
           mf.main_carriage_price_per_kg,
           p_weight_kg,
           'kg',
           main_carriage_price_per_kg * p_weight_kg,
           mf.remarks ||
           E'\r\n' || 'Pricing: ' || t.pricing_period ||
           '. Valid from ' || cast(mf.valid_from_date as date) || ' to ' || cast(mf.valid_to_date as date) ||
           E'\r\nAirline: ' || mf.airline_text || '. Transit time: ' || mf.transit_time_hours || ' hours',

           'Main freight: ' || t.origin_airport || '-' || t.destination_airport || ': ' ||
           cast(round(cast(main_carriage_price_per_kg as numeric), 2) as text) || ' ' || freight_currency || ' * ' ||
           cast(p_weight_kg as text) || ' kg = ' ||
           cast(round(cast(main_carriage_price_per_kg * p_weight_kg as numeric), 2) as text) || ' ' || freight_currency,
           freight_currency
    from tmp_legs t
             inner join prod.air_main_freight mf
                        on t.origin_airport = mf.origin_gateway_airport_code
                            and t.destination_airport = mf.dest_gateway_airport_code
                            and t.pricing_period = mf.pricing_period
    where t.leg_type = 'main_freight';

--FUEL and SECURITY sucharges------------------------------------------------
    SELECT INTO v_fsc_min_price, v_fsc_per_kg, v_ssc_min_price, v_ssc_per_kg mf.fsc_min_price,
                                                                             mf.fsc_per_kg,
                                                                             mf.ssc_min_price,
                                                                             mf.ssc_per_kg
    from tmp_legs t
             inner join prod.air_main_freight mf
                        on t.origin_airport = mf.origin_gateway_airport_code
                            and t.destination_airport = mf.dest_gateway_airport_code
                            and t.pricing_period = mf.pricing_period
    where t.leg_type = 'main_freight';

--update main freight price (add sucharges)
    update tmp_charges
    set calculated_price  = c.calculated_price + greatest(v_fsc_per_kg * p_weight_kg, v_fsc_min_price) +
                            greatest(v_ssc_per_kg * p_weight_kg, v_ssc_min_price),
        calculation_notes = c.calculation_notes
                                || E'\r\n' || 'Fuel sucharge: ' || cast(v_fsc_per_kg as text) || ' ' || c.currency ||
                            ' * ' || cast(p_weight_kg as text)
                                || ' kg = ' || cast(v_fsc_per_kg * p_weight_kg as text) || ' ' || c.currency
                                || '. Min: ' || cast(v_fsc_min_price as text) || ' ' || c.currency
                                --|| '. Fuel sucharge: ' || cast(greatest(v_fsc_per_kg * p_weight_kg, v_fsc_min_price) as text) || ' ' || c.currency

                                || E'\r\n' || 'Security sucharge: ' || cast(v_ssc_per_kg as text) || ' ' ||
                            c.currency || ' * ' || cast(p_weight_kg as text)
                                || ' kg = ' || cast(v_ssc_per_kg * p_weight_kg as text) || ' ' || c.currency
                                || '. Min: ' || cast(v_ssc_min_price as text) || ' ' || c.currency
        --|| '. Security sucharge: ' || cast(greatest(v_ssc_per_kg * p_weight_kg, v_ssc_min_price) as text) || ' ' || c.currency
    from tmp_charges c;

    --find minimum main freight----------------------------------------------------------------------------------
--find by countries
    select into v_main_freight_minimum m.margin_rate
    from tmp_legs t
             inner join prod.air_margins m
                        on m.origin_country_code = v_origin_country
                            and m.dest_country_code = v_destination_country
                            and m.air_type = 'fees'
                            and density_level = p_density
                            and service_level like p_service_level || '%' -- 'Economy%', 'Premium%', 'Priority%'
    where t.leg_type = 'main_freight';

--if not found, find by "agents"
    if v_main_freight_minimum is NULL then
        select into v_main_freight_minimum m.margin_rate
        from tmp_legs t
                 inner join prod.air_margins m
                            on t.origin_country = m.origin_country_code
                                and m.dest_country_code = 'agents'
                                and m.air_type = 'fees'
                                and density_level = p_density
                                and service_level like p_service_level || '%' -- 'Economy%', 'Premium%', 'Priority%'
        where t.leg_type = 'main_freight';
    end if;

    if v_main_freight_minimum is NULL then
        select into v_main_freight_minimum 0;
    end if;

--update main freight price (add minimum)
    update tmp_charges
    set calculated_price  = greatest(c.calculated_price, v_main_freight_minimum),
        calculation_notes = c.calculation_notes
                                || E'\r\n' || 'Main freight minimum: ' || cast(v_main_freight_minimum as text) || ' ' ||
                            c.currency
    from tmp_charges c;

--find weight break-----------------------------------------------------------
    select into v_weight_break_rate "rate"
    from prod.air_weight_break
    where p_weight_kg between from_weight and to_weight;

--update main freight price (add weight break)
    update tmp_charges
    set calculated_price  = c.calculated_price + v_weight_break_rate * p_weight_kg,
        calculation_notes = c.calculation_notes
                                || E'\r\n' || 'Weight break: ' || cast(v_weight_break_rate as text) || ' ' ||
                            c.currency || ' * ' || cast(p_weight_kg as text)
                                || ' kg = ' || cast(v_weight_break_rate * p_weight_kg as text) || ' ' || c.currency
                                || E'\r\n' || 'Total main freight: ' ||
                            cast(c.calculated_price + v_weight_break_rate * p_weight_kg as text) || ' ' || c.currency
                                || E'\r\n' || 'Remarks: ' || c.remarks
    from tmp_charges c;

--service level charges------------------------------------------------------------------------------------------------------------------------------------------
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select p_route_id,
           'code?',
           'Service Level: ' || m.service_level,
           'enum',
           margin_rate,
           case margin_charge
               when 'dollar' then p_weight_kg
               when 'percent' then 1
               else '999999'
               end, --as number_of_units
           margin_charge,
           case margin_charge
               when 'dollar' then p_weight_kg * margin_rate
               when 'percent' then c.calculated_price * margin_rate / 100
               else '999999'
               end, --as calculated_price
           '',
           --'Service level: ' || m.service_level || ': ' ||
           case margin_charge
               when 'dollar' then cast(p_weight_kg as text) || ' kg * ' ||
                                  cast(round(cast(margin_rate as numeric), 2) as text) || ' USD'
                                      || ' = ' || cast(p_weight_kg * margin_rate as text) || ' USD'
               when 'percent' then cast(c.calculated_price as text) || ' USD * ' || cast(margin_rate as text) || '% = '
                                       || cast(c.calculated_price * margin_rate / 100 as text) || ' USD'
               else 'should be dollar or percent'
               end,
           'USD'
    from tmp_legs t
             inner join tmp_charges c
                        on c.route_id = p_route_id
             inner join prod.air_margins m
                        on t.origin_country = m.origin_country_code
                            and t.destination_country = m.dest_country_code
                            and m.air_type = 'density'
                            and density_level = p_density
                            and service_level like p_service_level || '%' -- 'Economy%', 'Premium%', 'Priority%'
         --and service_level = 'Economy 120-168hrs' --include all three levels and then generate 3 offers in python?
    where t.leg_type = 'main_freight'
    order by margin_rate;

    --temporary for testing - total main freight
/*update tmp_charges
set calculation_notes = c.calculation_notes 
	|| E'\r\n' || 'TOTAL MAIN FREIGHT: ' || cast(round(cast(c.calculated_price as numeric), 2) as text)
from tmp_charges c;*/

--second leg-----------------------------------------------------------------------------------------------------------------------------------------
/*
if there is a leg in the list of leg pairs that is marked as "second_leg":
    look for the rate in air_main_freight table by POL and POD and leg_type = 'second_leg'
  	look for the minimum in air_margins with air_type = "fees" by airport code (or country if not found) ??
*/

    IF exists(select leg_id from tmp_legs where leg_type = 'second_leg') THEN
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Second Leg',
               'enum',
               mf.main_carriage_price_per_kg,
               p_weight_kg,
               '?',
               coalesce(mf.main_carriage_price_per_kg, 0) * p_weight_kg,
               '',
               --'Second leg: '|| 
               t.origin_airport || '-' || t.destination_airport || ': ' ||
               cast(coalesce(mf.main_carriage_price_per_kg, 0) as text) || ' USD * ' || cast(p_weight_kg as text) ||
               ' kg = ' ||
               cast(coalesce(mf.main_carriage_price_per_kg, 0) * p_weight_kg as text),
               'USD'
        from tmp_legs t
                 inner join prod.air_main_freight mf
                            on t.origin_airport = mf.origin_gateway_airport_code
                                and t.destination_airport = mf.dest_gateway_airport_code
        where leg_type = 'second_leg'
          and mf.pricing_period = 'second_leg';
    END IF;

    /*update tmp_charges
set calculated_price = c.calculated_price + v_second_leg_rate * p_weight_kg, 
calculation_notes = c.calculation_notes 
	|| E'\r\n' || 'SECOND LEG: ' || 
		cast(v_second_leg_rate as text) || ' * ' || cast(p_weight_kg as text) || ' = ' || 
		cast(v_second_leg_rate * p_weight_kg as text)
from tmp_charges c;*/

--linehaul-----------------------------------------------------------------------------------------------------------------------------------------
    IF exists(select leg_id from tmp_legs where leg_type = 'linehaul') THEN
        --need type: origin or destination linehaul?

--origin linehaul
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Linehaul',
               'enum',
               l.origin_linehaul_per_kg,
               p_weight_kg,
               'kg',
               greatest(l.origin_linehaul_per_kg * p_weight_kg, l.origin_linehaul_min),
               origin_remarks,
               --'Linehaul: ' || 
               t.origin_airport || '-' || t.destination_airport || ': ' ||
               cast(l.origin_linehaul_per_kg as text) || ' ' || l.currency || ' * ' || cast(p_weight_kg as text) ||
               ' kg ' || ' = ' ||
               cast(l.origin_linehaul_per_kg * p_weight_kg as text) || ' ' || l.currency ||
               '. Min: ' || cast(l.origin_linehaul_min as text) || ' ' || l.currency ||
               E'\r\nTransit time: ' || l.transit_time_to_gateway_hours || ' hours' ||
               E'\r\nRemarks: ' || origin_remarks,
               l.currency
        from tmp_legs t
                 inner join prod.air_linehaul l --origin linehaul
                            on t.origin_airport = l.origin_airport_code
                                and t.destination_airport = l.origin_gateway
        where leg_type = 'linehaul';

        --hub
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Linehaul Hub',
               'enum',
               l.gateway_hub_cost_per_kg,
               p_weight_kg,
               'kg',
               greatest(l.gateway_hub_cost_per_kg * p_weight_kg, l.gateway_hub_cost_min),
               origin_remarks,
               --'Linehaul hub: ' || 
               t.origin_airport || '-' || t.destination_airport || ': ' ||
               cast(l.gateway_hub_cost_per_kg as text) || ' ' || l.currency || ' * ' || cast(p_weight_kg as text) ||
               ' kg ' || ' = ' ||
               cast(l.gateway_hub_cost_per_kg * p_weight_kg as text) || ' ' || l.currency ||
               '. Min: ' || cast(l.gateway_hub_cost_min as text) || ' ' || l.currency || '. Remarks: ' ||
               origin_remarks,
               l.currency
        from tmp_legs t
                 inner join prod.air_linehaul l --origin linehaul
                            on t.origin_airport = l.origin_airport_code
                                and t.destination_airport = l.origin_gateway
        where t.leg_type = 'linehaul'
          and t.hub = true;
    END IF;

--pre-carriage-------------------------------------------------------------------------------------------------------------------------------------
    IF p_service_type in ('DTP', 'DTD') THEN
        --calculate number of units
        select into v_number_of_units, v_ratio, v_carriage_currency, v_ebr_price p_weight_kg / 167 * pre."ratio",
                                                                                 pre."ratio",
                                                                                 pre."currency",
                                                                                 least(
                                                                                         greatest(pre."price" * p_weight_kg / 167 * pre."ratio", "min"),
                                                                                         "max")
        from prod.air_pre_on_carriage pre
        where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --port of loading
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

        --raise notice 'v_ratio: %', v_ratio;
        if v_ratio is not null then

            --add precarriage EBR charge to tmp_charges
            insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                     number_of_units,
                                     unit_type, calculated_price, remarks, calculation_notes, currency)
            select p_route_id,
                   'code?',
                   'Pre Carriage EBR',
                   'enum',
                   pre."price",
                   v_number_of_units,
                   'kg',
                   v_ebr_price,
                   pre.comment,
                   --'Pre carriage EBR: ' || 
                   p_pickup_code || '-' || v_origin_port || ': '
                       || E'\r\n' || cast(pre."price" as text) || ' ' || pre.currency || ' * '
                       || cast(p_weight_kg as text) || ' kg / 167 * ' || cast(pre.ratio as text) || ' = '
                       || cast(pre."price" * p_weight_kg / 167 * pre."ratio" as text) || ' ' || pre.currency
                       || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency || ', max=' ||
                   cast(pre."max" as text) || ' ' || pre.currency
                       || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                   cast(pre.valid_to_date as date)
                       || E'\r\nRemarks: ' || pre.comment,
                   pre.currency
            from prod.air_pre_on_carriage pre
            where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
                or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
              and pre."loc_port" = v_origin_port          --'PEN'-- port of loading
              and pre."type" = 'ebr'
              and p_weight_kg between pre.from_weight and pre.to_weight
              and pre."carriage" = 'pre';

            --there are 3 options for calculating MSR/SSR charge------------------------------------------------------------------------
            --1. if comment="Based on EBR" (ratio = 0) and unit="kg" then MSR/SSR price = ebr_price + ratePerUnit * weight_kg / 167 * ratio 
            --2. if comment="Based on EBR" (ratio = 0) and unit="lump sum" then MSR/SSR price = ebr_price + ratePerUnit * 1
            --3. if comment<>"Based on EBR" (ratio <> 0) then MSR/SSR price = ratePerUnit * weight_kg / 167 * ratio --"R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280, "No Comment" - 167

            --1. add precarriage MSR & SSR charges if unit="kg" then msr_or_ssr_price = ebr_price + price * v_number_of_units
            insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                     number_of_units,
                                     unit_type, calculated_price, remarks, calculation_notes, currency)
            select p_route_id,
                   'code?',
                   'Pre Carriage ' || upper(pre."type"),
                   'enum',
                   pre."price",
                   v_number_of_units,
                   'kg',
                   v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"), pre."max"),
                   pre.comment,
                   --'Pre carriage '  || upper(pre."type") || ': '
                   cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' || cast(pre."price" as text) ||
                   ' ' || v_carriage_currency
                       || ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' || cast(v_ratio as text) || ' = '
                       || cast(v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"),
                                                   pre."max") as text) || ' ' || v_carriage_currency
                       || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency
                       || ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
                       || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                   cast(pre.valid_to_date as date)
                       || E'\r\nRemarks: ' || pre.comment,
                   v_carriage_currency
            from prod.air_pre_on_carriage pre
            where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
                or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
              and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
              and pre."type" in ('msr', 'ssr')
              and ratio = 0                               --Based on EBR
              and unit = 'kg'
              and pre."carriage" = 'pre';

            --2. add precarriage MSR/SSR charge: if comment="Based on EBR" (ratio = 0) and unit="lump sum" 
            --   then MSR/SSR price = ebr_price + ratePerUnit * 1
            insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                     number_of_units,
                                     unit_type, calculated_price, remarks, calculation_notes, currency)
            select p_route_id,
                   'code?',
                   'Pre Carriage ' || upper(pre."type"),
                   'enum',
                   pre."price",
                   1                       as number_of_units,
                   'kg',
                   v_ebr_price + price * 1 as calculated_price,
                   pre.comment,
                   --'Pre carriage ' || upper(pre."type") || ': ' ||
                   cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + '
                       || cast(pre."price" as text) || ' ' || v_carriage_currency || ' * 1 = '
                       || cast((v_ebr_price + pre."price") as text) || ' ' || v_carriage_currency
                       || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                   cast(pre.valid_to_date as date)
                       || E'\r\nRemarks: ' || pre.comment,
                   v_carriage_currency
            from prod.air_pre_on_carriage pre
            where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
                or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
              and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
              and pre."type" in ('msr', 'ssr')
              and ratio = 0                               --Based on EBR
              and unit = 'lump sum'
              and pre."carriage" = 'pre';

            --3. add precarriage MSR/SSR charge if comment<>"Based on EBR" (ratio <> 0) then MSR/SSR price = ratePerUnit * weight_kg / 167 * ratio --"R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280, "No Comment" - 167
            insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                     number_of_units,
                                     unit_type, calculated_price, remarks, calculation_notes, currency)
            select p_route_id,
                   'code?',
                   'Pre Carriage ' || upper(pre."type"),
                   'enum',
                   pre."price",
                   v_number_of_units,
                   'kg',
                   least(greatest(pre."price" * v_number_of_units, "min"), "max"),
                   pre.comment,
                   --'Pre carriage ' || upper(pre."type") || ': ' ||
                   cast(pre."price" as text) || ' ' || v_carriage_currency || ' * ' || cast(p_weight_kg as text)
                       || ' kg / 167 * ' || cast(v_ratio as text) || ' = '
                       || cast((least(greatest(pre."price" * v_number_of_units, "min"), "max")) as text) || ' ' ||
                   v_carriage_currency
                       || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency
                       || ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
                       || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                   cast(pre.valid_to_date as date)
                       || E'\r\nRemarks: ' || pre.comment,
                   v_carriage_currency
            from prod.air_pre_on_carriage pre
            where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
                or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
              and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
              and ratio <> 0                              --"No Comment" - 0, "R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280
              and pre."type" in ('msr', 'ssr')
              and p_weight_kg between pre.from_weight and pre.to_weight
              and pre."carriage" = 'pre';

            --add precarriage IFS charge to tmp_charges (use the same number of units and ratio as EBR)
            insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                     number_of_units,
                                     unit_type, calculated_price, remarks, calculation_notes, currency)
            select distinct p_route_id,
                            'code?',
                            'Pre Carriage IFS',
                            'enum',
                            pre."price",
                            v_number_of_units,
                            'kg',
                            pre."price" * v_ebr_price / 100,
                            pre.comment,
                            --'Pre carriage IFS: ' ||
                            cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' * ' ||
                            cast(pre."price" as text)
                                || ' % = ' || cast(pre."price" / 100 * v_ebr_price as text) || ' ' ||
                            v_carriage_currency
                                || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                            cast(pre.valid_to_date as date)
                                || E'\r\nRemarks: ' || pre.comment,
                            v_carriage_currency
            from prod.air_pre_on_carriage pre
            where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
                or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
              and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
              and pre."type" = 'ifs'
              and pre."carriage" = 'pre';
        end if;
    END IF;
    --select * from prod.air_calculate(2, 500, '1:3', 'DTD', 'A1', 'KUM', null) --case 87

--on-carriage-------------------------------------------------------------------------------------------------------------------------------------
    IF p_service_type in ('PTD', 'DTD') THEN
        --calculate number of units
        select into v_number_of_units, v_ratio, v_carriage_currency, v_ebr_price round(cast(p_weight_kg / 167 * pre."ratio" as numeric), 2),
                                                                                 pre."ratio",
                                                                                 pre."currency",
                                                                                 round(cast(least(
                                                                                         greatest(pre."price" * p_weight_kg / 167 * pre."ratio", "min"),
                                                                                         "max") as numeric), 2)
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'on';

        --raise notice 'v_ratio: %', v_ratio;
        --if v_ratio is not null then

        --add oncarriage EBR charge to tmp_charges
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'On Carriage EBR',
               'enum',
               pre."price",
               v_number_of_units,
               'kg',
               v_ebr_price,
               pre.comment,
               --'ON CARRIAGE EBR: ' || 
               v_destination_port || '-' || p_delivery_code || ':  '
                   || cast(pre."price" as text) || ' ' || v_carriage_currency || ' * ' || cast(p_weight_kg as text) ||
               ' kg / 167 * ' || cast(pre.ratio as text)
                   || ' = ' || cast(pre."price" * p_weight_kg / 167 * pre."ratio" as text) || ' ' || v_carriage_currency
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency
                   || ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'on';

        --there are 3 options for calculating MSR charge------------------------------------------------------------------------
        --1. if comment="Based on EBR" (ratio = 0) and unit="kg" then MSR price = ebr_price + ratePerUnit * weight_kg / 167 * ratio 
        --2. if comment="Based on EBR" (ratio = 0) and unit="lump sum" then MSR price = ebr_price + ratePerUnit * 1
        --3. if comment<>"Based on EBR" (ratio <> 0) then MSR price = ratePerUnit * weight_kg / 167 * ratio --"R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280, "No Comment" - 167

        --1. add oncarriage MSR/SSR charge if unit="kg" then msr_or_ssr_price = ebr_price + price * v_number_of_units
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'On Carriage ' || upper(pre."type"),
               'enum',
               pre."price",
               v_number_of_units,
               'kg',
               v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"), pre."max"),
               pre.comment,
               cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' || cast(pre."price" as text) || ' ' ||
               v_carriage_currency
                   || ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' || cast(v_ratio as text) || ' = '
                   ||
               cast(v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"), pre."max") as text) ||
               ' ' || v_carriage_currency
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency
                   || ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" in ('msr', 'ssr')
          and ratio = 0                             --Based on EBR
          and unit = 'kg'
          and pre."carriage" = 'on';

        --2. add oncarriage MSR/SSR charge if comment="Based on EBR" (ratio = 0) and unit="lump sum" then MSR/SSR price = ebr_price + ratePerUnit * 1
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'On Carriage ' || upper(pre."type"),
               'enum',
               pre."price",
               1                       as number_of_units,
               'kg',
               v_ebr_price + price * 1 as calculated_price,
               pre.comment,
               cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + '
                   || cast(pre."price" as text) || ' ' || v_carriage_currency || ' * 1 = '
                   || cast((v_ebr_price + pre."price") as text) || ' ' || v_carriage_currency
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" in ('msr', 'ssr')
          and ratio = 0                             --Based on EBR
          and unit = 'lump sum'
          and pre."carriage" = 'on';

        --3. add oncarriage MSR/SSR charge if comment<>"Based on EBR" (ratio <> 0) then MSR/SSR price = ratePerUnit * weight_kg / 167 * ratio --"R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280, "No Comment" - 167
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'On Carriage ' || upper(pre."type"),
               'enum',
               pre."price",
               v_number_of_units,
               'kg',
               least(greatest(pre."price" * v_number_of_units, "min"), "max"),
               pre.comment,
               cast(pre."price" as text) || ' ' || v_carriage_currency || ' * ' || cast(p_weight_kg as text)
                   || ' kg / 167 * ' || cast(v_ratio as text) || ' = '
                   || cast((least(greatest(pre."price" * v_number_of_units, "min"), "max")) as text) || ' ' ||
               v_carriage_currency
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency
                   || ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and ratio <> 0                            --"No Comment" - 0, "R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280
          and pre."type" in ('msr', 'ssr')
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'on';


        --add oncarriage IFS charge to tmp_charges (use the same number of units and ratio as EBR)
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select distinct p_route_id,
                        'code?',
                        'On Carriage IFS Charge',
                        'enum',
                        pre."price",
                        v_number_of_units,
                        'kg',
                        pre."price" * v_ebr_price / 100,
                        pre.comment,
                        cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' * ' || cast(pre."price" as text)
                            || ' % = ' || cast(pre."price" / 100 * v_ebr_price as text) || ' ' || v_carriage_currency
                            || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                        cast(pre.valid_to_date as date)
                            || E'\r\nRemarks: ' || pre.comment,
                        v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" = 'ifs'
          and pre."carriage" = 'on';

    END IF;

    --local charges ------------------------------------------------------------------------------------------------------------------------------------
--origin charges
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select p_route_id,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate,                               --rate per unit
           case c.unit
               when 'Per doc' then 1
               when 'Per kg' then p_weight_kg
               else 0
               end,                              --number of units
           c.unit,
           case c.unit
               when 'Per doc' then c.rate
               when 'Per kg' then greatest(p_weight_kg * c.rate, c.min)
               else 0
               end,                              --calculated_price
           c.remarks,
           --'ORIGIN CHARGE: ' || 
           --c.charge_code || ' - ' || c.charge_name || ': ' || 
           case c.unit
               when 'Per doc' then
                   cast(c.rate as text) || ' ' || c."Currency" || ' per doc '
               when 'Per kg' then
                                                           cast(c.rate as text) || ' ' || c."Currency" || ' * ' ||
                                                           cast(p_weight_kg as text) || ' kg '
                                                   || ' = ' || cast(p_weight_kg * c.rate as text) || ' ' ||
                                                           c."Currency" || '. Min: ' || cast(c.min as text) || ' ' ||
                                                           c."Currency"
               when '0' then cast(0 as text)
               end
               || E'\r\nTransit time: ' || c.hour || ' hours'
               || E'\r\nRemarks: ' || c.remarks, --calculation_notes
           c."Currency"
    from prod.air_local_charges c
    where (c."Airport" = v_origin_port or (c."Country" = v_origin_country and c."Airport" = 'All'))
      and ((c."tier" = 'A' and c."type" = 'origin' and p_tier like 'A%') or
           (c."tier" = 'B' and c."type" in ('origin', 'general') and p_tier like 'B%'));

--destination charges
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select p_route_id,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate,                               --rate per unit
           case c.unit
               when 'Per doc' then 1
               when 'Per kg' then p_weight_kg
               else 0
               end,                              --number of units
           c.unit,
           case c.unit
               when 'Per doc' then c.rate
               when 'Per kg' then greatest(p_weight_kg * c.rate, c.min)
               else 0
               end,                              --calculated_price
           c.remarks,
           --c.charge_code || ' - ' || c.charge_name || ': ' || 
           case c.unit
               when 'Per doc' then
                   cast(c.rate as text) || ' ' || c."Currency" || ' per doc '
               when 'Per kg' then
                                                           cast(c.rate as text) || ' ' || c."Currency" || ' * ' ||
                                                           cast(p_weight_kg as text) || ' kg '
                                                   || ' = ' || cast(p_weight_kg * c.rate as text) || ' ' ||
                                                           c."Currency" || '. Min: ' || cast(c.min as text) || ' ' ||
                                                           c."Currency"
               when '0' then cast(0 as text)
               end
               || E'\r\nTransit time: ' || c.hour || ' hours'
               || E'\r\nRemarks: ' || c.remarks, --calculation_notes
           c."Currency"
    from prod.air_local_charges c
    where (c."Airport" = v_destination_port or (c."Country" = v_destination_country and c."Airport" = 'All'))
      and ((c."tier" = 'A' and c."type" = 'dest' and p_tier like 'A%') or
           (c."tier" = 'B' and c."type" in ('dest', 'general') and p_tier like 'B%'));

--add margins to CFS charges
    update tmp_charges
    set calculated_price  = tmp_charges.calculated_price + m.margin_rate * p_weight_kg,
        calculation_notes = tmp_charges.calculation_notes || E'\r\n'
                                || 'CFS margin: ' || cast(m.margin_rate as text) || ' ' || tmp_charges.currency ||
                            ' * ' || cast(p_weight_kg as text) || ' kg = ' ||
                            cast(m.margin_rate * p_weight_kg as text) || ' ' || tmp_charges.currency
        --|| '. TOTAL CHARGE: ' || cast((tmp_charges.calculated_price + m.margin_rate * p_weight_kg) as text)
    from prod.air_margins m
    where m."tier" = cast(right(p_tier, 1) as double precision) -- 1 or 2 
        and (m.origin_country_code = v_origin_country and m."type" = 'Origin' and tmp_charges.charge_code = '102253')--"Origin CFS Handling Fee"
       or (m.dest_country_code = v_destination_country and m."type" = 'Dest' and tmp_charges.charge_code = '107438')--"Destination CFS Handling Fee"
    ;

--MSR margin--------------------------------------------------------------------------------------------------------------------------------------------
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select p_route_id,
           'MSR',
           'Margins MSR',
           'enum',
           m.margin_rate,               --rate per unit
           p_weight_kg,                 --number of units
           '',
           m.margin_rate * p_weight_kg, --calculated_price
           '',                          --remarks
           --'MSR MARGIN: ' || 
           cast(m.margin_rate as text) || ' USD * ' || cast(p_weight_kg as text) || ' kg = ' ||
           cast(m.margin_rate * p_weight_kg as text) || ' USD',
           'USD'
    from prod.air_margins m
    where m."type" = 'ATA'
      and m.origin_country_code = v_origin_country
      and m.dest_country_code = v_destination_country
      and m.margin_type = 'MSR'
      and air_type = 'margins'
      and m."tier" = cast(right(p_tier, 1) as double precision);
    -- 1 or 2 

--SSR margin --------------------------------------------------------------------------------------------------------------------------------------------
    IF p_tier = 'B2' THEN
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                                 rate_per_unit,
                                 number_of_units,
                                 unit_type,
                                 calculated_price,
                                 remarks, calculation_notes, currency)
        select p_route_id,
               'SSR',
               'Margins SSR',
               'enum',
               m.margin_rate,               --rate per unit
               p_weight_kg,                 --number of units
               '',
               m.margin_rate * p_weight_kg, --calculated_price
               '',                          --remarks
               --'SSR MARGIN: ' || 
               cast(m.margin_rate as text) || ' USD * ' || cast(p_weight_kg as text) || ' = ' ||
               cast(m.margin_rate * p_weight_kg as text) || ' USD',
               'USD'
        from prod.air_margins m
        where m."type" = 'ATA'
          and m.origin_country_code = v_origin_country
          and m.dest_country_code = v_destination_country
          and m.margin_type = 'SSR'
          and air_type = 'margins';
    END IF;

    --select * from prod.air_calculate(1, 1000, '1:3', 'PTP', 'B1')
--select * from prod.air_calculate(2, 3000, '1:3', 'PTP', 'B1')

--return-------------------------------------------------------------------------------------------------------------------------------------------
    return query
        select --l.route_id, 
               l.charge_code,
               l.charge_description, --l.service_type_enum, 
               --l.rate_per_unit, l.number_of_units, l.unit_type, 
               l.calculated_price,
               l.currency,
               --l.remarks, 
               l.calculation_notes
        from tmp_charges l
        order by charge_id;

end;
$$;

alter function prod.air_calculate(integer, double precision, text, text, text, text, text, text) owner to "Postgresadmin";

create function prod.get_linehaul_route()
    returns TABLE
            (
                origin_port text,
                dest_port   text
            )
    language plpgsql
as
$$
BEGIN

    return query
        SELECT origin_airport_code as origin_port,
               dest_gateway        as dest_port


        FROM prod.air_linehaul;
END;
$$;

alter function prod.get_linehaul_route() owner to "Postgresadmin";

create function prod.get_rejected_routes(p_tenant_id text)
    returns TABLE
            (
                "tenantId"                 text,
                routeid                    integer,
                route_number               integer,
                origin_city_code           text,
                origin_city_name           text,
                origin_country_code        text,
                origin_country_name        text,
                origin_port_code           text,
                origin_state_code          text,
                origin_state_name          text,
                destination_city_code      text,
                destination_city_name      text,
                destination_country_code   text,
                destination_country_name   text,
                destination_port_code      text,
                destination_state_code     text,
                destination_state_name     text,
                price_point_value          double precision,
                price_point_currency_code  text,
                validity_date              timestamp without time zone,
                service                    text,
                accepted                   boolean,
                number_of_other_exceptions integer,
                number_of_price_exceptions integer
            )
    language sql
as
$$
SELECT dr."tenantId",
       dr."routeId",
       dr.route_number,
       dr.origin_city_code,
       dr.origin_city_name,
       dr.origin_country_code,
       dr.origin_country_name,
       dr.origin_port_code,
       dr.origin_state_code,
       dr.origin_state_name,
       dr.destination_city_code,
       dr.destination_city_name,
       dr.destination_country_code,
       dr.destination_country_name,
       dr.destination_port_code,
       dr.destination_state_code,
       dr.destination_state_name,
       dr.price_point_value,
       dr.price_point_currency_code,
       dr.validity_date,
       dr.service,
       dr.accepted,
       COALESCE(dc.number_of_price_exceptions, 0) as number_of_price_exceptions,
       COALESCE(dc.number_of_other_exceptions, 0) as number_of_other_exceptions

FROM prod.document_exceptions de
         INNER JOIN prod.document_routes dr
                    ON de."tenantId" = dr."tenantId"
                        AND de."route_number" = dr."route_number"
         INNER JOIN prod.documents dc
                    ON dr."tenantId" = dc."tenantId"
                        AND dr."document_serial" = dc."document_serial"
WHERE de."tenantId" = p_tenant_id
  AND de.accepted = FALSE
$$;

alter function prod.get_rejected_routes(text) owner to "Postgresadmin";

create function prod.get_document_last_route_number(p_tenant_id text, p_document_serial integer)
    returns TABLE
            (
                last_route_number integer
            )
    language sql
as
$$
SELECT COALESCE(MAX("route_number"), 0) + 1 as last_route_number
FROM prod.document_routes
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial

$$;

alter function prod.get_document_last_route_number(text, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_update_doc_routes_accepted(p_document_serial integer)
    language sql
as
$$
UPDATE prod.document_routes AS r
SET accepted = TRUE
FROM (SELECT e.document_serial,
             e.route_number
      FROM prod.document_exceptions AS e
      WHERE e.document_serial = p_document_serial
      GROUP BY e.document_serial, e.route_number
      HAVING bool_and(e.accepted) IS TRUE) AS e2
WHERE r.document_serial = e2.document_serial
  AND r.route_number = e2.route_number
$$;

alter procedure prod.stardox_air_update_doc_routes_accepted(integer) owner to "Postgresadmin";

create function prod.gpm_air_calculate(p_route_id integer, p_weight_kg double precision, p_density text,
                                       p_service_type text, p_tier text, p_pickup_code text, p_delivery_code text,
                                       p_service_level text)
    returns TABLE
            (
                charge_code        text,
                charge_description text,
                calculated_price   double precision,
                currency           text,
                calculation_notes  text
            )
    language plpgsql
as
$$
DECLARE
    v_origin_port          text;
    v_destination_port     text;
    v_origin_country       text;
    v_destination_country  text;
    v_fsc_min_price        double precision;
    v_fsc_per_kg           double precision;
    v_ssc_min_price        double precision;
    v_ssc_per_kg           double precision;
    v_weight_break_rate    double precision;
    v_main_freight_minimum double precision;
    v_number_of_units      double precision;
    v_ebr_ratio            integer;
    v_carriage_currency    text;
    v_ebr_price            double precision;

begin
    /*Shay's algorithm returns a list of possible leg pairs + leg_type (main_freight, linehaul, second_leg) and pricing period (weekly, monthly, quarterly) 
for each leg (gpm_calculated_routes_legs). Route can consist of 1 to 3 legs (main freight, or main freight + linehaul/secong leg, or main freight + 2 legs)
what about precarriage and oncarriage leg??
*/

--get route details
    select into v_origin_port, v_destination_port, v_origin_country, v_destination_country origin_port,
                                                                                           destination_port,
                                                                                           origin_country,
                                                                                           destination_country
    from prod.gpm_calculated_routes r
    where r.route_id = p_route_id;

    DROP TABLE IF EXISTS tmp_legs;
    DROP TABLE IF EXISTS tmp_charges;

    create TEMP TABLE tmp_legs as
        (select *
         from prod.gpm_calculated_routes_legs l
         where l.route_id = p_route_id);

    create TEMP TABLE tmp_charges
    (
        charge_id          serial,
        route_id           integer,
        charge_code        text COLLATE pg_catalog."default",
        charge_description text COLLATE pg_catalog."default",
        service_type_enum  text COLLATE pg_catalog."default",
        rate_per_unit      double precision,
        number_of_units    double precision,
        unit_type          text COLLATE pg_catalog."default",
        calculated_price   double precision,
        remarks            text COLLATE pg_catalog."default",
        calculation_notes  text COLLATE pg_catalog."default",
        currency           text COLLATE pg_catalog."default"
    );

    --main freight-------------------------------------------------------------------------------------------------------------------------------------
--look for the leg in air_main_freight table by POL and POD, leg_type = "main_freight" and pricing_period in (weekly, monthly, quarterly)
--price = main_carriage_price_per_kg * p_weight_kg
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select p_route_id,
           'code?',
           'Main Freight',
           'enum',
           mf.main_carriage_price_per_kg,
           p_weight_kg,
           'kg',
           main_carriage_price_per_kg * p_weight_kg,
           mf.remarks ||
           E'\r\n' || 'Pricing: ' || t.pricing_period ||
           '. Valid from ' || cast(mf.valid_from_date as date) || ' to ' || cast(mf.valid_to_date as date) ||
           E'\r\nAirline: ' || mf.airline_text || '. Transit time: ' || mf.transit_time_hours || ' hours',

           'Main freight: ' || t.origin_airport || '-' || t.destination_airport || ': ' ||
           cast(round(cast(main_carriage_price_per_kg as numeric), 2) as text) || ' ' || freight_currency || ' * ' ||
           cast(p_weight_kg as text) || ' kg = ' ||
           cast(round(cast(main_carriage_price_per_kg * p_weight_kg as numeric), 2) as text) || ' ' || freight_currency,
           freight_currency
    from tmp_legs t
             inner join prod.air_main_freight mf
                        on t.origin_airport = mf.origin_gateway_airport_code
                            and t.destination_airport = mf.dest_gateway_airport_code
                            and t.pricing_period = mf.pricing_period
    where t.leg_type = 'main_freight';

--FUEL and SECURITY sucharges------------------------------------------------
    SELECT INTO v_fsc_min_price, v_fsc_per_kg, v_ssc_min_price, v_ssc_per_kg mf.fsc_min_price,
                                                                             mf.fsc_per_kg,
                                                                             mf.ssc_min_price,
                                                                             mf.ssc_per_kg
    from tmp_legs t
             inner join prod.air_main_freight mf
                        on t.origin_airport = mf.origin_gateway_airport_code
                            and t.destination_airport = mf.dest_gateway_airport_code
                            and t.pricing_period = mf.pricing_period
    where t.leg_type = 'main_freight';

--update main freight price (add sucharges)
    update tmp_charges
    set calculated_price  = c.calculated_price + greatest(v_fsc_per_kg * p_weight_kg, v_fsc_min_price) +
                            greatest(v_ssc_per_kg * p_weight_kg, v_ssc_min_price),
        calculation_notes = c.calculation_notes
                                || E'\r\n' || 'Fuel sucharge: ' || cast(v_fsc_per_kg as text) || ' ' || c.currency ||
                            ' * ' || cast(p_weight_kg as text)
                                || ' kg = ' || cast(v_fsc_per_kg * p_weight_kg as text) || ' ' || c.currency
                                || '. Min: ' || cast(v_fsc_min_price as text) || ' ' || c.currency
                                --|| '. Fuel sucharge: ' || cast(greatest(v_fsc_per_kg * p_weight_kg, v_fsc_min_price) as text) || ' ' || c.currency

                                || E'\r\n' || 'Security sucharge: ' || cast(v_ssc_per_kg as text) || ' ' ||
                            c.currency || ' * ' || cast(p_weight_kg as text)
                                || ' kg = ' || cast(v_ssc_per_kg * p_weight_kg as text) || ' ' || c.currency
                                || '. Min: ' || cast(v_ssc_min_price as text) || ' ' || c.currency
        --|| '. Security sucharge: ' || cast(greatest(v_ssc_per_kg * p_weight_kg, v_ssc_min_price) as text) || ' ' || c.currency
    from tmp_charges c;

    --find minimum main freight----------------------------------------------------------------------------------
--find by countries
    select into v_main_freight_minimum m.margin_rate
    from tmp_legs t
             inner join prod.air_margins m
                        on m.origin_country_code = v_origin_country
                            and m.dest_country_code = v_destination_country
                            and m.air_type = 'fees'
                            and density_level = p_density
                            and service_level like p_service_level || '%' -- 'Economy%', 'Premium%', 'Priority%'
    where t.leg_type = 'main_freight';

--if not found, find by "agents"
    if v_main_freight_minimum is NULL then
        select into v_main_freight_minimum m.margin_rate
        from tmp_legs t
                 inner join prod.air_margins m
                            on t.origin_country = m.origin_country_code
                                and m.dest_country_code = 'agents'
                                and m.air_type = 'fees'
                                and density_level = p_density
                                and service_level like p_service_level || '%' -- 'Economy%', 'Premium%', 'Priority%'
        where t.leg_type = 'main_freight';
    end if;

    if v_main_freight_minimum is NULL then
        select into v_main_freight_minimum 0;
    end if;

--update main freight price (add minimum)
    update tmp_charges
    set calculated_price  = greatest(c.calculated_price, v_main_freight_minimum),
        calculation_notes = c.calculation_notes
                                || E'\r\n' || 'Main freight minimum: ' || cast(v_main_freight_minimum as text) || ' ' ||
                            c.currency
    from tmp_charges c;

--find weight break-----------------------------------------------------------
    select into v_weight_break_rate "rate"
    from prod.air_weight_break
    where p_weight_kg between from_weight and to_weight;

--update main freight price (add weight break)
    update tmp_charges
    set calculated_price  = c.calculated_price + v_weight_break_rate * p_weight_kg,
        calculation_notes = c.calculation_notes
                                || E'\r\n' || 'Weight break: ' || cast(v_weight_break_rate as text) || ' ' ||
                            c.currency || ' * ' || cast(p_weight_kg as text)
                                || ' kg = ' || cast(v_weight_break_rate * p_weight_kg as text) || ' ' || c.currency
                                || E'\r\n' || 'Total main freight: ' ||
                            cast(c.calculated_price + v_weight_break_rate * p_weight_kg as text) || ' ' || c.currency
                                || E'\r\n' || 'Remarks: ' || c.remarks
    from tmp_charges c;

--service level charges------------------------------------------------------------------------------------------------------------------------------------------
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select p_route_id,
           'code?',
           'Service Level: ' || m.service_level,
           'enum',
           margin_rate,
           case margin_charge
               when 'dollar' then p_weight_kg
               when 'percent' then 1
               else '999999'
               end, --as number_of_units
           margin_charge,
           case margin_charge
               when 'dollar' then p_weight_kg * margin_rate
               when 'percent' then c.calculated_price * margin_rate / 100
               else '999999'
               end, --as calculated_price
           '',
           --'Service level: ' || m.service_level || ': ' ||
           case margin_charge
               when 'dollar' then cast(p_weight_kg as text) || ' kg * ' ||
                                  cast(round(cast(margin_rate as numeric), 2) as text) || ' USD'
                                      || ' = ' || cast(p_weight_kg * margin_rate as text) || ' USD'
               when 'percent' then cast(c.calculated_price as text) || ' USD * ' || cast(margin_rate as text) || '% = '
                                       || cast(c.calculated_price * margin_rate / 100 as text) || ' USD'
               else 'should be dollar or percent'
               end,
           'USD'
    from tmp_legs t
             inner join tmp_charges c
                        on c.route_id = p_route_id
             inner join prod.air_margins m
                        on t.origin_country = m.origin_country_code
                            and t.destination_country = m.dest_country_code
                            and m.air_type = 'density'
                            and density_level = p_density
                            and service_level like p_service_level || '%' -- 'Economy%', 'Premium%', 'Priority%'
         --and service_level = 'Economy 120-168hrs' --include all three levels and then generate 3 offers in python?
    where t.leg_type = 'main_freight'
    order by margin_rate;

    --temporary for testing - total main freight
/*update tmp_charges
set calculation_notes = c.calculation_notes 
	|| E'\r\n' || 'TOTAL MAIN FREIGHT: ' || cast(round(cast(c.calculated_price as numeric), 2) as text)
from tmp_charges c;*/

--second leg-----------------------------------------------------------------------------------------------------------------------------------------
/*
if there is a leg in the list of leg pairs that is marked as "second_leg":
    look for the rate in air_main_freight table by POL and POD and leg_type = 'second_leg'
  	look for the minimum in air_margins with air_type = "fees" by airport code (or country if not found) ??
*/

    IF exists(select leg_id from tmp_legs where leg_type = 'second_leg') THEN
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Second Leg',
               'enum',
               mf.main_carriage_price_per_kg,
               p_weight_kg,
               '?',
               coalesce(mf.main_carriage_price_per_kg, 0) * p_weight_kg,
               '',
               --'Second leg: '|| 
               t.origin_airport || '-' || t.destination_airport || ': ' ||
               cast(coalesce(mf.main_carriage_price_per_kg, 0) as text) || ' USD * ' || cast(p_weight_kg as text) ||
               ' kg = ' ||
               cast(coalesce(mf.main_carriage_price_per_kg, 0) * p_weight_kg as text),
               'USD'
        from tmp_legs t
                 inner join prod.air_main_freight mf
                            on t.origin_airport = mf.origin_gateway_airport_code
                                and t.destination_airport = mf.dest_gateway_airport_code
        where leg_type = 'second_leg'
          and mf.pricing_period = 'second_leg';
    END IF;

    /*update tmp_charges
set calculated_price = c.calculated_price + v_second_leg_rate * p_weight_kg, 
calculation_notes = c.calculation_notes 
	|| E'\r\n' || 'SECOND LEG: ' || 
		cast(v_second_leg_rate as text) || ' * ' || cast(p_weight_kg as text) || ' = ' || 
		cast(v_second_leg_rate * p_weight_kg as text)
from tmp_charges c;*/

--linehaul-----------------------------------------------------------------------------------------------------------------------------------------
    IF exists(select leg_id from tmp_legs where leg_type = 'linehaul') THEN
        --need type: origin or destination linehaul?

--origin linehaul
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Linehaul',
               'enum',
               l.origin_linehaul_per_kg,
               p_weight_kg,
               'kg',
               greatest(l.origin_linehaul_per_kg * p_weight_kg, l.origin_linehaul_min),
               origin_remarks,
               --'Linehaul: ' || 
               t.origin_airport || '-' || t.destination_airport || ': ' ||
               cast(l.origin_linehaul_per_kg as text) || ' ' || l.currency || ' * ' || cast(p_weight_kg as text) ||
               ' kg ' || ' = ' ||
               cast(l.origin_linehaul_per_kg * p_weight_kg as text) || ' ' || l.currency ||
               '. Min: ' || cast(l.origin_linehaul_min as text) || ' ' || l.currency ||
               E'\r\nTransit time: ' || l.transit_time_to_gateway_hours || ' hours' ||
               E'\r\nRemarks: ' || origin_remarks,
               l.currency
        from tmp_legs t
                 inner join prod.air_linehaul l --origin linehaul
                            on t.origin_airport = l.origin_airport_code
                                and t.destination_airport = l.origin_gateway
        where leg_type = 'linehaul';

        --hub
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Linehaul Hub',
               'enum',
               l.gateway_hub_cost_per_kg,
               p_weight_kg,
               'kg',
               greatest(l.gateway_hub_cost_per_kg * p_weight_kg, l.gateway_hub_cost_min),
               origin_remarks,
               --'Linehaul hub: ' || 
               t.origin_airport || '-' || t.destination_airport || ': ' ||
               cast(l.gateway_hub_cost_per_kg as text) || ' ' || l.currency || ' * ' || cast(p_weight_kg as text) ||
               ' kg ' || ' = ' ||
               cast(l.gateway_hub_cost_per_kg * p_weight_kg as text) || ' ' || l.currency ||
               '. Min: ' || cast(l.gateway_hub_cost_min as text) || ' ' || l.currency || '. Remarks: ' ||
               origin_remarks,
               l.currency
        from tmp_legs t
                 inner join prod.air_linehaul l --origin linehaul
                            on t.origin_airport = l.origin_airport_code
                                and t.destination_airport = l.origin_gateway
        where t.leg_type = 'linehaul'
          and t.hub = true;
    END IF;

--pre-carriage-------------------------------------------------------------------------------------------------------------------------------------
    IF p_service_type in ('DTP', 'DTD') THEN
        --there are 2 options for calculating EBR charge------------------------------------------------------------------------
        --1. if unit="lump sum" then EBR price = ratePerUnit
        --2. if comment<>"Based on EBR" and unit="kg" then EBR price = ratePerUnit * weight_kg / 167 * ratio
        select into v_number_of_units, v_ebr_ratio, v_carriage_currency, v_ebr_price case
                                                                                         when pre.unit = 'lump sum'
                                                                                             then 1
                                                                                         else round(cast(p_weight_kg / 167 * pre."ratio" as numeric), 2)
                                                                                         end, -- number of units 
                                                                                     pre."ratio",
                                                                                     pre."currency",
                                                                                     case
                                                                                         when pre.unit = 'lump sum'
                                                                                             then least(greatest(pre."price", "min"), "max")
                                                                                         else least(
                                                                                                 greatest(pre."price" * p_weight_kg / 167 * pre."ratio", "min"),
                                                                                                 "max")
                                                                                         end  --ebr price
        from prod.air_pre_on_carriage pre
        where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --port of loading
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

        --add pre-carriage EBR charge to tmp_charges
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Pre Carriage EBR',
               'enum',
               pre."price",
               v_number_of_units,
               'kg',
               v_ebr_price,
               pre.comment,
               --'PRE CARRIAGE EBR: ' || 
               p_pickup_code || '-' || v_origin_port || ': ' ||
               case
                   when pre.unit = 'lump sum'
                       then cast(pre."price" as text) || ' ' || pre.currency || ' lump sum'
                   else
                                                   cast(pre."price" as text) || ' ' || pre.currency || ' * ' ||
                                                   cast(p_weight_kg as text) || ' kg / 167 * ' ||
                                                   cast(pre.ratio as text)
                                       || ' = ' || cast(pre."price" * p_weight_kg / 167 * pre."ratio" as text) || ' ' ||
                                                   pre.currency
                   end
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency
                   || ', max=' || cast(pre."max" as text) || ' ' || pre.currency || '. '
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
        where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --'PEN'-- port of loading
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

        --there are 3 options for calculating MSR charge------------------------------------------------------------------------
        --1. if unit="lump sum" then ebr/MSR/ssr price = ebr_price + ratePerUnit * 1
        --2. if comment="Based on EBR" and unit="kg" then MSR/ssr price = ebr_price + ratePerUnit * weight_kg / 167 * ebr_ratio
        --3. if comment<>"Based on EBR" and unit="kg" then ebr/MSR/ssr price = ratePerUnit * weight_kg / 167 * ratio

        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'Pre Carriage ' || upper(pre."type"),
               'enum',
               pre."price",
               case
                   when pre.unit = 'lump sum' then 1
                   when pre.ratio = 0 and unit = 'kg'
                       then pre."price" * p_weight_kg / 167 * v_ebr_ratio --comment = 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'kg'
                       then pre."price" * p_weight_kg / 167 * pre.ratio -- comment <> 'Based on EBR'
                   else 0 --value not expected
                   end, -- number of units 
               'kg',
               case
                   when pre.unit = 'lump sum' then least(
                           greatest(v_ebr_price + pre."price" / coalesce(cur."rate", 1), pre."min"), pre."max")
                   when pre.ratio = 0 and unit = 'kg' then least(greatest(v_ebr_price +
                                                                          pre."price" / coalesce(cur."rate", 1) * p_weight_kg / 167 * v_ebr_ratio,
                                                                          pre."min"),
                                                                 pre."max") --comment = 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'kg' then least(
                           greatest(pre."price" / coalesce(cur."rate", 1) * p_weight_kg / 167 * pre.ratio, pre."min"),
                           pre."max") -- comment <> 'Based on EBR'
                   else 0 --value not expected
                   end, -- calculated_price
               pre.comment,

               case
                   when pre.unit = 'lump sum' then
                                           cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                           cast(pre."price" as text) || ' ' || pre.currency || ' (lump sum)' ||
                                           case
                                               when coalesce(cur."rate", 1) <> 1
                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                               else '' end
                   when pre.ratio = 0 and unit = 'kg' then
                                                                       cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                                                       cast(pre."price" as text) || ' ' ||
                                                                       pre.currency || --' USD' --
                                                                       case
                                                                           when coalesce(cur."rate", 1) <> 1
                                                                               then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                                           else '' end
                                                       || ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' ||
                                                                       cast(v_ebr_ratio as text) || ' = '
                                   || cast(v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"),
                                                               pre."max") as text) || ' ' || pre.currency
                   when pre.ratio <> 0 and unit = 'kg' then
                                                           cast(pre."price" as text) || ' ' || pre.currency ||
                                                           case
                                                               when coalesce(cur."rate", 1) <> 1
                                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                               else '' end
                                                       || ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' ||
                                                           cast(pre.ratio as text) || ' = '
                                   || cast(pre."price" * p_weight_kg / 167 * pre.ratio as text) || ' ' || pre.currency
                   else 'value not expected'
                   end -- calculation_notes
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency --|| ' USD' --
                   || ', max=' || cast(pre."max" as text) || ' ' || pre.currency || '. ' --|| ' USD. ' --
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
                 left join mrr.usd_currency cur
                           on cur.code = v_carriage_currency and pre.currency = 'USD'
        where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
          and pre."type" in ('msr', 'ssr')
          --and ratio = 0 --Based on EBR
          --and unit = 'kg'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';


        /*
	--raise notice 'v_ratio: %', v_ratio;
	if v_ebr_ratio is not null then
	
		--add precarriage EBR charge to tmp_charges
		insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit, number_of_units, 
								 unit_type, calculated_price, remarks, calculation_notes, currency)
		select p_route_id, 'code?', 'Pre Carriage EBR', 'enum', pre."price", v_number_of_units, 
								'kg', v_ebr_price, pre.comment, 
								--'Pre carriage EBR: ' || 
								p_pickup_code || '-' || v_origin_port || ': ' 
								|| E'\r\n' || cast(pre."price" as text) || ' ' || pre.currency  || ' * ' 
								|| cast(p_weight_kg as text) || ' kg / 167 * ' || cast(pre.ratio as text) || ' = ' 
								|| cast(pre."price" * p_weight_kg / 167 * pre."ratio" as text) || ' ' || pre.currency
								|| E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency || ', max=' || cast(pre."max" as text) || ' ' || pre.currency 
								|| E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' || cast(pre.valid_to_date as date)
								|| E'\r\nRemarks: ' || pre.comment,
								pre.currency
		from prod.air_pre_on_carriage pre
		where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
				or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
		and pre."loc_port" = v_origin_port --'PEN'-- port of loading
		and pre."type" = 'ebr' 
		and p_weight_kg between pre.from_weight and pre.to_weight
		and pre."carriage" = 'pre';

		--there are 3 options for calculating MSR/SSR charge------------------------------------------------------------------------
		--1. if comment="Based on EBR" (ratio = 0) and unit="kg" then MSR/SSR price = ebr_price + ratePerUnit * weight_kg / 167 * ratio 
		--2. if comment="Based on EBR" (ratio = 0) and unit="lump sum" then MSR/SSR price = ebr_price + ratePerUnit * 1
		--3. if comment<>"Based on EBR" (ratio <> 0) then MSR/SSR price = ratePerUnit * weight_kg / 167 * ratio --"R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280, "No Comment" - 167

		--1. add precarriage MSR & SSR charges if unit="kg" then msr_or_ssr_price = ebr_price + price * v_number_of_units
		insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit, number_of_units, 
								 unit_type, calculated_price, remarks, calculation_notes, currency)
		select p_route_id, 'code?', 'Pre Carriage ' || upper(pre."type"), 'enum', pre."price", v_number_of_units,
								'kg', v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"), pre."max"), 
								pre.comment, 
								--'Pre carriage '  || upper(pre."type") || ': '
								cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' || cast(pre."price" as text) || ' ' || v_carriage_currency 
								|| ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' || cast(v_ratio as text) || ' = ' 
								|| cast(v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"), pre."max") as text) || ' ' || v_carriage_currency
								|| E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency 
								|| ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
								|| E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' || cast(pre.valid_to_date as date)
								|| E'\r\nRemarks: ' || pre.comment,
								v_carriage_currency
		from prod.air_pre_on_carriage pre
		where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
				or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
		and pre."loc_port" = v_origin_port --'PDX'-- port of loading
		and pre."type" in ('msr', 'ssr') 
		and ratio = 0 --Based on EBR
		and unit = 'kg'
		and pre."carriage" = 'pre';

		--2. add precarriage MSR/SSR charge: if comment="Based on EBR" (ratio = 0) and unit="lump sum" 
		--   then MSR/SSR price = ebr_price + ratePerUnit * 1
		insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit, number_of_units, 
								 unit_type, calculated_price, remarks, calculation_notes, currency)
		select p_route_id, 'code?', 'Pre Carriage ' || upper(pre."type"), 'enum', pre."price", 1 as number_of_units,
								'kg', v_ebr_price + price * 1 as calculated_price,
								pre.comment, 
								--'Pre carriage ' || upper(pre."type") || ': ' ||
								cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' 
								|| cast(pre."price" as text) || ' ' || v_carriage_currency || ' * 1 = ' 
								|| cast((v_ebr_price + pre."price") as text) || ' ' || v_carriage_currency
								|| E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' || cast(pre.valid_to_date as date)
								|| E'\r\nRemarks: ' || pre.comment,
								v_carriage_currency
		from prod.air_pre_on_carriage pre
		where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
				or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
		and pre."loc_port" = v_origin_port --'PDX'-- port of loading
		and pre."type" in ('msr', 'ssr') 
		and ratio = 0 --Based on EBR
		and unit = 'lump sum'
		and pre."carriage" = 'pre';

		--3. add precarriage MSR/SSR charge if comment<>"Based on EBR" (ratio <> 0) then MSR/SSR price = ratePerUnit * weight_kg / 167 * ratio --"R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280, "No Comment" - 167
		insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit, number_of_units, 
								 unit_type, calculated_price, remarks, calculation_notes, currency)
		select p_route_id, 'code?', 'Pre Carriage ' || upper(pre."type"), 'enum', pre."price", v_number_of_units, 
								'kg', least(greatest(pre."price" * v_number_of_units, "min"), "max"), pre.comment, 
								--'Pre carriage ' || upper(pre."type") || ': ' ||
								cast(pre."price" as text) || ' ' || v_carriage_currency || ' * ' || cast(p_weight_kg as text) 
								|| ' kg / 167 * ' || cast(v_ratio as text) || ' = '
								|| cast((least(greatest(pre."price" * v_number_of_units, "min"), "max")) as text) || ' ' || v_carriage_currency
								|| E'\r\nMin: ' || cast(pre."min" as text) || ' ' || v_carriage_currency 
								|| ', max=' || cast(pre."max" as text) || ' ' || v_carriage_currency || '. '
								|| E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' || cast(pre.valid_to_date as date)
								|| E'\r\nRemarks: ' || pre.comment,
								v_carriage_currency
		from prod.air_pre_on_carriage pre
		where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
				or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
		and pre."loc_port" = v_origin_port --'PDX'-- port of loading
		and ratio <> 0 --"No Comment" - 0, "R: 167 kg = 1 cbm" - 167, "R: 280 kg = 1 cbm" - 280
		and pre."type" in ('msr', 'ssr')  
		and p_weight_kg between pre.from_weight and pre.to_weight
		and pre."carriage" = 'pre';
*/

        --add precarriage IFS charge to tmp_charges (use the same number of units and ratio as EBR)
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select distinct p_route_id,
                        'code?',
                        'Pre Carriage IFS',
                        'enum',
                        pre."price",
                        v_number_of_units,
                        'kg',
                        pre."price" * v_ebr_price / 100,
                        pre.comment,
                        --'Pre carriage IFS: ' ||
                        cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' * ' || cast(pre."price" as text)
                            || ' % = ' || cast(pre."price" / 100 * v_ebr_price as text) || ' ' || v_carriage_currency
                            || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                        cast(pre.valid_to_date as date)
                            || E'\r\nRemarks: ' || pre.comment,
                        v_carriage_currency
        from prod.air_pre_on_carriage pre
        where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
          and pre."type" = 'ifs'
          and pre."carriage" = 'pre';
    end if;
    --END IF;
--select * from prod.air_calculate(2, 500, '1:3', 'DTD', 'A1', 'KUM', null) --case 87

--on-carriage-------------------------------------------------------------------------------------------------------------------------------------
    IF p_service_type in ('PTD', 'DTD') THEN
        --there are 2 options for calculating EBR charge------------------------------------------------------------------------
        --1. if unit="lump sum" then EBR price = ratePerUnit
        --2. if comment<>"Based on EBR" and unit="kg" then EBR price = ratePerUnit * weight_kg / 167 * ratio
        select into v_number_of_units, v_ebr_ratio, v_carriage_currency, v_ebr_price case
                                                                                         when pre.unit = 'lump sum'
                                                                                             then 1
                                                                                         else round(cast(p_weight_kg / 167 * pre."ratio" as numeric), 2)
                                                                                         end, -- number of units 
                                                                                     pre."ratio",
                                                                                     pre."currency",
                                                                                     case
                                                                                         when pre.unit = 'lump sum'
                                                                                             then least(greatest(pre."price", "min"), "max")
                                                                                         else least(
                                                                                                 greatest(pre."price" * p_weight_kg / 167 * pre."ratio", "min"),
                                                                                                 "max")
                                                                                         end  --ebr price
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'on';

        --raise notice 'v_ratio: %', v_ratio;
        --if v_ratio is not null then

        --add oncarriage EBR charge to tmp_charges
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'On Carriage EBR',
               'enum',
               pre."price",
               v_number_of_units,
               'kg',
               v_ebr_price,
               pre.comment,
               --'ON CARRIAGE EBR: ' || 
               v_destination_port || '-' || p_delivery_code || ':  ' ||
               case
                   when pre.unit = 'lump sum'
                       then cast(pre."price" as text) || ' ' || pre.currency || ' lump sum'
                   else
                                                   cast(pre."price" as text) || ' ' || pre.currency || ' * ' ||
                                                   cast(p_weight_kg as text) || ' kg / 167 * ' ||
                                                   cast(pre.ratio as text)
                                       || ' = ' || cast(pre."price" * p_weight_kg / 167 * pre."ratio" as text) || ' ' ||
                                                   pre.currency
                   end
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency
                   || ', max=' || cast(pre."max" as text) || ' ' || pre.currency || '. '
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" = 'ebr'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'on';

        --there are 3 options for calculating MSR charge------------------------------------------------------------------------
        --1. if unit="lump sum" then ebr/MSR/ssr price = ebr_price + ratePerUnit * 1
        --2. if comment="Based on EBR" and unit="kg" then MSR/ssr price = ebr_price + ratePerUnit * weight_kg / 167 * ebr_ratio
        --3. if comment<>"Based on EBR" and unit="kg" then ebr/MSR/ssr price = ratePerUnit * weight_kg / 167 * ratio

        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select p_route_id,
               'code?',
               'On Carriage ' || upper(pre."type"),
               'enum',
               pre."price",
               case
                   when pre.unit = 'lump sum' then 1
                   when pre.ratio = 0 and unit = 'kg'
                       then pre."price" * p_weight_kg / 167 * v_ebr_ratio --comment = 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'kg'
                       then pre."price" * p_weight_kg / 167 * pre.ratio -- comment <> 'Based on EBR'
                   else 0 --value not expected
                   end, -- number of units 
               'kg',
               case
                   when pre.unit = 'lump sum' then least(
                           greatest(v_ebr_price + pre."price" / coalesce(cur."rate", 1), pre."min"), pre."max")
                   when pre.ratio = 0 and unit = 'kg' then least(greatest(v_ebr_price +
                                                                          pre."price" / coalesce(cur."rate", 1) * p_weight_kg / 167 * v_ebr_ratio,
                                                                          pre."min"),
                                                                 pre."max") --comment = 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'kg' then least(
                           greatest(pre."price" / coalesce(cur."rate", 1) * p_weight_kg / 167 * pre.ratio, pre."min"),
                           pre."max") -- comment <> 'Based on EBR'
                   else 0 --value not expected
                   end, -- calculated_price
               pre.comment,

               case
                   when pre.unit = 'lump sum' then
                                           cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                           cast(pre."price" as text) || ' ' || pre.currency || ' (lump sum)' ||
                                           case
                                               when coalesce(cur."rate", 1) <> 1
                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                               else '' end
                   when pre.ratio = 0 and unit = 'kg' then
                                                                       cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                                                       cast(pre."price" as text) || ' ' ||
                                                                       pre.currency || --' USD' --
                                                                       case
                                                                           when coalesce(cur."rate", 1) <> 1
                                                                               then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                                           else '' end
                                                       || ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' ||
                                                                       cast(v_ebr_ratio as text) || ' = '
                                   || cast(v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"),
                                                               pre."max") as text) || ' ' || pre.currency
                   when pre.ratio <> 0 and unit = 'kg' then
                                                           cast(pre."price" as text) || ' ' || pre.currency ||
                                                           case
                                                               when coalesce(cur."rate", 1) <> 1
                                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                               else '' end
                                                       || ' * ' || cast(p_weight_kg as text) || ' kg / 167 * ' ||
                                                           cast(pre.ratio as text) || ' = '
                                   || cast(pre."price" * p_weight_kg / 167 * pre.ratio as text) || ' ' || pre.currency
                   else 'value not expected'
                   end -- calculation_notes
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency --|| ' USD' --
                   || ', max=' || cast(pre."max" as text) || ' ' || pre.currency || '. ' --|| ' USD. ' --
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.air_pre_on_carriage pre
                 left join mrr.usd_currency cur
                           on cur.code = v_carriage_currency and pre.currency = 'USD'
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" in ('msr', 'ssr')
          --and ratio = 0 --Based on EBR
          --and unit = 'kg'
          and p_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'on';


        --add oncarriage IFS charge to tmp_charges (use the same number of units and ratio as EBR)
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select distinct p_route_id,
                        'code?',
                        'On Carriage IFS Charge',
                        'enum',
                        pre."price",
                        v_number_of_units,
                        'kg',
                        pre."price" / 100 * v_ebr_price,
                        pre.comment,
                        cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' * ' || cast(pre."price" as text)
                            || ' % = ' || cast(pre."price" / 100 * v_ebr_price as text) || ' ' || v_carriage_currency
                            || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                        cast(pre.valid_to_date as date)
                            || E'\r\nRemarks: ' || pre.comment,
                        v_carriage_currency
        from prod.air_pre_on_carriage pre
        where pre.via_loc_port = v_destination_port --port of discharge
          and (right(pre."loc_port", 3) = p_delivery_code -- use delivery address city code --'ZHQ' --
            or pre.loc like p_delivery_code || '%')
          and pre."type" = 'ifs'
          and pre."carriage" = 'on';

    END IF;

    --local charges ------------------------------------------------------------------------------------------------------------------------------------
--origin charges
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select p_route_id,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate,                          --rate per unit
           case c.unit
               when 'Per doc' then 1
               when 'Per kg' then p_weight_kg
               else 0
               end,                         --number of units
           c.unit,
           case c.unit
               when 'Per doc' then c.rate
               when 'Per kg' then greatest(p_weight_kg * c.rate, c.min)
               else 0
               end,                         --calculated_price
           c.remarks,
           --'ORIGIN CHARGE: ' || 
           --c.charge_code || ' - ' || c.charge_name || ': ' || 
           case c.unit
               when 'Per doc' then
                   cast(c.rate as text) || ' ' || c."Currency" || ' per doc ' || E'\r\n'
               when 'Per kg' then
                                                               cast(c.rate as text) || ' ' || c."Currency" || ' * ' ||
                                                               cast(p_weight_kg as text) || ' kg '
                                                       || ' = ' || cast(p_weight_kg * c.rate as text) || ' ' ||
                                                               c."Currency" || '. Min: ' || cast(c.min as text) ||
                                                               ' ' || c."Currency" || E'\r\n'
               when '0' then ''
               end ||
           case
               when c.charge_code = '100317'
                   then 'Transit time: ' || c.hour || ' hours' || E'\r\n'
               else ''
               end
               || 'Remarks: ' || c.remarks, --calculation_notes
           c."Currency"
    from prod.air_local_charges c
    where (c."Airport" = v_origin_port or (c."Country" = v_origin_country and c."Airport" = 'All'))
      and ((c."tier" = 'A' and c."type" = 'origin' and p_tier like 'A%') or
           (c."tier" = 'B' and c."type" in ('origin', 'general') and p_tier like 'B%'));

--destination charges
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select p_route_id,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate,                          --rate per unit
           case c.unit
               when 'Per doc' then 1
               when 'Per kg' then p_weight_kg
               else 0
               end,                         --number of units
           c.unit,
           case c.unit
               when 'Per doc' then c.rate
               when 'Per kg' then greatest(p_weight_kg * c.rate, c.min)
               else 0
               end,                         --calculated_price
           c.remarks,
           --c.charge_code || ' - ' || c.charge_name || ': ' || 
           case c.unit
               when 'Per doc' then
                   cast(c.rate as text) || ' ' || c."Currency" || ' per doc ' || E'\r\n'
               when 'Per kg' then
                                                               cast(c.rate as text) || ' ' || c."Currency" || ' * ' ||
                                                               cast(p_weight_kg as text) || ' kg '
                                                       || ' = ' || cast(p_weight_kg * c.rate as text) || ' ' ||
                                                               c."Currency" || '. Min: ' || cast(c.min as text) ||
                                                               ' ' || c."Currency" || E'\r\n'
               when '0' then ''
               end ||
           case
               when c.charge_code = '100317'
                   then 'Transit time: ' || c.hour || ' hours' || E'\r\n'
               else ''
               end
               || 'Remarks: ' || c.remarks, --calculation_notes
           c."Currency"
    from prod.air_local_charges c
    where (c."Airport" = v_destination_port or (c."Country" = v_destination_country and c."Airport" = 'All'))
      and ((c."tier" = 'A' and c."type" = 'dest' and p_tier like 'A%') or
           (c."tier" = 'B' and c."type" in ('dest', 'general') and p_tier like 'B%'));

--add margins to CFS charges
    update tmp_charges
    set calculated_price  = tmp_charges.calculated_price + m.margin_rate * p_weight_kg,
        calculation_notes = tmp_charges.calculation_notes || E'\r\n'
                                || 'CFS margin: ' || cast(m.margin_rate as text) || ' ' || tmp_charges.currency ||
                            ' * ' || cast(p_weight_kg as text) || ' kg = ' ||
                            cast(m.margin_rate * p_weight_kg as text) || ' ' || tmp_charges.currency
        --|| '. TOTAL CHARGE: ' || cast((tmp_charges.calculated_price + m.margin_rate * p_weight_kg) as text)
    from prod.air_margins m
    where m."tier" = cast(right(p_tier, 1) as double precision) -- 1 or 2 
        and (m.origin_country_code = v_origin_country and m."type" = 'Origin' and tmp_charges.charge_code = '102253')--"Origin CFS Handling Fee"
       or (m.dest_country_code = v_destination_country and m."type" = 'Dest' and tmp_charges.charge_code = '107438')--"Destination CFS Handling Fee"
    ;

--MSR margin--------------------------------------------------------------------------------------------------------------------------------------------
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select p_route_id,
           'MSR',
           'Margins MSR',
           'enum',
           m.margin_rate,               --rate per unit
           p_weight_kg,                 --number of units
           '',
           m.margin_rate * p_weight_kg, --calculated_price
           '',                          --remarks
           --'MSR MARGIN: ' || 
           cast(m.margin_rate as text) || ' USD * ' || cast(p_weight_kg as text) || ' kg = ' ||
           cast(m.margin_rate * p_weight_kg as text) || ' USD',
           'USD'
    from prod.air_margins m
    where m."type" = 'ATA'
      and m.origin_country_code = v_origin_country
      and m.dest_country_code = v_destination_country
      and m.margin_type = 'MSR'
      and air_type = 'margins'
      and m."tier" = cast(right(p_tier, 1) as double precision);
    -- 1 or 2 

--SSR margin --------------------------------------------------------------------------------------------------------------------------------------------
    IF p_tier = 'B2' THEN
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                                 rate_per_unit,
                                 number_of_units,
                                 unit_type,
                                 calculated_price,
                                 remarks, calculation_notes, currency)
        select p_route_id,
               'SSR',
               'Margins SSR',
               'enum',
               m.margin_rate,               --rate per unit
               p_weight_kg,                 --number of units
               '',
               m.margin_rate * p_weight_kg, --calculated_price
               '',                          --remarks
               --'SSR MARGIN: ' || 
               cast(m.margin_rate as text) || ' USD * ' || cast(p_weight_kg as text) || ' = ' ||
               cast(m.margin_rate * p_weight_kg as text) || ' USD',
               'USD'
        from prod.air_margins m
        where m."type" = 'ATA'
          and m.origin_country_code = v_origin_country
          and m.dest_country_code = v_destination_country
          and m.margin_type = 'SSR'
          and air_type = 'margins';
    END IF;

    --select * from prod.air_calculate(1, 1000, '1:3', 'PTP', 'B1')
--select * from prod.air_calculate(2, 3000, '1:3', 'PTP', 'B1')

--return-------------------------------------------------------------------------------------------------------------------------------------------
    return query
        select --l.route_id, 
               l.charge_code,
               l.charge_description, --l.service_type_enum, 
               --l.rate_per_unit, l.number_of_units, l.unit_type, 
               l.calculated_price,
               l.currency,
               --l.remarks, 
               l.calculation_notes
        from tmp_charges l
        order by charge_id;

end;
$$;

alter function prod.gpm_air_calculate(integer, double precision, text, text, text, text, text, text) owner to "Postgresadmin";

create function prod.pricing_get_linehaul_more_info()
    returns TABLE
            (
                origin_port_linehaul         text,
                origin_gateway_linehaul      text,
                destination_gateway_linehaul text,
                destination_port_linehaul    text
            )
    language plpgsql
as
$$
BEGIN

    return query
        SELECT origin_airport_code      as origin_port_linehaul,
               origin_gateway           as origin_gateway_linehaul,
               dest_gateway             as destination_gateway_linehaul,
               destination_airport_code as destination_port_linehaul

        FROM prod.air_linehaul;
END;
$$;

alter function prod.pricing_get_linehaul_more_info() owner to "Postgresadmin";

create function prod.update_document_exsist(p_tenantid text, p_document_id uuid, p_stakeholderid text,
                                            p_stakeholdername text, p_documenttitle text, p_documentcategory text)
    returns TABLE
            (
                documentid uuid
            )
    language sql
as
$$
UPDATE prod.documents
SET stake_holder_id     = p_stakeholderId,
    stake_holder_name   = p_stakeholdername,
    "document_title"    = p_documentTitle,
    "document_category" = p_documentCategory
WHERE "tenantId" = p_tenantid
  and "documentId" = p_document_id

RETURNING "documentId";

$$;

alter function prod.update_document_exsist(text, uuid, text, text, text, text) owner to "Postgresadmin";

create function prod.gpm_lcl_calculate_shay(p_origin_city text, p_origin_country_code text, p_destination_city text,
                                            p_destination_country_code text, p_volume_cbm double precision,
                                            p_density text, p_service_type text, p_tier text, p_pickup_code text,
                                            p_delivery_code text, p_service_level text)
    returns TABLE
            (
                charge_code        text,
                charge_description text,
                calculated_price   double precision,
                currency           text,
                calculation_notes  text
            )
    language plpgsql
as
$$
DECLARE
    v_origin_port text;

begin
    --select * from prod.gpm_lcl_calculate('Shehnzen', 'CN','NEW YORK','US', 5, '1:3', 'PTP', 'B1', '', '', '')

    DROP TABLE IF EXISTS tmp_charges;

    create TEMP TABLE tmp_charges
    (
        charge_id          serial,
        route_id           integer,
        charge_code        text COLLATE pg_catalog."default",
        charge_description text COLLATE pg_catalog."default",
        service_type_enum  text COLLATE pg_catalog."default",
        rate_per_unit      double precision,
        number_of_units    double precision,
        unit_type          text COLLATE pg_catalog."default",
        calculated_price   double precision,
        remarks            text COLLATE pg_catalog."default",
        calculation_notes  text COLLATE pg_catalog."default",
        currency           text COLLATE pg_catalog."default"
    );
    /* main freight, local charges, margins, pre/on-carriage, IFS, LOT fee,

 */
--main freight-------------------------------------------------------------------------------------------------------------------------------------

    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select 0,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate_per_unit,
           p_volume_cbm,
           c.unit_type,
           greatest(c.rate_per_unit * p_volume_cbm, c.minimum),
           c.remarks ||
           E'\r\nValid from ' || cast(c.valid_from_date as date) || ' to ' || cast(c.valid_to_date as date) ||
           E'\r\nColoader: ' || c.coloader || '. Transit time: ' || c.trans_time || ' days',

           cast(round(cast(rate_per_unit as numeric), 2) as text) || ' ' || c.currency || ' * ' ||
           cast(p_volume_cbm as text) || c.unit_type || ' = ' ||
           cast(round(cast(rate_per_unit * p_volume_cbm as numeric), 2) as text) || ' ' || c.currency ||
           E'\r\nMinimum: ' || c.minimum || ' ' || c.currency,
           c.currency
    from prod.lcl_routing_matrix rm
             inner join prod.lcl_coloaders c
                        on c.coloader = rm.coloader
    where lower(rm.origin_city) = lower(p_origin_city)
      and lower(rm.origin_country_code) = lower(p_origin_country_code)
      and lower(rm.destination_city) = lower(p_destination_city)
      and lower(rm.destination_country_code) = lower(p_destination_country_code)
      and lower(rm.routing_type) = 'agreed routing';

    --local charges ------------------------------------------------------------------------------------------------------------------------------------
--origin charges
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select 0,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate_per_unit,                                 --rate per unit
           p_volume_cbm,                                    --number of units
           c.unit_type,
           greatest(p_volume_cbm * c.rate_per_unit, c.min), --calculated_price
           c.remarks,
           --case c.unit_type
           --	when 'Per doc' then
           --		cast(c.rate as text) || ' ' || c.charge_currency || ' per doc '
           --	when 'Per kg' then
           cast(c.rate_per_unit as text) || ' ' || c.charge_currency || ' * ' || cast(p_volume_cbm as text) || ' cbm '
               || ' = ' || cast(p_volume_cbm * c.rate_per_unit as text) || ' ' || c.charge_currency
               || '. Min: ' || cast(c.min as text) || ' ' || c.charge_currency
               --when '0' then cast(0 as text)
               --end
               || E'\r\nRemarks: ' || c.remarks,            --calculation_notes
           c.charge_currency
    from prod.lcl_local_charges c
    where charge_type = 'origin'
      and (c.port_location = p_origin_city or c.port_location = p_origin_country_code)
      and (c.other_location = p_destination_city or c.other_location = p_destination_country_code)
      and ((p_tier = 'B2' and term = 'short') or (p_tier = 'A1' and term = 'long'));

--return-------------------------------------------------------------------------------------------------------------------------------------------
    return query
        select --l.route_id,
               l.charge_code,
               l.charge_description, --l.service_type_enum,
               --l.rate_per_unit, l.number_of_units, l.unit_type,
               l.calculated_price,
               l.currency,
               --l.remarks,
               l.calculation_notes
        from tmp_charges l
        order by charge_id;

end;

$$;

alter function prod.gpm_lcl_calculate_shay(text, text, text, text, double precision, text, text, text, text, text, text) owner to "Postgresadmin";

create function prod.get_document_route_date(p_tenant_id text, p_document_serial integer,
                                             p_date timestamp without time zone)
    returns TABLE
            (
                "routeId"       integer,
                document_serial integer,
                document_type   text,
                received_date   timestamp without time zone,
                route_name      text
            )
    language sql
as
$$
SELECT DISTINCT d2."routeId"         as "routeId",
                d2."document_serial" as "document_serial",
                d."document_type"    as "document_type",
                d."received_date"    as "received_date",
                d2."route_name"      as "route_name"
FROM prod."documents" d,
     prod."document_routes" d2
WHERE d2."tenantId" = p_tenant_id
  AND d2."document_serial" = p_document_serial;

$$;

alter function prod.get_document_route_date(text, integer, timestamp) owner to "Postgresadmin";

create function prod.gpm_lcl_calculate(p_origin_city text, p_origin_country_code text, p_destination_city text,
                                       p_destination_country_code text, p_chargeable_weight_kg double precision,
                                       p_volume_cbm double precision, p_density text, p_service_type text, p_tier text,
                                       p_pickup_code text, p_delivery_code text, p_service_level text)
    returns TABLE
            (
                charge_code        text,
                charge_description text,
                calculated_price   double precision,
                currency           text,
                calculation_notes  text
            )
    language plpgsql
as
$$
DECLARE
    v_origin_port          text;
    v_destination_port     text;
    v_origin_country       text;
    v_destination_country  text;
    v_fsc_min_price        double precision;
    v_fsc_per_kg           double precision;
    v_ssc_min_price        double precision;
    v_ssc_per_kg           double precision;
    v_weight_break_rate    double precision;
    v_main_freight_minimum double precision;
    v_number_of_units      double precision;
    v_ebr_ratio            integer;
    v_carriage_currency    text;
    v_ebr_price            double precision;
    v_other_buy_prices     text;
begin
    --select * from prod.gpm_lcl_calculate('SHANGHAI', 'CN','NEW YORK','US', 10, 5, '1:3', 'DTP', 'B1', 'CNBEI', '', '')

    select into v_origin_port 'CNSZH';

    DROP TABLE IF EXISTS tmp_charges;

    create TEMP TABLE tmp_charges
    (
        charge_id          serial,
        route_id           integer,
        charge_code        text COLLATE pg_catalog."default",
        charge_description text COLLATE pg_catalog."default",
        service_type_enum  text COLLATE pg_catalog."default",
        rate_per_unit      double precision,
        number_of_units    double precision,
        unit_type          text COLLATE pg_catalog."default",
        calculated_price   double precision,
        remarks            text COLLATE pg_catalog."default",
        calculation_notes  text COLLATE pg_catalog."default",
        currency           text COLLATE pg_catalog."default"
    );
    /* main freight, local charges, margins, pre/on-carriage, IFS, LOT fee,

 */
--main freight-------------------------------------------------------------------------------------------------------------------------------------

    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select 0,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate_per_unit,
           p_volume_cbm,
           c.unit_type,
           greatest(c.rate_per_unit * p_volume_cbm, c.minimum),
           c.remarks ||
           E'\r\nValid from ' || cast(c.valid_from_date as date) || ' to ' || cast(c.valid_to_date as date) ||
           E'\r\nColoader: ' || c.coloader || '. Transit time: ' || c.trans_time || ' days',

           cast(round(cast(rate_per_unit as numeric), 2) as text) || ' ' || c.currency || ' * ' ||
           cast(p_volume_cbm as text) || c.unit_type || ' = ' ||
           cast(round(cast(rate_per_unit * p_volume_cbm as numeric), 2) as text) || ' ' || c.currency ||
           E'\r\nMinimum: ' || c.minimum || ' ' || c.currency,
           c.currency
    from prod.lcl_routing_matrix rm
             inner join prod.lcl_coloaders c
                        on lower(c.coloader) = lower(rm.coloader)
                            and lower(rm.origin_country_code) = lower(c.origin_country_code)
                            and lower(rm.origin_city) = lower(c.origin_city)
                            and lower(rm.destination_city) = lower(c.destination_city)
                            and lower(rm.destination_country_code) = lower(c.destination_country_code)
    where rm.origin_city = p_origin_city
      and rm.origin_country_code = p_origin_country_code
      and rm.destination_city = p_destination_city
      and rm.destination_country_code = p_destination_country_code
      and rm.routing_type = 'Agreed routing';

    --local charges ------------------------------------------------------------------------------------------------------------------------------------
--origin charges
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum,
                             rate_per_unit,
                             number_of_units,
                             unit_type,
                             calculated_price,
                             remarks, calculation_notes, currency)
    select 0,
           c.charge_code,
           c.charge_name,
           'enum',
           c.rate_per_unit,                                 --rate per unit
           p_volume_cbm,                                    --number of units
           c.unit_type,
           greatest(p_volume_cbm * c.rate_per_unit, c.min), --calculated_price
           c.remarks,
           --case c.unit_type 
           --	when 'Per doc' then 
           --		cast(c.rate as text) || ' ' || c.charge_currency || ' per doc ' 
           --	when 'Per kg' then 
           cast(c.rate_per_unit as text) || ' ' || c.charge_currency || ' * ' || cast(p_volume_cbm as text) || ' cbm '
               || ' = ' || cast(p_volume_cbm * c.rate_per_unit as text) || ' ' || c.charge_currency
               || '. Min: ' || cast(c.min as text) || ' ' || c.charge_currency
               --when '0' then cast(0 as text)
               --end 
               || E'\r\nRemarks: ' || c.remarks,            --calculation_notes
           c.charge_currency
    from prod.lcl_local_charges c
    where charge_type = 'origin'
      and (c.port_location = p_origin_city or c.port_location = p_origin_country_code)
      and (c.other_location = p_destination_city or c.other_location = p_destination_country_code)
      and ((p_tier = 'B2' and term = 'short') or (p_tier = 'A1' and term = 'long'));


--pre-carriage-------------------------------------------------------------------------------------------------------------------------------------
    IF p_service_type in ('DTP', 'DTD') THEN
        --there are 3 options for calculating EBR charge------------------------------------------------------------------------
        --1. if unit="lump sum" then EBR price = ratePerUnit
        --2. if comment<>"Based on EBR" and unit="kg" then EBR price = ratePerUnit * weight_kg / 167 * ratio
        --3. if unit="cbm" then EBR price = ratePerUnit * volume_cbm / 167 * ratio
        select into v_number_of_units, v_ebr_ratio, v_carriage_currency, v_ebr_price case
                                                                                         when pre.unit = 'lump sum'
                                                                                             then 1
                                                                                         when pre.unit = 'kg' then
                                                                                             round(cast(p_chargeable_weight_kg / 167 * pre."ratio" as numeric), 2)
                                                                                         when pre.unit = 'cbm' then
                                                                                             round(cast(p_volume_cbm / 167 * pre."ratio" as numeric), 2)
                                                                                         else -1
                                                                                         end, -- number of units 
                                                                                     pre."ratio",
                                                                                     pre."currency",
                                                                                     case
                                                                                         when pre.unit = 'lump sum' then
                                                                                             least(greatest(pre."price", "min"), "max")
                                                                                         when pre.unit = 'kg' then
                                                                                             least(greatest(
                                                                                                           pre."price" * p_chargeable_weight_kg / 167 * pre."ratio",
                                                                                                           "min"),
                                                                                                   "max")
                                                                                         when pre.unit = 'cbm' then
                                                                                             least(
                                                                                                     greatest(pre."price" * p_volume_cbm / 167 * pre."ratio", "min"),
                                                                                                     "max")
                                                                                         else -1
                                                                                         end  --ebr price
        from prod.lcl_pre_on_carriage pre
        where (right(pre.via_loc_port, 5) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --port of loading
          and pre."type" = 'ebr'
          and p_chargeable_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

--get all the other charges - 'tios', 'twg', 'tpic', 'tdel', and 'trocars', 'tadd', 'tcus', 'tcusb', 'thmh' (optional)
        select into v_other_buy_prices string_agg(pre."type" || ' freight expected buy: ' ||
                                                  case
                                                      when pre.unit = 'kg' then
                                                                              cast(pre."price" as text) || ' ' || pre.currency || ' * ' ||
                                                                              cast(p_chargeable_weight_kg as text) ||
                                                                              ' kg = ' ||
                                                                              cast(price * p_chargeable_weight_kg as text) ||
                                                                              ' ' || pre.currency
                                                      else '0'
                                                      end ||
                                                  case
                                                      when pre."type" in ('trocars', 'tadd', 'tcus', 'tcusb', 'thmh')
                                                          then ' (optional)'
                                                      else ''
                                                      end, E'\r\n')
        from prod.lcl_pre_on_carriage pre
        where (right(pre.via_loc_port, 5) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --port of loading
          and pre."type" not in ('ebr', 'msr', 'ssr', 'ifs')
          and p_chargeable_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

        --add pre-carriage EBR charge to tmp_charges
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select 0,
               'code?',
               'Pre Carriage EBR',
               'enum',
               pre."price",
               v_number_of_units,
               'kg',
               v_ebr_price,
               pre.comment,
               --'PRE CARRIAGE EBR: ' || 
               p_pickup_code || '-' || v_origin_port || ': ' ||
               case
                   when pre.unit = 'lump sum' then
                       cast(pre."price" as text) || ' ' || pre.currency || ' lump sum'
                   when pre.unit = 'kg' then
                                                   cast(pre."price" as text) || ' ' || pre.currency || ' * ' ||
                                                   cast(p_chargeable_weight_kg as text) || ' kg / 167 * ' ||
                                                   cast(pre.ratio as text)
                                       || ' = ' || cast(round(cast(
                                                                      pre."price" * p_chargeable_weight_kg / 167 * pre."ratio" as numeric),
                                                              2) as text) || ' ' || pre.currency
                   when pre.unit = 'cbm' then
                                                   cast(pre."price" as text) || ' ' || pre.currency || ' * ' ||
                                                   cast(p_volume_cbm as text) || ' cbm / 167 * ' ||
                                                   cast(pre.ratio as text)
                                       || ' = ' || cast(round(
                                       cast(pre."price" * p_volume_cbm / 167 * pre."ratio" as numeric), 2) as text) ||
                                                   ' ' || pre.currency
                   else 'unknown unit: ' || pre.unit
                   end
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency
                   || ', max=' || cast(pre."max" as text) || ' ' || pre.currency || '. '
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment
                   || E'\r\n' || v_other_buy_prices,
               v_carriage_currency
        from prod.lcl_pre_on_carriage pre
        where (right(pre.via_loc_port, 5) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --'PEN'-- port of loading
          and pre."type" = 'ebr'
          and p_chargeable_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

        --there are 5 options for calculating MSR/SSR charge------------------------------------------------------------------------
        --1. if unit="lump sum" then MSR/ssr price = ebr_price + ratePerUnit * 1
        --2. if comment="Based on EBR" and unit="kg" then MSR/ssr price = ebr_price + ratePerUnit * weight_kg / 167 * ebr_ratio
        --3. if comment="Based on EBR" and unit="cbm" then MSR/ssr price = ebr_price + ratePerUnit * volume_cbm / 167 * ebr_ratio
        --4. if comment<>"Based on EBR" and unit="kg" then MSR/ssr price = ratePerUnit * weight_kg / 167 * ratio
        --5. if comment<>"Based on EBR" and unit="cbm" then MSR/ssr price = ratePerUnit * volume_cbm / 167 * ratio

        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select 0,
               'code?',
               'Pre Carriage ' || upper(pre."type"),
               'enum',
               pre."price",
               case
                   when pre.unit = 'lump sum' then 1
                   when pre.ratio = 0 and unit = 'kg'
                       then pre."price" * p_chargeable_weight_kg / 167 * v_ebr_ratio --comment = 'Based on EBR'
                   when pre.ratio = 0 and unit = 'cbm'
                       then pre."price" * p_volume_cbm / 167 * v_ebr_ratio --comment = 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'kg'
                       then pre."price" * p_chargeable_weight_kg / 167 * pre.ratio -- comment <> 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'cbm'
                       then pre."price" * p_volume_cbm / 167 * pre.ratio -- comment <> 'Based on EBR'
                   else 0 --value not expected
                   end, -- number of units 
               'kg',
               case
                   when pre.unit = 'lump sum' then least(
                           greatest(v_ebr_price + pre."price" / coalesce(cur."rate", 1), pre."min"), pre."max")
                   when pre.ratio = 0 and unit = 'kg' then least(greatest(v_ebr_price +
                                                                          pre."price" / coalesce(cur."rate", 1) * p_chargeable_weight_kg / 167 *
                                                                          v_ebr_ratio, pre."min"),
                                                                 pre."max") --comment = 'Based on EBR'
                   when pre.ratio = 0 and unit = 'cbm' then least(greatest(v_ebr_price +
                                                                           pre."price" / coalesce(cur."rate", 1) * p_volume_cbm / 167 * v_ebr_ratio,
                                                                           pre."min"),
                                                                  pre."max") --comment = 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'kg' then least(
                           greatest(pre."price" / coalesce(cur."rate", 1) * p_chargeable_weight_kg / 167 * pre.ratio,
                                    pre."min"), pre."max") -- comment <> 'Based on EBR'
                   when pre.ratio <> 0 and unit = 'cbm' then least(
                           greatest(pre."price" / coalesce(cur."rate", 1) * p_volume_cbm / 167 * pre.ratio, pre."min"),
                           pre."max") -- comment <> 'Based on EBR'
                   else 0 --value not expected
                   end, -- calculated_price
               pre.comment,

               case
                   when pre.unit = 'lump sum' then
                                           cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                           cast(pre."price" as text) || ' ' || pre.currency || ' (lump sum)' ||
                                           case
                                               when coalesce(cur."rate", 1) <> 1
                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                               else '' end
                   when pre.ratio = 0 and unit = 'kg' then
                                                                       cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                                                       cast(pre."price" as text) || ' ' ||
                                                                       pre.currency || --' USD' --
                                                                       case
                                                                           when coalesce(cur."rate", 1) <> 1
                                                                               then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                                           else '' end
                                                       || ' * ' || cast(p_chargeable_weight_kg as text) ||
                                                                       ' kg / 167 * ' || cast(v_ebr_ratio as text) ||
                                                                       ' = '
                                   || cast(v_ebr_price + least(greatest((pre."price" * v_number_of_units), pre."min"),
                                                               pre."max") as text) || ' ' || pre.currency
                   when pre.ratio = 0 and unit = 'cbm' then
                                                                       cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' + ' ||
                                                                       cast(pre."price" as text) || ' ' ||
                                                                       pre.currency || --' USD' --
                                                                       case
                                                                           when coalesce(cur."rate", 1) <> 1
                                                                               then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                                           else '' end
                                                       || ' * ' || cast(p_volume_cbm as text) || ' cbm / 167 * ' ||
                                                                       cast(v_ebr_ratio as text) || ' = '
                                   || cast(round(cast(v_ebr_price + least(
                                       greatest((pre."price" * v_number_of_units), pre."min"), pre."max") as numeric),
                                                 2) as text) || ' ' || pre.currency
                   when pre.ratio <> 0 and unit = 'kg' then
                                                           cast(pre."price" as text) || ' ' || pre.currency ||
                                                           case
                                                               when coalesce(cur."rate", 1) <> 1
                                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                               else '' end
                                                       || ' * ' || cast(p_chargeable_weight_kg as text) ||
                                                           ' kg / 167 * ' || cast(pre.ratio as text) || ' = '
                                   || cast(round(
                                       cast(pre."price" * p_chargeable_weight_kg / 167 * pre.ratio as numeric),
                                       2) as text) || ' ' || pre.currency
                   when pre.ratio <> 0 and unit = 'cbm' then
                                                           cast(pre."price" as text) || ' ' || pre.currency ||
                                                           case
                                                               when coalesce(cur."rate", 1) <> 1
                                                                   then ' / ' || cast(cur."rate" as text) || ' (exchange rate)'
                                                               else '' end
                                                       || ' * ' || cast(p_volume_cbm as text) || ' cbm / 167 * ' ||
                                                           cast(pre.ratio as text) || ' = '
                                   || cast(round(cast(pre."price" * p_volume_cbm / 167 * pre.ratio as numeric),
                                                 2) as text) || ' ' || pre.currency
                   else 'value not expected'
                   end -- calculation_notes
                   || E'\r\nMin: ' || cast(pre."min" as text) || ' ' || pre.currency --|| ' USD' --
                   || ', max=' || cast(pre."max" as text) || ' ' || pre.currency || '. ' --|| ' USD. ' --
                   || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
               cast(pre.valid_to_date as date)
                   || E'\r\nRemarks: ' || pre.comment,
               v_carriage_currency
        from prod.lcl_pre_on_carriage pre
                 left join mrr.usd_currency cur
                           on cur.code = v_carriage_currency and pre.currency = 'USD'
        where (right(pre.via_loc_port, 5) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
          and pre."type" in ('msr', 'ssr')
          and p_chargeable_weight_kg between pre.from_weight and pre.to_weight
          and pre."carriage" = 'pre';

        --add precarriage IFS charge to tmp_charges (use the same number of units and ratio as EBR)
        insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                                 number_of_units,
                                 unit_type, calculated_price, remarks, calculation_notes, currency)
        select distinct 0,
                        'code?',
                        'Pre Carriage IFS',
                        'enum',
                        pre."price",
                        v_number_of_units,
                        'kg',
                        pre."price" * v_ebr_price / 100,
                        pre.comment,
                        --'Pre carriage IFS: ' ||
                        cast(v_ebr_price as text) || ' ' || v_carriage_currency || ' * ' || cast(pre."price" as text)
                            || ' % = ' || cast(pre."price" / 100 * v_ebr_price as text) || ' ' || v_carriage_currency
                            || E'\r\nValid from ' || cast(pre.valid_from_date as date) || ' to ' ||
                        cast(pre.valid_to_date as date)
                            || E'\r\nRemarks: ' || pre.comment,
                        v_carriage_currency
        from prod.lcl_pre_on_carriage pre
        where (right(pre.via_loc_port, 3) = p_pickup_code -- use pickup address city code --'BP5' --
            or pre.via_loc like p_pickup_code || '%') -- like 'GB SN%'
          and pre."loc_port" = v_origin_port          --'PDX'-- port of loading
          and pre."type" = 'ifs'
          and pre."carriage" = 'pre';

    end if;

--MSR/SSR
    insert into tmp_charges (route_id, charge_code, charge_description, service_type_enum, rate_per_unit,
                             number_of_units,
                             unit_type, calculated_price, remarks, calculation_notes, currency)
    select distinct 0,
                    'MSR',
                    charge_name,
                    'enum',
                    m.rate,
                    1,
                    'kg',
                    m.rate * p_chargeable_weight_kg,
                    '',
                    cast(m.rate as text) || ' ' || m.currency || ' * '
                        || cast(p_chargeable_weight_kg as text) || ' kg'
                        || ' = ' || cast(rate * p_chargeable_weight_kg as text) || ' ' || m.currency,
                    m.currency
    FROM prod.lcl_margins m
    where origin_district = 'North + South-East Asia'
      and destination_district = 'US'
      and tier = 1;

--return-------------------------------------------------------------------------------------------------------------------------------------------
    return query
        select --l.route_id, 
               l.charge_code,
               l.charge_description, --l.service_type_enum, 
               --l.rate_per_unit, l.number_of_units, l.unit_type, 
               l.calculated_price,
               l.currency,
               --l.remarks, 
               l.calculation_notes
        from tmp_charges l
        order by charge_id;

end;

$$;

alter function prod.gpm_lcl_calculate(text, text, text, text, double precision, double precision, text, text, text, text, text, text) owner to "Postgresadmin";

create procedure prod.stardox_lcl_update_doc_table_name(p_tenantid text, p_document_serial integer, p_table_name text)
    language sql
as
$$
UPDATE prod.documents
SET table_name = p_table_name
WHERE document_serial = p_document_serial
  AND "tenantId" = p_tenantid
$$;

alter procedure prod.stardox_lcl_update_doc_table_name(text, integer, text) owner to "Postgresadmin";

create function prod.get_document_header(p_tenant_id text, p_page integer, p_pagesize integer,
                                         p_fromdate timestamp without time zone, p_todate timestamp without time zone,
                                         p_doc_status text, p_categoryfilter text, p_stakeholdernamefilter text,
                                         p_sortby text, p_page_offset integer, p_next_rec integer)
    returns TABLE
            (
                "tenantId"        text,
                "documentId"      uuid,
                document_name     text,
                stake_holder_id   text,
                stake_holder_name text,
                document_category text,
                document_type     text,
                received_date     timestamp without time zone,
                modified_date     timestamp without time zone,
                document_status   text
            )
    language sql
as
$$
SELECT "tenantId"          as tenantId,
       "documentId"        as documentId,
       "document_name"     as document_name,
       "stake_holder_id"   as stake_holder_id,
       "stake_holder_name" as stake_holder_name,
       "document_category" as document_category,
       "document_type"     as document_type,
       "received_date"     as received_date,
       "modified_date"     as modified_date,
       "document_status"   as document_status
FROM prod.documents
WHERE ("tenantId" = p_tenant_id)
  AND ("document_status" IN ('ACTIVATED', 'ADMIN_VALIDATION', 'PROCESSING'))
  AND (p_fromdate is null or "received_date" >= p_fromdate)
  AND (p_todate is null or "received_date" <= p_todate)
  AND (p_doc_status is null or UPPER("document_status") = p_doc_status)
  AND (p_categoryfilter is null or "document_category" = p_categoryfilter)
  AND (p_stakeholdernamefilter is null or "stake_holder_name" = p_stakeholdernamefilter)
ORDER BY CASE p_sortby WHEN 'NONE ASCENDING' THEN document_serial END ASC,
         CASE p_sortby WHEN 'DOCUMENT_NAME ASCENDING' THEN document_name END ASC,
         CASE p_sortby WHEN 'DOCUMENT_NAME DESCENDING' THEN document_name END DESC,
         CASE p_sortby WHEN 'STAKEHOLDER ASCENDING' THEN stake_holder_name END ASC,
         CASE p_sortby WHEN 'STAKEHOLDER DESCENDING' THEN stake_holder_name END DESC,
         CASE p_sortby WHEN 'DOCUMENT_TYPE ASCENDING' THEN document_type END ASC,
         CASE p_sortby WHEN 'DOCUMENT_TYPE DESCENDING' THEN document_type END DESC,
         CASE p_sortby WHEN 'CATEGORY ASCENDING' THEN document_category END ASC,
         CASE p_sortby WHEN 'CATEGORY DESCENDING' THEN document_category END DESC,
         CASE p_sortby WHEN 'RECEIVED ASCENDING' THEN CAST(received_date as text) END ASC,
         CASE p_sortby WHEN 'RECEIVED DESCENDING' THEN CAST(received_date as text) END DESC,
         CASE p_sortby WHEN 'MODIFIED ASCENDING' THEN CAST(modified_date as text) END ASC,
         CASE p_sortby WHEN 'MODIFIED DESCENDING' THEN CAST(modified_date as text) END DESC,
         CASE p_sortby WHEN 'STATUS ASCENDING' THEN document_status END ASC,
         CASE p_sortby WHEN 'STATUS DESCENDING' THEN document_status END DESC
    OFFSET p_page_offset ROWS
FETCH NEXT
p_next_rec
ROWS
ONLY

$$;

alter function prod.get_document_header(text, integer, integer, timestamp, timestamp, text, text, text, text, integer, integer) owner to "Postgresadmin";

create function prod.get_country_id(p_country_code_two text)
    returns TABLE
            (
                country_id integer
            )
    language plpgsql
as
$$
BEGIN
    return query
        SELECT c.country_id as id
        FROM prod.countries as c
        where country_code_two = p_country_code_two;
END;
$$;

alter function prod.get_country_id(text) owner to "Postgresadmin";

create function prod.get_document_process_contant_details(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid                  text,
                document_serial           integer,
                routeid                   integer,
                route_number              integer,
                origin_country_name       text,
                origin_country_code       text,
                origin_city_name          text,
                origin_city_code          text,
                origin_state_name         text,
                origin_state_code         text,
                origin_port_code          text,
                destination_country_name  text,
                destination_country_code  text,
                destination_city_name     text,
                destination_state_name    text,
                destination_state_code    text,
                destination_port_code     text,
                price_point_value         double precision,
                price_point_currency_code text,
                validity_date             timestamp without time zone,
                service                   text,
                accepted                  boolean
            )
    language sql
as
$$
SELECT R1."tenantId"                       as tenantid,
       R1."document_serial"                as document_serial,
       R1."routeId"                        as routeid,
       R1."route_number"                   as route_number,
       R1."origin_country_name"            as origin_country_name,
       R1."origin_country_code"            as origin_country_code,
       R1."origin_city_name"               as origin_city_name,
       R1."origin_city_code"               as origin_city_code,
       R1."origin_state_name"              as origin_state_name,
       R1."origin_state_code"              as origin_state_code,
       R1."origin_port_code"               as origin_port_code,
       R1."destination_country_name"       as destination_country_name,
       R1."destination_country_code"       as destination_country_code,
       R1."destination_city_name"          as destination_city_name,
       R1."destination_state_name"         as destination_state_name,
       R1."destination_state_code"         as destination_state_code,
       R1."destination_port_code"          as destination_port_code,
       COALESCE(R1."price_point_value", 0) as price_point_value,
       R1."price_point_currency_code"      as price_point_currency_code,
       R1."validity_date"                  as validity_date,
       R1."service"                        as service,
       R1."accepted"                       as accepted
FROM prod.document_routes R1
         INNER JOIN prod.document_tabsheets T1
                    ON R1."tenantId" = T1."tenantId"
                        AND R1."document_serial" = T1."document_serial"
WHERE R1."tenantId" = p_tenant_id
  AND R1."document_serial" = p_document_serial
  AND T1.tab_index = p_tab_index

$$;

alter function prod.get_document_process_contant_details(text, integer, integer) owner to "Postgresadmin";

create function prod.get_document_process_charges(p_tenant_id text, p_document_serial integer, p_route_number integer,
                                                  p_tab_index integer)
    returns TABLE
            (
                tenantid                   text,
                document_serial            integer,
                route_number               integer,
                chargeid                   integer,
                charge_type                text,
                qtty                       integer,
                units                      text,
                price_value                double precision,
                price_currency_code        text,
                margin_effect_amount       double precision,
                margin_effect_pos_or_nev   text,
                business_effect_amount     double precision,
                business_effect_pos_or_nev text,
                last30d_value              double precision,
                last30d_currency_code      text,
                last60d_value              double precision,
                last60d_currency_code      text,
                last90d_value              double precision,
                last90d_currency_code      text,
                last120d_value             double precision,
                last120d_currency_code     text,
                remarks                    text
            )
    language sql
as
$$
SELECT DISTINCT C1."tenantId"                         as tenantid,
                C1."document_serial"                  as document_serial,
                R1."routeId"                          as routeid,
                "record_id"                           as chargeid,
                "charge_type"                         as charge_type,
                COALESCE("qtty", 0)                   as qtty,
                "units"                               as units,
                COALESCE("price_value", 0)            as price_value,
                "price_currency_code"                 as price_currency_code,
                COALESCE("margin_effect_amount", 0)   as margin_effect_amount,
                "margin_effect_pos_or_nev"            as margin_effect_pos_or_nev,
                COALESCE("business_effect_amount", 0) as business_effect_amount,
                "business_effect_pos_or_nev"          as business_effect_pos_or_nev,
                COALESCE("last30d_value", 0)          as last30d_value,
                "last30d_currency_code"               as last30d_currency_code,
                COALESCE("last60d_value", 0)          as last60d_value,
                "last60d_currency_code"               as last60d_currency_code,
                COALESCE("last90d_value", 0)          as last90d_value,
                "last90d_currency_code"               as last90d_currency_code,
                COALESCE("last120d_value", 0)         as last120d_value,
                "last120d_currency_code"              as last120d_currency_code,
                "remarks"                             as remarks

FROM prod.document_charges C1
         INNER JOIN prod.document_routes R1
                    ON C1."tenantId" = R1."tenantId"
                        AND C1."document_serial" = R1."document_serial"
                        AND C1."route_number" = R1."route_number"

WHERE C1."tenantId" = p_tenant_id
  AND C1."document_serial" = p_document_serial
  AND R1."routeId" = p_route_number
  AND (p_tab_index is null or R1."tab_index" = p_tab_index)

$$;

alter function prod.get_document_process_charges(text, integer, integer, integer) owner to "Postgresadmin";

create function prod.pricing_get_linehaul_with_price()
    returns TABLE
            (
                origin_port text,
                dest_port   text,
                price       double precision,
                trans_time  text
            )
    language plpgsql
as
$$
BEGIN

    return query
        SELECT origin_airport_code           as origin_port,
               dest_gateway                  as dest_port,
               origin_linehaul_per_kg        as price,
               transit_time_to_gateway_hours as trans_time

        FROM prod.air_linehaul;
END;
$$;

alter function prod.pricing_get_linehaul_with_price() owner to "Postgresadmin";

create procedure prod.stardox_air_pivot_doc_tables(p_document_serial integer, p_table_name text,
                                                   p_tab_sheet_index integer)
    language plpgsql
as
$$
BEGIN
    ------------------------------PIVOT MAINFREIGHT TABLE------------------------------
    IF p_table_name = 'air_main_freight'
    THEN

        INSERT INTO mrr.air_main_freight_pivot(district, origin_country, origin_gateway_airport_code,
                                               dest_gateway_airport_code,
                                               dest_country, trade_lane, valid_from_date, valid_to_date, service_level,
                                               density,
                                               kff_volumeaugust_ytd, freight_currency, min, rate, charge_type,
                                               airline_text,
                                               transit_time_hours, remarks, min_trans_time_hours, max_trans_time_hours,
                                               pricing_period, document_serial, tab_sheet_index)
        SELECT m1.district,
               m1.origin_country,
               m1.origin_gateway_airport_code,
               m1.dest_gateway_airport_code,
               m1.dest_country,
               m1.trade_lane,
               cast(m1.valid_from_date AS TIMESTAMP),
               cast(m1.valid_to_date AS TIMESTAMP),
               m1.service_level,
               m1.density,
               m1.kff_volumeaugust_ytd,
               m1.freight_currency,
               NULL,
               m1.main_carriage_price_per_kg,
               'Main Carriage',
               m1.airline_text,
               m1.transit_time_hours,
               m1.remarks,
               m1.min_trans_time_hours,
               m1.max_trans_time_hours,
               m1.pricing_period,
               m1.document_serial,
               m1.tab_sheet_index
        FROM mrr.air_main_freight AS m1
        WHERE m1.document_serial = p_document_serial
          AND m1.tab_sheet_index = p_tab_sheet_index
        UNION ALL
        SELECT m2.district,
               m2.origin_country,
               m2.origin_gateway_airport_code,
               m2.dest_gateway_airport_code,
               m2.dest_country,
               m2.trade_lane,
               cast(m2.valid_from_date AS TIMESTAMP),
               cast(m2.valid_to_date AS TIMESTAMP),
               m2.service_level,
               m2.density,
               m2.kff_volumeaugust_ytd,
               m2.freight_currency,
               m2.fsc_min_price,
               m2.fsc_per_kg,
               'FSC',
               m2.airline_text,
               m2.transit_time_hours,
               m2.remarks,
               m2.min_trans_time_hours,
               m2.max_trans_time_hours,
               m2.pricing_period,
               m2.document_serial,
               m2.tab_sheet_index
        FROM mrr.air_main_freight AS m2
        WHERE m2.document_serial = p_document_serial
          AND m2.tab_sheet_index = p_tab_sheet_index
        UNION ALL
        SELECT m3.district,
               m3.origin_country,
               m3.origin_gateway_airport_code,
               m3.dest_gateway_airport_code,
               m3.dest_country,
               m3.trade_lane,
               cast(m3.valid_from_date AS TIMESTAMP),
               cast(m3.valid_to_date AS TIMESTAMP),
               m3.service_level,
               m3.density,
               m3.kff_volumeaugust_ytd,
               m3.freight_currency,
               m3.ssc_min_price,
               m3.ssc_per_kg,
               'SSC',
               m3.airline_text,
               m3.transit_time_hours,
               m3.remarks,
               m3.min_trans_time_hours,
               m3.max_trans_time_hours,
               m3.pricing_period,
               m3.document_serial,
               m3.tab_sheet_index
        FROM mrr.air_main_freight AS m3
        WHERE m3.document_serial = p_document_serial
          AND m3.tab_sheet_index = p_tab_sheet_index;
        ------------------------------PIVOT LINEHAUL TABLE------------------------------
    ELSEIF p_table_name = 'air_linehaul'
    THEN
        INSERT INTO mrr.air_linehaul_pivot(linehaul_side, district, region, country_code, origin, destination, currency,
                                           gateway_hub_cost_min,
                                           gateway_hub_cost_max, gateway_hub_cost_per_kg, linehaul_min, linehaul_per_kg,
                                           linehaul_full_truck_rate, linehaul_full_truck_max_capacity,
                                           transit_time_to_gateway_hours, remarks, valid_from_date, valid_to_date,
                                           transit_time_to_gateway_hours_min, transit_time_to_gateway_hours_max,
                                           document_serial, tab_sheet_index)
        SELECT 'origin',
               l1.district,
               l1.region,
               l1.origin_country_code,
               l1.origin_airport_code,
               l1.origin_gateway,
               l1.currency,
               l1.gateway_hub_cost_min,
               l1.gateway_hub_cost_max,
               l1.gateway_hub_cost_per_kg,
               l1.origin_linehaul_min,
               l1.origin_linehaul_per_kg,
               l1.origin_linehaul_full_truck_rate,
               l1.origin_linehaul_full_truck_max_capacity,
               l1.transit_time_to_gateway_hours,
               cast(l1.origin_remarks AS TEXT),
               l1.valid_from_date,
               l1.valid_to_date,
               l1.transit_time_to_gateway_hours_min,
               l1.transit_time_to_gateway_hours_max,
               l1.document_serial,
               l1.tab_sheet_index
        FROM mrr.air_linehaul l1
        WHERE l1.document_serial = p_document_serial
          AND l1.tab_sheet_index = p_tab_sheet_index
        UNION ALL
        SELECT 'destination',
               l2.district,
               l2.region,
               l2.origin_country_code,
               l2.dest_gateway,
               l2.destination_airport_code,
               l2.dest_currency,
               l2.gateway_dest_hub_cost_min,
               l2.gateway_dest_hub_cost_max,
               l2.gateway_dest_hub_cost_per_kg,
               l2.destination_linehaul_min,
               l2.destination_linehaul_per_kg,
               l2.destination_linehaul_full_truck_rate,
               l2.destination_linehaul_full_truck_max_capacity,
               l2.destination_transit_time_to_gateway_hours,
               cast(l2.destination_remarks AS TEXT),
               l2.valid_from_date,
               l2.valid_to_date,
               l2.destination_transit_time_to_gateway_hours_min,
               l2.destination_transit_time_to_gateway_hours_max,
               l2.document_serial,
               l2.tab_sheet_index
        FROM mrr.air_linehaul AS l2
        WHERE l2.document_serial = p_document_serial
          AND l2.tab_sheet_index = p_tab_sheet_index;
    END IF;
END;
$$;

alter procedure prod.stardox_air_pivot_doc_tables(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_insert_doc_routes(p_document_serial integer, p_table_name text,
                                                    p_tab_sheet_index integer)
    language plpgsql
as
$$
BEGIN
    ------------------------------MAINFREIGHT ROUTES------------------------------
    IF p_table_name = 'air_main_freight'
    THEN
        INSERT INTO prod.document_routes
        ("tenantId",
         document_serial,
         route_number,
         origin_country_code,
         origin_port_code,
         destination_country_code,
         destination_port_code,
         route_name,
         tab_sheet_index,
         validity_date)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               m.route_number,
               m.origin_country,
               m.origin_gateway_airport_code,
               m.dest_country,
               m.dest_gateway_airport_code,
               concat_ws('-', concat(m.origin_country, m.origin_gateway_airport_code),
                         concat(m.dest_country, m.dest_gateway_airport_code)),
               m.tab_sheet_index,
               m.valid_to_date
        FROM mrr.air_main_freight_pivot AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
        GROUP BY m.trade_lane;

        ------------------------------MARGINS ROUTES------------------------------
    ELSEIF p_table_name = 'air_margins'
    THEN
        INSERT INTO prod.document_routes
        ("tenantId",
         document_serial,
         route_number,
         origin_country_name,
         destination_country_name,
         route_name,
         tab_sheet_index,
         validity_date)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               m.route_number,
               m.origin_country,
               m.dest_country,
               concat_ws('-', m.origin_country, m.dest_country),
               m.tab_sheet_index,
               m.valid_to_date
        FROM mrr.air_margins AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
        GROUP BY m.air_type, m.origin_country, m.dest_country, m.document_serial, m.route_number;

        ------------------------------LOCAL CHARGES ROUTES------------------------------
    ELSEIF p_table_name = 'air_local_charges'
    THEN
        INSERT INTO prod.document_routes
        ("tenantId",
         document_serial,
         route_number,
         origin_country_code,
         origin_port_code,
         destination_country_code,
         destination_port_code,
         route_name,
         tab_sheet_index,
         validity_date)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               m.route_number,
               CASE
                   WHEN lower(m.type) = 'origin'
                       THEN m."Country"
                   WHEN lower(m.type) = 'general'
                       THEN m."Country"
                   WHEN lower(m.type) = 'dest'
                       THEN NULL
                   END AS origin_country,
               CASE
                   WHEN lower(m.type) = 'origin'
                       THEN m."Airport"
                   WHEN lower(m.type) = 'general'
                       THEN m."Airport"
                   WHEN lower(m.type) = 'dest'
                       THEN NULL
                   END AS origin_port,
               CASE
                   WHEN lower(m.type) = 'dest'
                       THEN m."Country"
                   WHEN lower(m.type) = 'general'
                       THEN m."Country"
                   WHEN lower(m.type) = 'origin'
                       THEN NULL
                   END AS destination_country,
               CASE
                   WHEN lower(m.type) = 'dest'
                       THEN m."Airport"
                   WHEN lower(m.type) = 'general'
                       THEN m."Airport"
                   WHEN lower(m.type) = 'origin'
                       THEN NULL
                   END AS destination_port,
               concat_ws('-', concat(CASE
                                         WHEN lower(m.type) = 'origin'
                                             THEN m."Country"
                                         WHEN lower(m.type) = 'general'
                                             THEN m."Country"
                                         WHEN lower(m.type) = 'dest'
                                             THEN NULL
                                         END, CASE
                                                  WHEN lower(m.type) = 'origin'
                                                      THEN m."Airport"
                                                  WHEN lower(m.type) = 'general'
                                                      THEN m."Airport"
                                                  WHEN lower(m.type) = 'dest'
                                                      THEN NULL
                                         END), concat(CASE
                                                          WHEN lower(m.type) = 'dest'
                                                              THEN m."Country"
                                                          WHEN lower(m.type) = 'general'
                                                              THEN m."Country"
                                                          WHEN lower(m.type) = 'origin'
                                                              THEN NULL
                                                          END, CASE
                                                                   WHEN lower(m.type) = 'dest'
                                                                       THEN m."Airport"
                                                                   WHEN lower(m.type) = 'general'
                                                                       THEN m."Airport"
                                                                   WHEN lower(m.type) = 'origin'
                                                                       THEN NULL
                                                          END)),
               m.tab_sheet_index,
               m.valid_to_date
        FROM mrr.air_local_charges AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
        GROUP BY CASE
                     WHEN lower(m.type) = 'origin'
                         THEN m."Country"
                     WHEN lower(m.type) = 'general'
                         THEN m."Country"
                     WHEN lower(m.type) = 'dest'
                         THEN NULL
                     END,
                 CASE
                     WHEN lower(m.type) = 'origin'
                         THEN m."Airport"
                     WHEN lower(m.type) = 'general'
                         THEN m."Airport"
                     WHEN lower(m.type) = 'dest'
                         THEN NULL
                     END,
                 CASE
                     WHEN lower(m.type) = 'dest'
                         THEN m."Country"
                     WHEN lower(m.type) = 'general'
                         THEN m."Country"
                     WHEN lower(m.type) = 'origin'
                         THEN NULL
                     END,
                 CASE
                     WHEN lower(m.type) = 'dest'
                         THEN m."Airport"
                     WHEN lower(m.type) = 'general'
                         THEN m."Airport"
                     WHEN lower(m.type) = 'origin'
                         THEN NULL
                     END,
                 m.document_serial,
                 m.route_number;

        ------------------------------PRE/ON CARRIAGE ROUTES------------------------------
    ELSEIF p_table_name = 'air_pre_on_carriage'
    THEN
        INSERT INTO prod.document_routes
        ("tenantId",
         document_serial,
         route_number,
         origin_port_code,
         destination_port_code,
         route_name,
         tab_sheet_index,
         validity_date)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               m.route_number,
               m.via_loc_port,
               m.loc_port,
               concat_ws('-', m.via_loc_port, m.loc_port),
               m.tab_sheet_index,
               m.valid_to_date
        FROM mrr.air_pre_on_carriage AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
        GROUP BY m.route_number, m.document_serial, m.via_loc, m.loc;

        ------------------------------LINEHAUL ROUTES------------------------------
    ELSEIF p_table_name = 'air_linehaul'
    THEN
        INSERT INTO prod.document_routes("tenantId", document_serial, route_number, origin_country_code,
                                         origin_port_code,
                                         destination_country_code, destination_port_code, route_name, tab_sheet_index,
                                         validity_date)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               m.route_number,
               m.country_code,
               origin,
               country_code,
               destination,
               concat_ws('-', concat(m.country_code, m.origin), concat(m.country_code, m.destination)),
               m.tab_sheet_index,
               m.valid_to_date
        FROM mrr.air_linehaul_pivot AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
        GROUP BY m.route_number, m.origin, m.destination, m.document_serial;
        ------------------------------WEIGHT BREAK ROUTES------------------------------
        ----------NO ROUTES FOR WEIGHT BREAK----------
--     ELSEIF p_table_name = 'air_weight_break'
--     THEN
    END IF;
END;

$$;

alter procedure prod.stardox_air_insert_doc_routes(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_insert_doc_charges(p_document_serial integer, p_table_name text,
                                                     p_tab_sheet_index integer)
    language plpgsql
as
$$
BEGIN
    /*The charges table has records that don't exists in the exceptions table.*/
    ------------------------------INSERT MAIN FREIGHT CHARGES------------------------------
    IF p_table_name = 'air_main_freight' THEN
        INSERT INTO prod.document_charges("tenantId", document_serial, charge_type, qtty, units, price_value,
                                          price_currency_code, remarks, route_number, record_id, tab_sheet_index,
                                          last30d_value, last30d_currency_code, last60d_value, last60d_currency_code,
                                          last90d_value, last90d_currency_code, last120d_value, last120d_currency_code)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               concat_ws('-', 'Main Freight', m.charge_type),
               1,
               'per KG',
               m.rate,
               m.freight_currency,
               concat_ws('|', concat('SL:', m.service_level), concat('Density:', m.density),
                         concat('TransTime:', m.transit_time_hours), concat('AirlineText:', m.airline_text),
                         concat('Remarks:', m.remarks)),
               m.route_number,
               m.record_id,
               m.tab_sheet_index,
               p30.rate,
               p30.freight_currency,
               p60.rate,
               p60.freight_currency,
               p90.rate,
               p90.freight_currency,
               p120.rate,
               p120.freight_currency
        FROM mrr.air_main_freight_pivot AS m
                 LEFT JOIN (SELECT rate, freight_currency, trade_lane, charge_type, pricing_period
                            FROM prod.air_main_freight
                            WHERE insert_date >= (current_date - 30)
                            ORDER BY insert_date
                            LIMIT 1) AS p30
                           ON m.trade_lane = p30.trade_lane AND m.charge_type = p30.charge_type AND
                              m.pricing_period = p30.pricing_period
                 LEFT JOIN (SELECT rate, freight_currency, trade_lane, charge_type, pricing_period
                            FROM prod.air_main_freight
                            WHERE insert_date >= (current_date - 60)
                            ORDER BY insert_date
                            LIMIT 1) AS p60
                           ON m.trade_lane = p60.trade_lane AND m.charge_type = p60.charge_type AND
                              m.pricing_period = p60.pricing_period
                 LEFT JOIN (SELECT rate, freight_currency, trade_lane, charge_type, pricing_period
                            FROM prod.air_main_freight
                            WHERE insert_date >= (current_date - 90)
                            ORDER BY insert_date
                            LIMIT 1) AS p90
                           ON m.trade_lane = p90.trade_lane AND m.charge_type = p90.charge_type AND
                              m.pricing_period = p90.pricing_period
                 LEFT JOIN (SELECT rate, freight_currency, trade_lane, charge_type, pricing_period
                            FROM prod.air_main_freight
                            WHERE insert_date >= (current_date - 120)
                            ORDER BY insert_date
                            LIMIT 1) AS p120
                           ON m.trade_lane = p120.trade_lane AND m.charge_type = p120.charge_type AND
                              m.pricing_period = p120.pricing_period
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_sheet_index = p_tab_sheet_index);


        ------------------------------INSERT MARGINS CHARGES------------------------------
    ELSEIF p_table_name = 'air_margins' THEN
        INSERT INTO prod.document_charges("tenantId", document_serial, charge_type, qtty, units, price_value,
                                          price_currency_code, remarks, route_number, record_id, tab_sheet_index,
                                          last30d_value, last30d_currency_code, last60d_value, last60d_currency_code,
                                          last90d_value, last90d_currency_code, last120d_value, last120d_currency_code)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               concat_ws('-', 'Margins', m.air_type),
               1,
               CASE WHEN m.margin_charge = 'dollar' THEN 'Per KG' ELSE 'Percentage' END,
               m.margin_rate,
               'USD',
               concat_ws('|', concat('Density:', m.density_level), concat('Tier:', m.tier),
                         concat('MarginType:', m.margin_type), concat('Type:', m.type), concat('SL:', m.service_level)),
               m.route_number,
               m.record_id,
               m.tab_sheet_index,
               p30.margin_rate,
               p30.margin_currency,
               p60.margin_rate,
               p60.margin_currency,
               p90.margin_rate,
               p90.margin_currency,
               p120.margin_rate,
               p120.margin_currency
        FROM mrr.air_margins AS m
                 LEFT JOIN (SELECT margin_rate,
                                   CASE WHEN margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END AS margin_currency,
                                   air_type,
                                   origin_country,
                                   dest_country,
                                   density_level,
                                   service_level,
                                   tier,
                                   type,
                                   margin_type
                            FROM prod.air_margins
                            WHERE insert_date >= (current_date - 30)
                            ORDER BY insert_date
                            LIMIT 1) AS p30
                           ON m.air_type = p30.air_type AND m.origin_country = p30.origin_country AND
                              m.dest_country = p30.dest_country AND m.density_level = p30.density_level AND
                              m.service_level = p30.service_level AND m.tier = p30.tier AND m.type = p30.type AND
                              m.margin_type = p30.margin_type
                 LEFT JOIN (SELECT margin_rate,
                                   CASE WHEN margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END AS margin_currency,
                                   air_type,
                                   origin_country,
                                   dest_country,
                                   density_level,
                                   service_level,
                                   tier,
                                   type,
                                   margin_type
                            FROM prod.air_margins
                            WHERE insert_date >= (current_date - 60)
                            ORDER BY insert_date
                            LIMIT 1) AS p60
                           ON m.air_type = p60.air_type AND m.origin_country = p60.origin_country AND
                              m.dest_country = p60.dest_country AND m.density_level = p60.density_level AND
                              m.service_level = p60.service_level AND m.tier = p60.tier AND m.type = p60.type AND
                              m.margin_type = p60.margin_type
                 LEFT JOIN (SELECT margin_rate,
                                   CASE WHEN margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END AS margin_currency,
                                   air_type,
                                   origin_country,
                                   dest_country,
                                   density_level,
                                   service_level,
                                   tier,
                                   type,
                                   margin_type
                            FROM prod.air_margins
                            WHERE insert_date >= (current_date - 90)
                            ORDER BY insert_date
                            LIMIT 1) AS p90
                           ON m.air_type = p90.air_type AND m.origin_country = p90.origin_country AND
                              m.dest_country = p90.dest_country AND m.density_level = p90.density_level AND
                              m.service_level = p90.service_level AND m.tier = p90.tier AND m.type = p90.type AND
                              m.margin_type = p90.margin_type
                 LEFT JOIN (SELECT margin_rate,
                                   CASE WHEN margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END AS margin_currency,
                                   air_type,
                                   origin_country,
                                   dest_country,
                                   density_level,
                                   service_level,
                                   tier,
                                   type,
                                   margin_type
                            FROM prod.air_margins
                            WHERE insert_date >= (current_date - 120)
                            ORDER BY insert_date
                            LIMIT 1) AS p120
                           ON m.air_type = p120.air_type AND m.origin_country = p120.origin_country AND
                              m.dest_country = p120.dest_country AND m.density_level = p120.density_level AND
                              m.service_level = p120.service_level AND m.tier = p120.tier AND m.type = p120.type AND
                              m.margin_type = p120.margin_type
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_sheet_index = p_tab_sheet_index);


        ------------------------------INSERT LOCAL CHARGES CHARGES------------------------------
    ELSEIF p_table_name = 'air_local_charges' THEN
        INSERT INTO prod.document_charges("tenantId", document_serial, charge_type, qtty, units, price_value,
                                          price_currency_code, remarks, route_number, record_id, tab_sheet_index,
                                          last30d_value, last30d_currency_code, last60d_value, last60d_currency_code,
                                          last90d_value, last90d_currency_code, last120d_value, last120d_currency_code)

        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               concat_ws('-', m.charge_code, m.charge_name),
               1,
               m.unit,
               m.rate,
               m."Currency",
               concat_ws('|', concat('Tier:', m.tier), concat('Minimum:', m.min), concat('UnitType:', m.unit),
                         concat('TransTime:', m.hour), concat('Remarks:', m.remarks)),
               m.route_number,
               m.record_id,
               m.tab_sheet_index,
               p30.rate,
               p30."Currency",
               p60.rate,
               p60."Currency",
               p90.rate,
               p90."Currency",
               p120.rate,
               p120."Currency"
        FROM mrr.air_local_charges AS m
                 LEFT JOIN (SELECT rate,
                                   "Currency",
                                   "Airport",
                                   charge_code,
                                   "Country",
                                   "District",
                                   tier,
                                   type
                            FROM prod.air_local_charges
                            WHERE insert_date >= (current_date - 30)
                            ORDER BY insert_date
                            LIMIT 1) AS p30
                           ON m."Airport" = p30."Airport" AND m."charge_code" = p30."charge_code" AND
                              m."Country" = p30."Country" AND m."District" = p30."District" AND
                              m."tier" = p30."tier" AND
                              m."type" = p30."type"
                 LEFT JOIN (SELECT rate,
                                   "Currency",
                                   "Airport",
                                   charge_code,
                                   "Country",
                                   "District",
                                   tier,
                                   type
                            FROM prod.air_local_charges
                            WHERE insert_date >= (current_date - 60)
                            ORDER BY insert_date
                            LIMIT 1) AS p60
                           ON m."Airport" = p60."Airport" AND m."charge_code" = p60."charge_code" AND
                              m."Country" = p60."Country" AND m."District" = p60."District" AND
                              m."tier" = p60."tier" AND
                              m."type" = p60."type"
                 LEFT JOIN (SELECT rate,
                                   "Currency",
                                   "Airport",
                                   charge_code,
                                   "Country",
                                   "District",
                                   tier,
                                   type
                            FROM prod.air_local_charges
                            WHERE insert_date >= (current_date - 90)
                            ORDER BY insert_date
                            LIMIT 1) AS p90
                           ON m."Airport" = p90."Airport" AND m."charge_code" = p90."charge_code" AND
                              m."Country" = p90."Country" AND m."District" = p90."District" AND
                              m."tier" = p90."tier" AND
                              m."type" = p90."type"
                 LEFT JOIN (SELECT rate,
                                   "Currency",
                                   "Airport",
                                   charge_code,
                                   "Country",
                                   "District",
                                   tier,
                                   type
                            FROM prod.air_local_charges
                            WHERE insert_date >= (current_date - 120)
                            ORDER BY insert_date
                            LIMIT 1) AS p120
                           ON m."Airport" = p120."Airport" AND m."charge_code" = p120."charge_code" AND
                              m."Country" = p120."Country" AND m."District" = p120."District" AND
                              m."tier" = p120."tier" AND
                              m."type" = p120."type"
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_sheet_index = p_tab_sheet_index);


        ------------------------------INSERT PRE/ON CARRIAGE CHARGES------------------------------
    ELSEIF p_table_name = 'air_pre_on_carriage' THEN
        INSERT INTO prod.document_charges("tenantId", document_serial, charge_type, qtty, units, price_value,
                                          price_currency_code, remarks, route_number, record_id, tab_sheet_index,
                                          last30d_value, last30d_currency_code, last60d_value, last60d_currency_code,
                                          last90d_value, last90d_currency_code, last120d_value, last120d_currency_code)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               CASE
                   WHEN lower(m.carriage) = 'on' THEN 'Air On-Carriage'
                   WHEN lower(m.carriage) = 'pre' THEN 'Air Pre-Carriage' END,
               1,
               m.unit,
               m.price,
               m.currency,
               concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('UnitType:', m.unit), concat('Type:', m.type), concat('Ratio:', m.ratio),
                         concat('Remarks:', m.comment)),
               m.route_number,
               m.record_id,
               m.tab_sheet_index,
               p30.price,
               p30.currency,
               p60.price,
               p60.currency,
               p90.price,
               p90.currency,
               p120.price,
               p120.currency
        FROM mrr.air_pre_on_carriage AS m
                 LEFT JOIN (SELECT price,
                                   currency,
                                   via_loc,
                                   loc,
                                   from_weight,
                                   to_weight,
                                   type,
                                   carriage
                            FROM prod.air_pre_on_carriage
                            WHERE insert_date >= (current_date - 30)
                            ORDER BY insert_date
                            LIMIT 1) AS p30
                           ON m.via_loc = p30.via_loc AND m.loc = p30.loc AND m.from_weight = p30.from_weight AND
                              m.to_weight = p30.to_weight AND m.type = p30.type AND m.carriage = p30.carriage
                 LEFT JOIN (SELECT price,
                                   currency,
                                   via_loc,
                                   loc,
                                   from_weight,
                                   to_weight,
                                   type,
                                   carriage
                            FROM prod.air_pre_on_carriage
                            WHERE insert_date >= (current_date - 60)
                            ORDER BY insert_date
                            LIMIT 1) AS p60
                           ON m.via_loc = p60.via_loc AND m.loc = p60.loc AND m.from_weight = p60.from_weight AND
                              m.to_weight = p60.to_weight AND m.type = p60.type AND m.carriage = p60.carriage
                 LEFT JOIN (SELECT price,
                                   currency,
                                   via_loc,
                                   loc,
                                   from_weight,
                                   to_weight,
                                   type,
                                   carriage
                            FROM prod.air_pre_on_carriage
                            WHERE insert_date >= (current_date - 90)
                            ORDER BY insert_date
                            LIMIT 1) AS p90
                           ON m.via_loc = p90.via_loc AND m.loc = p90.loc AND m.from_weight = p90.from_weight AND
                              m.to_weight = p90.to_weight AND m.type = p90.type AND m.carriage = p90.carriage
                 LEFT JOIN (SELECT price,
                                   currency,
                                   via_loc,
                                   loc,
                                   from_weight,
                                   to_weight,
                                   type,
                                   carriage
                            FROM prod.air_pre_on_carriage
                            WHERE insert_date >= (current_date - 120)
                            ORDER BY insert_date
                            LIMIT 1) AS p120
                           ON m.via_loc = p120.via_loc AND m.loc = p120.loc AND m.from_weight = p120.from_weight AND
                              m.to_weight = p120.to_weight AND m.type = p120.type AND m.carriage = p120.carriage
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_sheet_index = p_tab_sheet_index);


        ------------------------------INSERT LINEHAUL CHARGES------------------------------
    ELSEIF p_table_name = 'air_linehaul' THEN
        INSERT INTO prod.document_charges("tenantId", document_serial, charge_type, qtty, units, price_value,
                                          price_currency_code, remarks, route_number, record_id, tab_sheet_index,
                                          last30d_value, last30d_currency_code, last60d_value, last60d_currency_code,
                                          last90d_value, last90d_currency_code, last120d_value, last120d_currency_code)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               concat_ws('-', 'Linehaul', m.linehaul_side),
               1,
               'Per KG',
               m.linehaul_per_kg,
               m.currency,
               concat_ws('|', concat('Min:', m.linehaul_min), concat('Remarks:', m.remarks)),
               m.route_number,
               m.record_id,
               m.tab_sheet_index,
               p30.linehaul_per_kg,
               p30.currency,
               p60.linehaul_per_kg,
               p60.currency,
               p90.linehaul_per_kg,
               p90.currency,
               p120.linehaul_per_kg,
               p120.currency
        FROM mrr.air_linehaul_pivot AS m
                 LEFT JOIN (SELECT linehaul_per_kg, currency, origin, destination
                            FROM prod.air_linehaul
                            WHERE insert_date >= (current_date - 30)
                            ORDER BY insert_date
                            LIMIT 1) AS p30 ON m.origin = p30.origin AND m.destination = p30.destination
                 LEFT JOIN (SELECT linehaul_per_kg, currency, origin, destination
                            FROM prod.air_linehaul
                            WHERE insert_date >= (current_date - 60)
                            ORDER BY insert_date
                            LIMIT 1) AS p60 ON m.origin = p60.origin AND m.destination = p60.destination
                 LEFT JOIN (SELECT linehaul_per_kg, currency, origin, destination
                            FROM prod.air_linehaul
                            WHERE insert_date >= (current_date - 90)
                            ORDER BY insert_date
                            LIMIT 1) AS p90 ON m.origin = p90.origin AND m.destination = p90.destination
                 LEFT JOIN (SELECT linehaul_per_kg, currency, origin, destination
                            FROM prod.air_linehaul
                            WHERE insert_date >= (current_date - 120)
                            ORDER BY insert_date
                            LIMIT 1) AS p120 ON m.origin = p120.origin AND m.destination = p120.destination
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_sheet_index = p_tab_sheet_index);


        ------------------------------INSERT WEIGHT BREAK CHARGES------------------------------
    ELSEIF p_table_name = 'air_weight_break' THEN
        INSERT INTO prod.document_charges("tenantId", document_serial, charge_type, qtty, units, price_value,
                                          price_currency_code, remarks, route_number, record_id, tab_sheet_index,
                                          last30d_value, last30d_currency_code, last60d_value, last60d_currency_code,
                                          last90d_value, last90d_currency_code, last120d_value, last120d_currency_code)
        SELECT '005237f9-6779-4c68-89d6-d0800559d4f4',
               m.document_serial,
               'Weight Break',
               1,
               'Per KG',
               m.rate,
               'USD',
               concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('Remarks:', m.remarks)),
               m.route_number,
               m.record_id,
               m.tab_sheet_index,
               p30.rate,
               p30.currency,
               p60.rate,
               p60.currency,
               p90.rate,
               p90.currency,
               p120.rate,
               p120.currency
        FROM mrr.air_weight_break AS m
                 LEFT JOIN (SELECT rate, 'USD' AS currency, from_weight, to_weight
                            FROM prod.air_weight_break
                            WHERE insert_date >= (current_date - 30)
                            ORDER BY insert_date
                            LIMIT 1) AS p30 ON m.from_weight = p30.from_weight AND m.to_weight = p30.to_weight
                 LEFT JOIN (SELECT rate, 'USD' AS currency, from_weight, to_weight
                            FROM prod.air_weight_break
                            WHERE insert_date >= (current_date - 60)
                            ORDER BY insert_date
                            LIMIT 1) AS p60 ON m.from_weight = p60.from_weight AND m.to_weight = p60.to_weight
                 LEFT JOIN (SELECT rate, 'USD' AS currency, from_weight, to_weight
                            FROM prod.air_weight_break
                            WHERE insert_date >= (current_date - 90)
                            ORDER BY insert_date
                            LIMIT 1) AS p90 ON m.from_weight = p90.from_weight AND m.to_weight = p90.to_weight
                 LEFT JOIN (SELECT rate, 'USD' AS currency, from_weight, to_weight
                            FROM prod.air_weight_break
                            WHERE insert_date >= (current_date - 120)
                            ORDER BY insert_date
                            LIMIT 1) AS p120 ON m.from_weight = p120.from_weight AND m.to_weight = p120.to_weight
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_sheet_index = p_tab_sheet_index);

    END IF;
END;
$$;

alter procedure prod.stardox_air_insert_doc_charges(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_update_doc_accepted_exceptions(p_doc_serial integer, p_tenant_id text,
                                                                 p_exception_id integer, p_accepted boolean,
                                                                 p_tab_sheet_index integer)
    language sql
as
$$
UPDATE prod.document_exceptions AS p
SET accepted = p_accepted
WHERE p."tenantId" = p_tenant_id
  AND p.document_serial = p_doc_serial
  AND p."exceptionId" = p_exception_id
  AND p.tab_sheet_index = p_tab_sheet_index
$$;

alter procedure prod.stardox_air_update_doc_accepted_exceptions(integer, text, integer, boolean, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_etl(p_document_serial integer, p_table_name text, p_tab_sheet_index integer)
    language sql
as
$$
CALL prod.stardox_air_pivot_doc_tables(p_document_serial, p_table_name, p_tab_sheet_index);
CALL prod.stardox_update_doc_table_name(p_document_serial, p_table_name);
CALL prod.stardox_air_create_doc_routes(p_document_serial, p_table_name, p_tab_sheet_index);
CALL prod.stardox_air_insert_doc_routes(p_document_serial, p_table_name, p_tab_sheet_index);
CALL prod.stardox_air_insert_doc_price_exceptions(p_document_serial, p_table_name, p_tab_sheet_index);
CALL prod.stardox_air_insert_doc_other_exceptions(p_document_serial, p_table_name, p_tab_sheet_index);
CALL prod.stardox_air_insert_doc_charges(p_document_serial, p_table_name,
                                         p_tab_sheet_index); ----NOT IN ETL, NEEDS TO BE CALLED AFTER UPDATING ACCEPTED EXCEPTION
--CALL prod.stardox_air_insert_doc_prod(p_document_serial, p_table_name, p_tab_sheet_index);

------------------------------
UPDATE prod.documents
SET document_status = 'ACTIVATED'
WHERE document_serial = p_document_serial;
$$;

alter procedure prod.stardox_air_etl(integer, text, integer) owner to "Postgresadmin";

create function prod.update_document_exceptions(p_tenantid text, p_document_serial integer, p_exception_id integer,
                                                p_accepted boolean)
    returns TABLE
            (
                p_document_serial integer
            )
    language sql
as
$$
UPDATE prod.document_exceptions
SET accepted=p_accepted
WHERE ("tenantId" = p_tenantid)
  AND ("document_serial" = p_document_serial)
  AND ("exceptionId" = p_exception_id)

RETURNING "document_serial";

$$;

alter function prod.update_document_exceptions(text, integer, integer, boolean) owner to "Postgresadmin";

create procedure prod.stardox_air_insert_doc_prod(p_document_serial integer, p_table_name text)
    language plpgsql
as
$$
BEGIN
    /* UPDATE ACTIVE STATUS - In order to set a charge in PRODUCTION to NON-ACTIVE, an update statement was used. in the FROM section of the
       statement the fields that makes a charge unique were selected and filtered to only show charges that all of the
       parts of that charge were accepted by the user.
       In the WHERE of the UPDATE, a check was made between the table in PRODUCTION to MRR to make sure that we are
       updating the correct charges.

       INSERT TO PRODUCTION - Insert to PRODUCTION only charges that all the parts of the charge were
       accepted by the user. This is done by checking the EXCEPTIONS table*/

    ----------------------------------------MAIN FREIGHT----------------------------------------
    --------------------MAIN FREIGHT - UPDATE ACTIVE STATUS--------------------
    IF p_table_name = 'air_main_freight'
    THEN
        UPDATE prod.air_main_freight AS p
        SET active = FALSE
        FROM (SELECT m.trade_lane,
                     m.pricing_period,
                     m.charge_type
              FROM mrr.air_main_freight_pivot AS m
              WHERE m.document_serial = p_document_serial
                AND m.record_id NOT IN (
                  SELECT e.record_id
                  FROM prod.document_exceptions AS e
                  WHERE e.document_serial = p_document_serial
                  GROUP BY e.document_serial,
                           e.tab_sheet_index,
                           e.record_id
                  HAVING bool_and(
                                 e.accepted) IS FALSE)) AS mr
        WHERE p.pricing_period = mr.pricing_period
          AND p.trade_lane = mr.trade_lane
          AND p.charge_type = mr.charge_type;

        --------------------MAIN FREIGHT - INSERT TO PROD--------------------
        INSERT
        INTO prod.air_main_freight(district, origin_country, origin_gateway_airport_code,
                                   dest_gateway_airport_code,
                                   dest_country, trade_lane, valid_from_date, valid_to_date, service_level,
                                   density,
                                   kff_volumeaugust_ytd, freight_currency, MIN, rate, charge_type,
                                   airline_text,
                                   transit_time_hours, remarks, min_trans_time_hours, max_trans_time_hours,
                                   pricing_period, document_serial, record_id, route_number, tab_sheet_index)
        SELECT district,
               origin_country,
               origin_gateway_airport_code,
               dest_gateway_airport_code,
               dest_country,
               trade_lane,
               valid_from_date,
               valid_to_date,
               service_level,
               density,
               kff_volumeaugust_ytd,
               freight_currency,
               MIN,
               rate,
               charge_type,
               airline_text,
               transit_time_hours,
               remarks,
               min_trans_time_hours,
               max_trans_time_hours,
               pricing_period,
               document_serial,
               record_id,
               route_number,
               tab_sheet_index
        FROM mrr.air_main_freight_pivot AS M
        WHERE M.document_serial = p_document_serial
          AND M.record_id NOT IN (
            SELECT e.record_id
            FROM prod.document_exceptions AS e
            WHERE e.document_serial = p_document_serial
            GROUP BY e.document_serial
                   , e.tab_sheet_index
                   , e.record_id
            HAVING bool_and(
                           e.accepted) IS FALSE);


        ----------------------------------------MARGINS----------------------------------------
        ---------------------MARGINS - UPDATE ACTIVE STATUS--------------------
    ELSEIF p_table_name = 'air_margins'
    THEN
        UPDATE prod.air_margins AS p
        SET active = FALSE
        FROM (SELECT m.air_type,
                     m.origin_country,
                     m.dest_country,
                     m.density_level,
                     m.service_level,
                     m.tier,
                     m.type,
                     m.margin_type
              FROM mrr.air_margins AS m
              WHERE m.document_serial = p_document_serial
                AND m.record_id NOT IN (
                  SELECT e.record_id
                  FROM prod.document_exceptions AS e
                  WHERE e.document_serial = p_document_serial
                  GROUP BY e.document_serial,
                           e.tab_sheet_index,
                           e.record_id
                  HAVING bool_and(
                                 e.accepted) IS FALSE)) AS mr
        WHERE mr.air_type = p.air_type
          AND mr.origin_country = p.origin_country
          AND mr.dest_country = p.dest_country
          AND mr.density_level = p.density_level
          AND mr.service_level = p.service_level
          AND mr.tier = p.tier
          AND mr.type = p.type
          AND mr.margin_type = p.margin_type;

        --------------------MARGINS - INSERT TO PRODUCTION--------------------
        INSERT INTO prod.air_margins(air_type, density_level, dest_country, dest_country_code, dest_country_region,
                                     margin_charge, margin_rate, margin_type, origin_country, origin_country_code,
                                     origin_country_region, service_level, "tenantId", tier, type, document_serial,
                                     record_id,
                                     route_number, valid_from_date, valid_to_date, tab_sheet_index)
        SELECT air_type,
               density_level,
               dest_country,
               dest_country_code,
               dest_country_region,
               margin_charge,
               margin_rate,
               margin_type,
               origin_country,
               origin_country_code,
               origin_country_region,
               service_level,
               "tenantId",
               tier,
               type,
               document_serial,
               record_id,
               route_number,
               valid_from_date,
               valid_to_date,
               tab_sheet_index
        FROM mrr.air_margins AS m
        WHERE m.document_serial = p_document_serial
          AND m.record_id NOT IN (
            SELECT e.record_id
            FROM prod.document_exceptions AS e
            WHERE e.document_serial = p_document_serial
            GROUP BY e.document_serial, e.tab_sheet_index, e.record_id
            HAVING bool_and(e.accepted) IS FALSE);


        ----------------------------------------LOCAL CHARGES----------------------------------------
        ---------------------LOCAL CHARGES - UPDATE ACTIVE STATUS-------------------
    ELSEIF p_table_name = 'air_local_charges'
    THEN
        UPDATE prod.air_local_charges AS p
        SET active = FALSE
        FROM (SELECT m."Airport",
                     m."charge_code",
                     m."Country",
                     m."District",
                     m."tier",
                     m."type"
              FROM mrr.air_local_charges AS m
              WHERE m.document_serial = p_document_serial
                AND m.record_id NOT IN (
                  SELECT e.record_id
                  FROM prod.document_exceptions AS e
                  WHERE e.document_serial = p_document_serial
                  GROUP BY e.document_serial,
                           e.tab_sheet_index,
                           e.record_id
                  HAVING bool_and(
                                 e.accepted) IS FALSE)) AS mr
        WHERE mr."Airport" = p."Airport"
          AND mr."charge_code" = p."charge_code"
          AND mr."Country" = p."Country"
          AND mr."District" = p."District"
          AND mr."tier" = p."tier"
          AND mr."type" = p."type";

        --------------------LOCAL CHARGES - INSERT TO PRODUCTION--------------------
        INSERT INTO prod.air_local_charges("Country", "Currency", "District", charge_code, charge_name, hour, min, rate,
                                           remarks, unit, "Airport", tier, type, document_serial, record_id,
                                           route_number,
                                           tab_sheet_index)
        SELECT "Country",
               "Currency",
               "District",
               charge_code,
               charge_name,
               hour,
               min,
               rate,
               remarks,
               unit,
               "Airport",
               tier,
               type,
               document_serial,
               record_id,
--             valid_from_date,
--             valid_to_date,
               route_number,
               tab_sheet_index
        FROM mrr.air_local_charges AS m
        WHERE m.document_serial = p_document_serial
          AND m.record_id NOT IN (
            SELECT e.record_id
            FROM prod.document_exceptions AS e
            WHERE e.document_serial = p_document_serial
            GROUP BY e.document_serial, e.tab_sheet_index, e.record_id
            HAVING bool_and(e.accepted) IS FALSE);


        ----------------------------------------PRE/ON CARRIAGE----------------------------------------
        --------------------PRE/ON CARRIAGE - UPDATE ACTIVE STATUS--------------------
    ELSEIF p_table_name = 'air_pre_on_carriage'
    THEN
        UPDATE prod.air_pre_on_carriage AS p
        SET active = FALSE
        FROM (SELECT m.via_loc,
                     m.loc,
                     m.from_weight,
                     m.to_weight,
                     m.type,
                     m.carriage
              FROM mrr.air_pre_on_carriage AS m
              WHERE m.document_serial = p_document_serial
                AND m.record_id NOT IN (
                  SELECT e.record_id
                  FROM prod.document_exceptions AS e
                  WHERE e.document_serial = p_document_serial
                  GROUP BY e.document_serial,
                           e.tab_sheet_index,
                           e.record_id
                  HAVING bool_and(
                                 e.accepted) IS FALSE)) AS mr
        WHERE mr.via_loc = p.via_loc
          AND mr.loc = p.loc
          AND mr.from_weight = p.from_weight
          AND mr.to_weight = p.to_weight
          AND mr.type = p.type
          AND mr.carriage = p.carriage;

        --------------------PRE/ON CARRIAGE - INSERT TO PRODUCTION--------------------
        INSERT INTO prod.air_pre_on_carriage(via_loc, loc, from_weight, to_weight, price, currency, min, max, unit,
                                             type,
                                             comment, carriage, ratio, via_loc_port, loc_port, valid_from_date,
                                             valid_to_date,
                                             document_serial, record_id, route_number, terms,
                                             tab_sheet_index)
        SELECT via_loc,
               loc,
               from_weight,
               to_weight,
               price,
               currency,
               min,
               max,
               unit,
               type,
               comment,
               carriage,
               ratio,
               via_loc_port,
               loc_port,
               valid_from_date,
               valid_to_date,
               document_serial,
               record_id,
               route_number,
               terms,
               tab_sheet_index
        FROM mrr.air_pre_on_carriage AS m
        WHERE m.document_serial = p_document_serial
          AND m.record_id NOT IN (
            SELECT e.record_id
            FROM prod.document_exceptions AS e
            WHERE e.document_serial = p_document_serial
            GROUP BY e.document_serial, e.tab_sheet_index, e.record_id
            HAVING bool_and(e.accepted) IS FALSE);


        ----------------------------------------LINEHAUL----------------------------------------
        ------------------------------LINEHAUL - UPDATE ACTIVE STATUS------------------------------
    ELSEIF p_table_name = 'air_linehaul'
    THEN
        UPDATE prod.air_linehaul AS p
        SET active = FALSE
        FROM (SELECT m.origin,
                     m.destination
              FROM mrr.air_linehaul_pivot AS m
              WHERE m.document_serial = p_document_serial
                AND m.record_id NOT IN (
                  SELECT e.record_id
                  FROM prod.document_exceptions AS e
                  WHERE e.document_serial = p_document_serial
                  GROUP BY e.document_serial,
                           e.tab_sheet_index,
                           e.record_id
                  HAVING bool_and(
                                 e.accepted) IS FALSE)) AS mr
        WHERE mr.origin = p.origin
          AND mr.destination = p.destination;

        ------------------------------LINEHAUL - INSERT TO PRODUCTION------------------------------
        INSERT INTO prod.air_linehaul(linehaul_side, district, region, country_code, origin, destination, currency,
                                      gateway_hub_cost_min, gateway_hub_cost_max, gateway_hub_cost_per_kg, linehaul_min,
                                      linehaul_per_kg, linehaul_full_truck_rate, linehaul_full_truck_max_capacity,
                                      transit_time_to_gateway_hours, remarks, valid_from_date, valid_to_date,
                                      transit_time_to_gateway_hours_min, transit_time_to_gateway_hours_max,
                                      document_serial,
                                      record_id, route_number, tab_sheet_index)
        SELECT linehaul_side,
               district,
               region,
               country_code,
               origin,
               destination,
               currency,
               gateway_hub_cost_min,
               gateway_hub_cost_max,
               gateway_hub_cost_per_kg,
               linehaul_min,
               linehaul_per_kg,
               linehaul_full_truck_rate,
               linehaul_full_truck_max_capacity,
               transit_time_to_gateway_hours,
               remarks,
               valid_from_date,
               valid_to_date,
               transit_time_to_gateway_hours_min,
               transit_time_to_gateway_hours_max,
               document_serial,
               record_id,
               route_number,
               tab_sheet_index
        FROM mrr.air_linehaul_pivot AS m
        WHERE m.document_serial = p_document_serial
          AND m.record_id NOT IN (
            SELECT e.record_id
            FROM prod.document_exceptions AS e
            WHERE e.document_serial = p_document_serial
            GROUP BY e.document_serial, e.tab_sheet_index, e.record_id
            HAVING bool_and(e.accepted) IS FALSE);


        ----------------------------------------WEIGHT BREAK----------------------------------------
        ------------------------------WEIGHT BREAK - UPDATE ACTIVE STATUS------------------------------
    ELSEIF p_table_name = 'air_weight_break'
    THEN
        UPDATE prod.air_weight_break AS p
        SET active = FALSE
        FROM (SELECT m.from_weight,
                     m.to_weight
              FROM mrr.air_weight_break AS m
              WHERE m.document_serial = p_document_serial
                AND m.record_id NOT IN (
                  SELECT e.record_id
                  FROM prod.document_exceptions AS e
                  WHERE e.document_serial = p_document_serial
                  GROUP BY e.document_serial,
                           e.tab_sheet_index,
                           e.record_id
                  HAVING bool_and(
                                 e.accepted) IS FALSE)) AS mr
        WHERE mr.from_weight = p.from_weight
          AND mr.to_weight = p.to_weight;

        ------------------------------WEIGHT BREAK - INSERT TO PRODUCTION------------------------------
        INSERT INTO prod.air_weight_break(from_weight, to_weight, rate, remarks, document_serial, record_id,
                                          route_number,
                                          tab_sheet_index)
        SELECT from_weight,
               to_weight,
               rate,
               remarks,
               document_serial,
               record_id,
--             valid_from_date,
--             valid_to_date,
               route_number,
               tab_sheet_index
        FROM mrr.air_weight_break AS m
        WHERE m.document_serial = p_document_serial
          AND m.record_id NOT IN (
            SELECT e.record_id
            FROM prod.document_exceptions AS e
            WHERE e.document_serial = p_document_serial
            GROUP BY e.document_serial, e.tab_sheet_index, e.record_id
            HAVING bool_and(e.accepted) IS FALSE);

    END IF;
END ;
$$;

alter procedure prod.stardox_air_insert_doc_prod(integer, text) owner to "Postgresadmin";

create function prod.get_document_data(p_tenant_id text, p_document_id uuid)
    returns TABLE
            (
                "tenantId"      text,
                "documentId"    uuid,
                document_serial integer,
                expired_in_min  integer,
                document_name   text,
                recieved_date   timestamp without time zone,
                document_type   text,
                table_name      text
            )
    language sql
as
$$
SELECT "tenantId"        as tenantId,
       "documentId"      as documentId,
       "document_serial" as document_serial,
       "expired_in_min"  as expired_in_min,
       "document_name"   as document_name,
       "received_date"   as received_date,
       "document_type"   as document_type,
       table_name        as table_name
FROM prod.documents
WHERE "tenantId" = p_tenant_id
  AND "documentId" = p_document_id

$$;

alter function prod.get_document_data(text, uuid) owner to "Postgresadmin";

create procedure prod.stardox_air_insert_doc_other_exceptions(p_document_serial integer, p_table_name text,
                                                              p_tab_sheet_index integer)
    language plpgsql
as
$$
BEGIN
    ----------------------------------------MAIN FREIGHT----------------------------------------
    IF p_table_name = 'air_main_freight'
    THEN
        ---------------------MAIN FREIGHT VALIDITY EXCEPTION---------------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', m.service_level, m.density, m.transit_time_hours, m.airline_text),
               'Main Freight - Validity',
               m.valid_from_date,
               concat_ws(',', m.dest_country, m.dest_gateway_airport_code),
               m.document_serial,
               'OTHER',
               concat_ws(',', m.origin_country, m.origin_gateway_airport_code),
               p.valid_to_date,
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_main_freight AS m
                 INNER JOIN prod.air_main_freight AS p
                            ON m.pricing_period = p.pricing_period
                                AND m.trade_lane = p.trade_lane
                                AND p.active = TRUE
                                AND m.valid_from_date > p.valid_to_date

        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;


        ----------------------------------------MARGINS----------------------------------------
    ELSEIF
        p_table_name = 'air_margins'
    THEN
        ---------------------MARGINS SERVICE LEVEL EXCEPTION---------------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', m.density_level, m.tier, m.margin_type, m.type, m.service_level),
               'Margins - Service Level',
               m.service_level,
               concat_ws(',', m.dest_country_region, m.dest_country),
               m.document_serial,
               'OTHER',
               concat_ws(',', m.origin_country_region, m.origin_country),
               p.service_level,
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_margins AS m
                 INNER JOIN prod.air_margins AS p
                            ON m.air_type = p.air_type
                                AND m.origin_country = p.origin_country
                                AND m.dest_country = p.dest_country
                                AND m.density_level = p.density_level
                                AND p.active = TRUE
                                AND m.service_level != p.service_level
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------MARGINS DENSITY EXCEPTION---------------------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_value, record_id, tab_sheet_index, "tenantId", tab_sheet_index)
        SELECT concat_ws('|', m.density_level, m.tier, m.margin_type, m.type, m.service_level),
               'Margins - Service Level',
               m.density_level,
               concat_ws(',', m.dest_country_region, m.dest_country),
               m.document_serial,
               'OTHER',
               concat_ws(',', m.origin_country_region, m.origin_country),
               p.density_level,
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_margins AS m
                 INNER JOIN prod.air_margins AS p
                            ON m.air_type = p.air_type
                                AND m.origin_country = p.origin_country
                                AND m.dest_country = p.dest_country
                                AND m.density_level != p.density_level
                                AND m.service_level = p.service_level
                                AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;


        ----------------------------------------LOCAL CHARGES----------------------------------------
    ELSEIF
        p_table_name = 'air_local_charges'
    THEN
        ---------------------LOCAL CHARGES UNIT TYPE EXCEPTION-------------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Tier ', m.tier), concat('Minimum: ', m.min), m.unit, m.hour),
               concat_ws('-', m.charge_code, m.charge_name, 'perUnitType Changed'),
               m."unit",
               CASE
                   WHEN lower(m.type) = 'dest'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'general'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'origin'
                       THEN NULL
                   END,
               m.document_serial,
               'OTHER',
               CASE
                   WHEN lower(m.type) = 'origin'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'general'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'dest'
                       THEN NULL
                   END,
               p."unit",
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_local_charges AS m
                 INNER JOIN prod.air_local_charges AS p
                            ON
                                    m."Airport" = p."Airport"
                                    AND m."charge_code" = p."charge_code"
                                    AND m."Country" = p."Country"
                                    AND m."District" = p."District"
                                    AND m."tier" = p."tier"
                                    AND m."type" = p."type"
                                    AND m."unit" != p."unit"
                                    AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------LOCAL CHARGES TRANSIT TIME EXCEPTION----------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Tier ', m.tier), concat('Minimum: ', m.min), m.unit, m.hour),
               concat_ws('-', m.charge_code, m.charge_name, 'Transit Time Changed'),
               m.hour,
               CASE
                   WHEN lower(m.type) = 'dest'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'general'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'origin'
                       THEN NULL
                   END,
               m.document_serial,
               'OTHER',
               CASE
                   WHEN lower(m.type) = 'origin'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'general'
                       THEN concat_ws(',', m."District", m."Country")
                   WHEN lower(m.type) = 'dest'
                       THEN NULL
                   END,
               p.hour,
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_local_charges AS m
                 INNER JOIN prod.air_local_charges AS p
                            ON
                                    m."Airport" = p."Airport"
                                    AND m."charge_code" = p."charge_code"
                                    AND m."Country" = p."Country"
                                    AND m."District" = p."District"
                                    AND m."tier" = p."tier"
                                    AND m."type" = p."type"
                                    AND m.hour != p.hour
                                    AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;


        ----------------------------------------PRE/ON CARRIAGE----------------------------------------
        ---------------------PRE/ON CARRIAGE RATIO EXCEPTION---------------------------
    ELSEIF
        p_table_name = 'air_pre_on_carriage'
    THEN
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat(m.from_weight, '-', m.to_weight), m.unit, m.type, m.ratio),
               CASE
                   WHEN lower(m.carriage) = 'on'
                       THEN 'Air On-Carriage - Ratio Changed'
                   WHEN lower(m.carriage) = 'pre'
                       THEN 'Air Pre-Carriage - Ratio Changed'
                   END,
               m.ratio,
               m.loc,
               m.document_serial,
               'OTHER',
               m.via_loc,
               p.ratio,
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_pre_on_carriage AS m
                 INNER JOIN prod.air_pre_on_carriage AS p
                            ON m.via_loc = p.via_loc
                                AND m.loc = p.loc
                                AND m.from_weight = p.from_weight
                                AND m.to_weight = p.to_weight
                                AND m.type = p.type
                                AND m.carriage = p.carriage
                                AND m.ratio != p.ratio
                                AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;


        ----------------------------------------WEIGHT BREAK----------------------------------------
    ELSEIF
        p_table_name = 'air_weight_break'
    THEN
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat(m.from_weight, '-', m.to_weight)),
               'Weight Break',
               'USD',
               round(CAST(m.rate AS NUMERIC), 4),
               NULL,
               m.document_serial,
               'OTHER',
               NULL,
               'USD',
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_weight_break AS m
                 INNER JOIN prod.air_weight_break AS p
                            ON m.from_weight = p.from_weight
                                AND m.to_weight = p.to_weight
                                AND p.active = TRUE
                                AND round(CAST(m.rate AS NUMERIC), 4) !=
                                    round(CAST(p.rate AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
    END IF;

    ----------------------------------------UPDATE NUMBER OF OTHER EXCEPTIONS----------------------------------------
    UPDATE prod.document_tabsheets
    SET number_of_price_exceptions = (
        SELECT COUNT(e."exceptionId")
        FROM prod.document_exceptions AS e
        WHERE e.exception_kind = 'OTHER'
          AND e.document_serial = p_document_serial
          AND e.tab_sheet_index = p_tab_sheet_index)
    WHERE document_tabsheets.document_serial = p_document_serial
      AND document_tabsheets.tab_sheet_index = p_tab_sheet_index;
END;
$$;

alter procedure prod.stardox_air_insert_doc_other_exceptions(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_insert_doc_price_exceptions(p_document_serial integer, p_table_name text,
                                                              p_tab_sheet_index integer)
    language plpgsql
as
$$
BEGIN
    ----------------------------------------MAIN FREIGHT----------------------------------------
    IF p_table_name = 'air_main_freight' THEN
        ---------------------MAINFREIGHT PRICE/CURRENCY EXCEPTIONS--------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('SL:', m.service_level), concat('Density:', m.density),
                         concat('TransTime:', m.transit_time_hours), concat('AirlineText:', m.airline_text)),
               concat_ws('-', 'Main Freight', m.charge_type),
               m.freight_currency,
               round(CAST(m.rate AS NUMERIC), 4),
               concat_ws(',', m.dest_country, m.dest_gateway_airport_code),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country, m.origin_gateway_airport_code),
               p.freight_currency,
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_main_freight_pivot AS m
                 INNER JOIN prod.air_main_freight AS p
                            ON m.pricing_period = p.pricing_period AND m.trade_lane = p.trade_lane
                                AND m.charge_type = p.charge_type AND p.active = TRUE
                                AND (round(CAST(m.rate AS NUMERIC), 4)
                                         != round(CAST(p.rate AS NUMERIC), 4)
                                    OR m.freight_currency != p.freight_currency)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------MAINFREIGHT PRICE - MINIMUM EXCEPTIONS-------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('SL:', m.service_level), concat('Density:', m.density),
                         concat('TransTime:', m.transit_time_hours), concat('AirlineText:', m.airline_text)),
               concat_ws('-', 'Main Freight', m.charge_type, 'Minimum Change'),
               m.freight_currency,
               round(CAST(m.min AS NUMERIC), 4),
               concat_ws(',', m.dest_country, m.dest_gateway_airport_code),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country, m.origin_gateway_airport_code),
               p.freight_currency,
               round(CAST(p.min AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_main_freight_pivot AS m
                 INNER JOIN prod.air_main_freight AS p
                            ON m.pricing_period = p.pricing_period AND m.trade_lane = p.trade_lane
                                AND m.charge_type = p.charge_type AND p.active = TRUE
                                AND round(CAST(m.min AS NUMERIC), 4)
                                   != round(CAST(p.min AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------MAINFREIGHT EXCEPTIONS - ONLY IN CURRENT DOCUMENT--------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('SL:', m.service_level), concat('Density:', m.density),
                         concat('TransTime:', m.transit_time_hours), concat('AirlineText:', m.airline_text)),
               concat_ws('-', 'Main Freight', m.charge_type, 'Minimum Change'),
               m.freight_currency,
               round(CAST(m.min AS NUMERIC), 4),
               concat_ws(',', m.dest_country, m.dest_gateway_airport_code),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country, m.origin_gateway_airport_code),
               p.freight_currency,
               round(CAST(p.min AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_main_freight_pivot AS m
                 LEFT JOIN prod.air_main_freight AS p
                           ON m.pricing_period = p.pricing_period AND m.trade_lane = p.trade_lane
                               AND m.charge_type = p.charge_type AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND p.pricing_period IS NULL
          AND p.trade_lane IS NULL
          AND p.charge_type IS NULL;
        ---------------------MAINFREIGHT EXCEPTIONS - ONLY IN PREVIOUS DOCUMENT-------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('SL:', m.service_level), concat('Density:', m.density),
                         concat('TransTime:', m.transit_time_hours), concat('AirlineText:', m.airline_text)),
               concat_ws('-', 'Main Freight', m.charge_type, 'Minimum Change'),
               m.freight_currency,
               round(CAST(m.min AS NUMERIC), 4),
               concat_ws(',', m.dest_country, m.dest_gateway_airport_code),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country, m.origin_gateway_airport_code),
               p.freight_currency,
               round(CAST(p.min AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_main_freight_pivot AS m
                 RIGHT JOIN prod.air_main_freight AS p
                            ON m.pricing_period = p.pricing_period AND m.trade_lane = p.trade_lane
                                AND m.charge_type = p.charge_type AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.pricing_period IS NULL
          AND m.trade_lane IS NULL
          AND m.charge_type IS NULL;

        ----------------------------------------MARGINS----------------------------------------
    ELSEIF p_table_name = 'air_margins' THEN
        ---------------------MARGINS PRICE EXCEPTIONS----------------------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Density:', m.density_level), concat('Tier:', m.tier),
                         concat('MarginType:', m.margin_type), concat('Type:', m.type), concat('SL:', m.service_level)),
               concat_ws('-', 'Margins', m.air_type),
               CASE WHEN m.margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END,
               round(CAST(m.margin_rate AS NUMERIC), 4),
               concat_ws(',', m.dest_country_region, m.dest_country),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country_region, m.origin_country),
               CASE WHEN p.margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END,
               round(CAST(p.margin_rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_margins AS m
                 INNER JOIN prod.air_margins AS p
                            ON m.air_type = p.air_type AND m.origin_country = p.origin_country
                                AND m.dest_country = p.dest_country AND m.density_level = p.density_level
                                AND m.service_level = p.service_level AND m.tier = p.tier AND m.type = p.type
                                AND m.margin_type = p.margin_type AND p.active = TRUE
                                AND round(CAST(m.margin_rate AS NUMERIC), 4)
                                   != round(CAST(p.margin_rate AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------MARGINS EXCEPTIONS - ONLY IN CURRENT DOCUMENT-------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Density:', m.density_level), concat('Tier:', m.tier),
                         concat('MarginType:', m.margin_type), concat('Type:', m.type), concat('SL:', m.service_level)),
               concat_ws('-', 'Margins', m.air_type),
               CASE WHEN m.margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END,
               round(CAST(m.margin_rate AS NUMERIC), 4),
               concat_ws(',', m.dest_country_region, m.dest_country),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country_region, m.origin_country),
               CASE WHEN p.margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END,
               round(CAST(p.margin_rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_margins AS m
                 LEFT JOIN prod.air_margins AS p
                           ON m.air_type = p.air_type AND m.origin_country = p.origin_country
                               AND m.dest_country = p.dest_country AND m.density_level = p.density_level
                               AND m.service_level = p.service_level AND m.tier = p.tier AND m.type = p.type
                               AND m.margin_type = p.margin_type AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND p.air_type IS NULL
          AND p.origin_country IS NULL
          AND p.dest_country IS NULL
          AND p.density_level IS NULL
          AND p.service_level IS NULL
          AND p.tier IS NULL
          AND p.type IS NULL
          AND p.margin_type IS NULL;
        ---------------------MARGINS EXCEPTIONS - ONLY IN PREVIOUS DOCUMENT------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Density:', m.density_level), concat('Tier:', m.tier),
                         concat('MarginType:', m.margin_type), concat('Type:', m.type), concat('SL:', m.service_level)),
               concat_ws('-', 'Margins', m.air_type),
               CASE WHEN m.margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END,
               round(CAST(m.margin_rate AS NUMERIC), 4),
               concat_ws(',', m.dest_country_region, m.dest_country),
               m.document_serial,
               'PRICE',
               concat_ws(',', m.origin_country_region, m.origin_country),
               CASE WHEN p.margin_charge = 'dollar' THEN 'USD' ELSE 'Percentage' END,
               round(CAST(p.margin_rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_margins AS m
                 RIGHT JOIN prod.air_margins AS p
                            ON m.air_type = p.air_type AND m.origin_country = p.origin_country
                                AND m.dest_country = p.dest_country AND m.density_level = p.density_level
                                AND m.service_level = p.service_level AND m.tier = p.tier AND m.type = p.type
                                AND m.margin_type = p.margin_type AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.air_type IS NULL
          AND m.origin_country IS NULL
          AND m.dest_country IS NULL
          AND m.density_level IS NULL
          AND m.service_level IS NULL
          AND m.tier IS NULL
          AND m.type IS NULL
          AND m.margin_type IS NULL;

        ----------------------------------------LOCAL CHARGES----------------------------------------
    ELSEIF p_table_name = 'air_local_charges' THEN
        ---------------------LOCAL CHARGES PRICE/CURRENCY EXCEPTIONS-------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Tier:', m.tier), concat('Minimum:', m.min), concat('UnitType:', m.unit),
                         concat('TransTime:', m.hour)),
               concat_ws('-', m.charge_code, m.charge_name),
               m."Currency",
               round(CAST(m.rate AS NUMERIC), 4),
               CASE
                   WHEN lower(m.type) = 'dest' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws('', '', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'origin' THEN NULL
                   END,
               m.document_serial,
               'PRICE',
               CASE
                   WHEN lower(m.type) = 'origin' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'dest' THEN NULL
                   END,
               p."Currency",
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_local_charges AS m
                 INNER JOIN prod.air_local_charges AS p
                            ON m."Airport" = p."Airport" AND m."charge_code" = p."charge_code"
                                AND m."Country" = p."Country" AND m."District" = p."District"
                                AND m."tier" = p."tier" AND m."type" = p."type" AND p.active = TRUE
                                AND (round(CAST(m.rate AS NUMERIC), 4)
                                         != round(CAST(p.rate AS NUMERIC), 4)
                                    OR m."Currency" != p."Currency")
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------LOCAL CHARGES EXCEPTIONS - ONLY IN CURRENT DOCUMENT-------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Tier:', m.tier), concat('Minimum:', m.min), concat('UnitType:', m.unit),
                         concat('TransTime:', m.hour)),
               concat_ws('-', m.charge_code, m.charge_name),
               m."Currency",
               round(CAST(m.rate AS NUMERIC), 4),
               CASE
                   WHEN lower(m.type) = 'dest' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws('', '', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'origin' THEN NULL
                   END,
               m.document_serial,
               'PRICE',
               CASE
                   WHEN lower(m.type) = 'origin' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'dest' THEN NULL
                   END,
               p."Currency",
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_local_charges AS m
                 LEFT JOIN prod.air_local_charges AS p
                           ON m."Airport" = p."Airport" AND m."charge_code" = p."charge_code"
                               AND m."Country" = p."Country" AND m."District" = p."District"
                               AND m."tier" = p."tier" AND m."type" = p."type" AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND p."Airport" IS NULL
          AND p."charge_code" IS NULL
          AND p."Country" IS NULL
          AND p."District" IS NULL
          AND p."tier" IS NULL
          AND p."type" IS NULL;
        ---------------------LOCAL CHARGES EXCEPTIONS - ONLY IN PREVIOUS DOCUMENT------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Tier:', m.tier), concat('Minimum:', m.min), concat('UnitType:', m.unit),
                         concat('TransTime:', m.hour)),
               concat_ws('-', m.charge_code, m.charge_name),
               m."Currency",
               round(CAST(m.rate AS NUMERIC), 4),
               CASE
                   WHEN lower(m.type) = 'dest' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws('', '', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'origin' THEN NULL
                   END,
               m.document_serial,
               'PRICE',
               CASE
                   WHEN lower(m.type) = 'origin' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'dest' THEN NULL
                   END,
               p."Currency",
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_local_charges AS m
                 RIGHT JOIN prod.air_local_charges AS p
                            ON m."Airport" = p."Airport" AND m."charge_code" = p."charge_code"
                                AND m."Country" = p."Country" AND m."District" = p."District"
                                AND m."tier" = p."tier" AND m."type" = p."type" AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m."Airport" IS NULL
          AND m."charge_code" IS NULL
          AND m."Country" IS NULL
          AND m."District" IS NULL
          AND m."tier" IS NULL
          AND m."type" IS NULL;
        ---------------------LOCAL CHARGES PRICE - MINIMUM EXCEPTIONS------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Tier:', m.tier), concat('Minimum:', m.min), concat('UnitType:', m.unit),
                         concat('TransTime:', m.hour)),
               concat_ws('-', m.charge_code, m.charge_name, 'Minimum Change'),
               m."Currency",
               round(CAST(m.min AS NUMERIC), 4),
               CASE
                   WHEN lower(m.type) = 'dest' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws('', '', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'origin' THEN NULL
                   END,
               m.document_serial,
               'PRICE',
               CASE
                   WHEN lower(m.type) = 'origin' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'general' THEN concat_ws(',', m."District", m."Country", m."Airport")
                   WHEN lower(m.type) = 'dest' THEN NULL
                   END,
               p."Currency",
               round(CAST(p.min AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_local_charges AS m
                 INNER JOIN prod.air_local_charges AS p
                            ON m."Airport" = p."Airport" AND m."charge_code" = p."charge_code"
                                AND m."Country" = p."Country" AND m."District" = p."District"
                                AND m."tier" = p."tier" AND m."type" = p."type" AND p.active = TRUE
                                AND round(CAST(m.min AS NUMERIC), 4) != round(CAST(p.min AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;

        ----------------------------------------PRE/ON CARRIAGE----------------------------------------
    ELSEIF p_table_name = 'air_pre_on_carriage' THEN
        ---------------------PRE/ON CARRIAGE PRICE/CURRENCY EXCEPTIONS-----------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('UnitType:', m.unit), concat('Type:', m.type), concat('Ratio:', m.ratio)),
               CASE
                   WHEN lower(m.carriage) = 'on' THEN 'Air On-Carriage'
                   WHEN lower(m.carriage) = 'pre' THEN 'Air Pre-Carriage'
                   END,
               m.currency,
               round(CAST(m.price AS NUMERIC), 4),
               m.loc,
               m.document_serial,
               'PRICE',
               m.via_loc,
               p.currency,
               round(CAST(p.price AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_pre_on_carriage AS m
                 INNER JOIN prod.air_pre_on_carriage AS p
                            ON m.via_loc = p.via_loc AND m.loc = p.loc AND m.from_weight = p.from_weight
                                AND m.to_weight = p.to_weight AND m.type = p.type
                                AND m.carriage = p.carriage AND p.active = TRUE
                                AND (round(CAST(m.price AS NUMERIC), 4)
                                         != round(CAST(p.price AS NUMERIC), 4) OR m.currency != p.currency)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------PRE/ON CARRIAGE EXCEPTIONS - ONLY IN CURRENT DOCUMENT-----
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('UnitType:', m.unit), concat('Type:', m.type), concat('Ratio:', m.ratio)),
               CASE
                   WHEN lower(m.carriage) = 'on' THEN 'Air On-Carriage'
                   WHEN lower(m.carriage) = 'pre' THEN 'Air Pre-Carriage'
                   END,
               m.currency,
               round(CAST(m.price AS NUMERIC), 4),
               m.loc,
               m.document_serial,
               'PRICE',
               m.via_loc,
               p.currency,
               round(CAST(p.price AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_pre_on_carriage AS m
                 LEFT JOIN prod.air_pre_on_carriage AS p
                           ON m.via_loc = p.via_loc AND m.loc = p.loc AND m.from_weight = p.from_weight
                               AND m.to_weight = p.to_weight AND m.type = p.type
                               AND m.carriage = p.carriage AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND p.via_loc IS NULL
          AND p.loc IS NULL
          AND p.from_weight IS NULL
          AND p.to_weight IS NULL
          AND p.type IS NULL
          AND p.carriage IS NULL;
        ---------------------PRE/ON CARRIAGE EXCEPTIONS - ONLY IN PREVIOUS DOCUMENT----
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('UnitType:', m.unit), concat('Type:', m.type), concat('Ratio:', m.ratio)),
               CASE
                   WHEN lower(m.carriage) = 'on' THEN 'Air On-Carriage'
                   WHEN lower(m.carriage) = 'pre' THEN 'Air Pre-Carriage'
                   END,
               m.currency,
               round(CAST(m.price AS NUMERIC), 4),
               m.loc,
               m.document_serial,
               'PRICE',
               m.via_loc,
               p.currency,
               round(CAST(p.price AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_pre_on_carriage AS m
                 RIGHT JOIN prod.air_pre_on_carriage AS p
                            ON m.via_loc = p.via_loc AND m.loc = p.loc AND m.from_weight = p.from_weight
                                AND m.to_weight = p.to_weight AND m.type = p.type
                                AND m.carriage = p.carriage AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.via_loc IS NULL
          AND m.loc IS NULL
          AND m.from_weight IS NULL
          AND m.to_weight IS NULL
          AND m.type IS NULL
          AND m.carriage IS NULL;
        ---------------------PRE/ON CARRIAGE PRICE - MINIMUM EXCEPTIONS----------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('UnitType:', m.unit), concat('Type:', m.type), concat('Ratio:', m.ratio)),
               CASE
                   WHEN lower(m.carriage) = 'on' THEN 'Air On-Carriage - Minimum Changed'
                   WHEN lower(m.carriage) = 'pre' THEN 'Air Pre-Carriage - Minimum Changed'
                   END,
               m.currency,
               round(CAST(m.min AS NUMERIC), 4),
               m.loc,
               m.document_serial,
               'PRICE',
               m.via_loc,
               p.currency,
               round(CAST(p.min AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_pre_on_carriage AS m
                 INNER JOIN prod.air_pre_on_carriage AS p
                            ON m.via_loc = p.via_loc AND m.loc = p.loc AND m.from_weight = p.from_weight
                                AND m.to_weight = p.to_weight AND m.type = p.type
                                AND m.carriage = p.carriage AND p.active = TRUE
                                AND round(CAST(m.min AS NUMERIC), 4)
                                   != round(CAST(p.min AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ---------------------PRE/ON CARRIAGE PRICE - MAXIMUM EXCEPTIONS----------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight),
                         concat('UnitType:', m.unit), concat('Type:', m.type), concat('Ratio:', m.ratio)),
               CASE
                   WHEN lower(m.carriage) = 'on' THEN 'Air On-Carriage - Maximum Changed'
                   WHEN lower(m.carriage) = 'pre' THEN 'Air Pre-Carriage - Maximum Changed'
                   END,
               m.currency,
               round(CAST(m.max AS NUMERIC), 4),
               m.loc,
               m.document_serial,
               'PRICE',
               m.via_loc,
               p.currency,
               round(CAST(p.max AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_pre_on_carriage AS m
                 INNER JOIN prod.air_pre_on_carriage AS p
                            ON m.via_loc = p.via_loc AND m.loc = p.loc AND m.from_weight = p.from_weight
                                AND m.to_weight = p.to_weight AND m.type = p.type
                                AND m.carriage = p.carriage AND p.active = TRUE
                                AND round(CAST(m.max AS NUMERIC), 4)
                                   != round(CAST(p.max AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;

        ----------------------------------------LINEHAUL----------------------------------------
    ELSEIF p_table_name = 'air_linehaul' THEN
        -----------------------LINEHAUL PRICE/CURRENCY EXCEPTIONS-----------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Min:', m.linehaul_min)),
               'Linehaul',
               m.currency,
               round(CAST(m.linehaul_per_kg AS NUMERIC), 4),
               m.destination,
               m.document_serial,
               'PRICE',
               m.origin,
               p.currency,
               round(CAST(p.linehaul_per_kg AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_linehaul_pivot AS m
                 INNER JOIN prod.air_linehaul AS p
                            ON m.origin = p.origin AND m.destination = p.destination AND p.active = TRUE
                                AND (round(CAST(m.linehaul_per_kg AS NUMERIC), 4)
                                         != round(CAST(p.linehaul_per_kg AS NUMERIC), 4)
                                    OR m.currency != p.currency)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        ------------------------LINEHAUL EXCEPTIONS - ONLY IN CURRENT DOCUMENT----------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Min:', m.linehaul_min)),
               'Linehaul',
               m.currency,
               round(CAST(m.linehaul_per_kg AS NUMERIC), 4),
               m.destination,
               m.document_serial,
               'PRICE',
               m.origin,
               p.currency,
               round(CAST(p.linehaul_per_kg AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_linehaul_pivot AS m
                 LEFT JOIN prod.air_linehaul AS p
                           ON m.origin = p.origin AND m.destination = p.destination AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND p.origin IS NULL
          AND p.destination IS NULL;
        ---------------------LINEHAUL EXCEPTIONS - ONLY IN PREVIOUS DOCUMENT----------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Min:', m.linehaul_min)),
               'Linehaul',
               m.currency,
               round(CAST(m.linehaul_per_kg AS NUMERIC), 4),
               m.destination,
               m.document_serial,
               'PRICE',
               m.origin,
               p.currency,
               round(CAST(p.linehaul_per_kg AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_linehaul_pivot AS m
                 RIGHT JOIN prod.air_linehaul AS p
                            ON m.origin = p.origin AND m.destination = p.destination AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.origin IS NULL
          AND m.destination IS NULL;
        -----------------------LINEHAUL PRICE - MINIMUM EXCEPTIONS---------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('Min:', m.linehaul_min)),
               'Linehaul - Minimum Changed',
               m.currency,
               round(CAST(m.linehaul_min AS NUMERIC), 4),
               m.destination,
               m.document_serial,
               'PRICE',
               m.origin,
               p.currency,
               round(CAST(p.linehaul_min AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_linehaul_pivot AS m
                 INNER JOIN prod.air_linehaul AS p
                            ON m.origin = p.origin AND m.destination = p.destination AND p.active = TRUE
                                AND round(CAST(m.linehaul_min AS NUMERIC), 4)
                                   != round(CAST(p.linehaul_min AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;

        ----------------------------------------WEIGHT BREAK----------------------------------------
    ELSEIF p_table_name = 'air_weight_break' THEN
        ----------------------WEIGHT BREAK PRICE EXCEPTIONS----------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight)),
               'Weight Break',
               'USD',
               round(CAST(m.rate AS NUMERIC), 4),
               NULL,
               m.document_serial,
               'PRICE',
               NULL,
               'USD',
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_weight_break AS m
                 INNER JOIN prod.air_weight_break AS p
                            ON m.from_weight = p.from_weight AND m.to_weight = p.to_weight
                                AND p.active = TRUE AND round(CAST(m.rate AS NUMERIC), 4)
                                   != round(CAST(p.rate AS NUMERIC), 4)
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index;
        -------------------------WEIGHT EXCEPTIONS - ONLY IN CURRENT DOCUMENT------------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight)),
               'Weight Break',
               'USD',
               round(CAST(m.rate AS NUMERIC), 4),
               NULL,
               m.document_serial,
               'PRICE',
               NULL,
               'USD',
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_weight_break AS m
                 LEFT JOIN prod.air_weight_break AS p
                           ON m.from_weight = p.from_weight AND m.to_weight = p.to_weight
                               AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND p.from_weight IS NULL
          AND p.to_weight IS NULL;
        -----------------------WEIGHT EXCEPTIONS - ONLY IN PREVIOUS DOCUMENT----------------------
        INSERT INTO prod.document_exceptions(charge_description, charge_type, current_currency, current_value,
                                             destination, document_serial, exception_type, origin,
                                             previous_currency, previous_value, record_id, tab_sheet_index, "tenantId")
        SELECT concat_ws('|', concat('FromWeight:', m.from_weight), concat('ToWeight:', m.to_weight)),
               'Weight Break',
               'USD',
               round(CAST(m.rate AS NUMERIC), 4),
               NULL,
               m.document_serial,
               'PRICE',
               NULL,
               'USD',
               round(CAST(p.rate AS NUMERIC), 4),
               m.record_id,
               m.tab_sheet_index,
               '005237f9-6779-4c68-89d6-d0800559d4f4'
        FROM mrr.air_weight_break AS m
                 RIGHT JOIN prod.air_weight_break AS p
                            ON m.from_weight = p.from_weight AND m.to_weight = p.to_weight
                                AND p.active = TRUE
        WHERE m.document_serial = p_document_serial
          AND m.tab_sheet_index = p_tab_sheet_index
          AND m.from_weight IS NULL
          AND m.to_weight IS NULL;
    END IF;

    ----------------------------------UPDATE NUMBER OF PRICE EXCEPTIONS----------------------------------------------
    UPDATE prod.document_tabsheets
    SET number_of_price_exceptions = (SELECT COUNT(e."exceptionId")
                                      FROM prod.document_exceptions AS e
                                      WHERE e.exception_kind = 'PRICE'
                                        AND e.document_serial = p_document_serial
                                        AND e.tab_sheet_index = p_tab_sheet_index)
    WHERE document_tabsheets.document_serial = p_document_serial
      AND document_tabsheets.tab_sheet_index = p_tab_sheet_index;
END;
$$;

alter procedure prod.stardox_air_insert_doc_price_exceptions(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_lcl_etl(p_document_serial integer, p_table_name text, p_tab_sheet_index integer)
    language sql
as
$$
-- CALL prod.stardox_air_pivot_doc_tables(p_document_serial, p_table_name, p_tab_sheet_index);
CALL prod.stardox_update_doc_table_name(p_document_serial, p_table_name);
    -- CALL prod.stardox_air_create_doc_routes(p_document_serial, p_table_name);
-- CALL prod.stardox_air_insert_doc_routes(p_document_serial, p_table_name, p_tab_sheet_index);
-- CALL prod.stardox_air_insert_doc_price_exceptions(p_document_serial, p_table_name, p_tab_sheet_index);
-- CALL prod.stardox_air_insert_doc_other_exceptions(p_document_serial, p_table_name, p_tab_sheet_index);
-- CALL prod.stardox_air_insert_doc_charges(p_document_serial, p_table_name, p_tab_sheet_index);

UPDATE prod.documents
SET document_status = 'ACTIVATED'
WHERE document_serial = p_document_serial;

$$;

alter procedure prod.stardox_lcl_etl(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_air_create_doc_routes(p_document_serial integer, p_table_name text,
                                                    p_tab_sheet_index integer)
    language plpgsql
as
$$
BEGIN
    ------------------------------MAINFREIGHT ROUTES------------------------------
    IF p_table_name = 'air_main_freight' THEN
        UPDATE mrr.air_main_freight_pivot AS a
        SET route_number = mr.row_num
        FROM (SELECT m.trade_lane, row_number() OVER () AS row_num
              FROM mrr.air_main_freight AS m
              WHERE m.document_serial = p_document_serial
                AND m.tab_sheet_index = p_tab_sheet_index
              GROUP BY m.trade_lane) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_sheet_index = p_tab_sheet_index
          AND a.trade_lane = mr.trade_lane;

        ------------------------------MARGINS ROUTES------------------------------
    ELSEIF p_table_name = 'air_margins' THEN
        UPDATE mrr.air_margins AS a
        SET route_number = mr.row_num
        FROM (SELECT air_type, origin_country, dest_country, document_serial, row_number() OVER () AS row_num
              FROM mrr.air_margins
              WHERE document_serial = p_document_serial
                AND tab_sheet_index = p_tab_sheet_index
              GROUP BY air_type, origin_country, dest_country, document_serial) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_sheet_index = p_tab_sheet_index
          AND a.air_type = mr.air_type
          AND a.dest_country = mr.dest_country
          AND a.origin_country = mr.dest_country;

        ------------------------------LOCAL CHARGES ROUTES------------------------------
    ELSEIF p_table_name = 'air_local_charges' THEN
        UPDATE mrr.air_local_charges AS a
        SET route_number = mr.row_num
        FROM (SELECT CASE
                         WHEN lower(m.type) = 'origin' THEN concat_ws(',', m."District", m."Country", m."Airport")
                         WHEN lower(m.type) = 'general' THEN concat_ws(',', m."District", m."Country", m."Airport")
                         WHEN lower(m.type) = 'dest' THEN NULL END   AS org,
                     CASE
                         WHEN lower(m.type) = 'dest' THEN concat_ws(',', m."District", m."Country", m."Airport")
                         WHEN lower(m.type) = 'general' THEN concat_ws(',', m."District", m."Country", m."Airport")
                         WHEN lower(m.type) = 'origin' THEN NULL END AS dest,
                     row_number() OVER ()                            AS row_num
              FROM mrr.air_local_charges AS m
              WHERE document_serial = p_document_serial
                AND m.tab_sheet_index = p_tab_sheet_index
              GROUP BY CASE
                           WHEN lower(m.type) = 'origin' THEN concat_ws(',', m."District", m."Country", m."Airport")
                           WHEN lower(m.type) = 'general'
                               THEN concat_ws(',', m."District", m."Country", m."Airport")
                           WHEN lower(m.type) = 'dest' THEN NULL END,
                       CASE
                           WHEN lower(m.type) = 'dest' THEN concat_ws(',', m."District", m."Country", m."Airport")
                           WHEN lower(m.type) = 'general'
                               THEN concat_ws(',', m."District", m."Country", m."Airport")
                           WHEN lower(m.type) = 'origin' THEN NULL END) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_sheet_index = p_tab_sheet_index
          AND CASE
                  WHEN lower(a.type) = 'origin' THEN concat_ws(',', a."District", a."Country", a."Airport")
                  WHEN lower(a.type) = 'general' THEN concat_ws(',', a."District", a."Country", a."Airport")
                  WHEN lower(a.type) = 'dest' THEN NULL END = mr.org
          AND CASE
                  WHEN lower(a.type) = 'dest' THEN concat_ws(',', a."District", a."Country", a."Airport")
                  WHEN lower(a.type) = 'general' THEN concat_ws(',', a."District", a."Country", a."Airport")
                  WHEN lower(a.type) = 'origin' THEN NULL END = mr.dest;

        ------------------------------PRE/ON CARRIAGE ROUTES------------------------------
    ELSEIF p_table_name = 'air_pre_on_carriage' THEN
        UPDATE mrr.air_pre_on_carriage AS a
        SET route_number = mr.row_num
        FROM (SELECT via_loc, loc, row_number() OVER () AS row_num
              FROM mrr.air_pre_on_carriage
              WHERE document_serial = p_document_serial
                AND tab_sheet_index = p_tab_sheet_index
              GROUP BY via_loc, loc) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_sheet_index = p_tab_sheet_index
          AND a.via_loc = mr.via_loc
          AND a.loc = mr.loc;

        ------------------------------LINEHAUL ROUTES------------------------------
    ELSEIF p_table_name = 'air_linehaul' THEN
        UPDATE mrr.air_linehaul_pivot AS a
        SET route_number = mr.row_num
        FROM (SELECT origin, destination, row_number() OVER () AS row_num
              FROM mrr.air_linehaul_pivot
              WHERE document_serial = p_document_serial
                AND tab_sheet_index = p_tab_sheet_index
              GROUP BY origin, destination) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_sheet_index = p_tab_sheet_index
          AND a.origin = mr.origin
          AND a.destination = mr.destination;
        ------------------------------WEIGHT BREAK ROUTES------------------------------
        ----------NO ROUTES FOR WEIGHT BREAK----------
--     ELSEIF p_table_name = 'air_weight_break'
--     THEN

    END IF;
END ;
$$;

alter procedure prod.stardox_air_create_doc_routes(integer, text, integer) owner to "Postgresadmin";

create function prod.get_document_other_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid        text,
                document_serial integer,
                tab_index       integer,
                "exceptionId"   integer,
                origin          text,
                destination     text,
                exception_type  text,
                document_value  text,
                expected_value  text,
                accepted        boolean
            )
    language sql
as
$$
SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       origin,
       destination,
       exception_type,
       document_value,
       expected_value,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND tab_index = p_tab_index
  AND "exception_kind" = 'OTHER'

$$;

alter function prod.get_document_other_exceptions(text, integer, integer) owner to "Postgresadmin";

create procedure prod.stardox_lcl_create_doc_routes(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN
    ------------------------------COLOADERS ROUTES------------------------------
    IF p_table_name = 'lcl_coloaders' THEN


        ------------------------------MARGINS ROUTES------------------------------
    ELSEIF p_table_name = 'lcl_margins' THEN
        UPDATE mrr.lcl_margins AS a
        SET route_number = mr.row_num
        FROM (SELECT origin_sector,
                     origin_district,
                     origin_country,
                     origin_port,
                     destination_sector,
                     destination_district,
                     destination_country,
                     destination_port,
                     row_number() OVER () AS row_num
              FROM mrr.lcl_margins AS m
              WHERE m.document_serial = p_document_serial
                AND m.tab_index = p_tab_index
              GROUP BY origin_sector,
                       origin_district,
                       origin_country,
                       origin_port,
                       destination_sector,
                       destination_district,
                       destination_country,
                       destination_port) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_index = p_tab_index
          AND a.origin_sector = mr.origin_sector
          AND a.origin_district = mr.origin_district
          AND a.origin_country = mr.origin_country
          AND a.origin_port = mr.origin_port
          AND a.destination_sector = mr.destination_sector
          AND a.destination_district = mr.destination_district
          AND a.destination_country = mr.destination_country
          AND a.destination_port = mr.destination_port;
        ------------------------------LOCAL CHARGES ROUTES------------------------------
    ELSEIF p_table_name = 'lcl_local_charges' THEN

        ------------------------------PRE/ON CARRIAGE ROUTES------------------------------
    ELSEIF p_table_name = 'lcl_pre_on_carriage' THEN

        ------------------------------ROUTING MATRIX ROUTES------------------------------


    END IF;
END ;
$$;

alter procedure prod.stardox_lcl_create_doc_routes(integer, text, integer) owner to "Postgresadmin";

create function prod.get_document_price_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid           text,
                document_serial    integer,
                tab_index          integer,
                "exceptionId"      integer,
                exception_type     text,
                origin             text,
                destination        text,
                charge_type        text,
                charge_description text,
                current_value      double precision,
                current_currency   text,
                pervious_value     double precision,
                pervious_currency  text,
                accepted           boolean
            )
    language sql
as
$$
SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       exception_type,
       origin,
       destination,
       charge_type,
       charge_description,
       current_value,
       current_currency,
       previous_value,
       previous_currency,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND "tab_index" = p_tab_index
  AND "exception_kind" = 'PRICE'

$$;

alter function prod.get_document_price_exceptions(text, integer, integer) owner to "Postgresadmin";

create procedure prod.stardox_lcl_insert_doc_routes(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN
    ------------------------------COLOADERS ROUTES------------------------------
    IF p_table_name = 'lcl_coloaders' THEN


        ------------------------------MARGINS ROUTES------------------------------
    ELSEIF p_table_name = 'lcl_margins' THEN

        ------------------------------LOCAL CHARGES ROUTES------------------------------
    ELSEIF p_table_name = 'lcl_local_charges' THEN

        ------------------------------PRE/ON CARRIAGE ROUTES------------------------------
    ELSEIF p_table_name = 'lcl_pre_on_carriage' THEN

        ------------------------------ROUTING MATRIX ROUTES------------------------------

    END IF;
END;
$$;

alter procedure prod.stardox_lcl_insert_doc_routes(integer, text, integer) owner to "Postgresadmin";

create function prod.get_document_exceptions(p_tenant_id text, p_document_serial integer, p_only_rejected boolean)
    returns TABLE
            (
                tab_index                  integer,
                sheet_name                 text,
                number_of_price_exceptions integer,
                number_of_other_exceptions integer
            )
    language sql
as
$$
SELECT distinct E1.tab_index,
                T1.sheet_name,
                COALESCE("number_of_price_exceptions", 0) as number_of_price_exceptions,
                COALESCE("number_of_other_exceptions", 0) as number_of_other_exceptions
FROM prod.document_exceptions E1
         INNER JOIN prod.document_tabsheets T1
                    ON E1.document_serial = T1.document_serial
                        AND E1.tab_index = T1.tab_index
WHERE E1."tenantId" = p_tenant_id
  AND E1.document_serial = p_document_serial
  AND E1.accepted = p_only_rejected

$$;

alter function prod.get_document_exceptions(text, integer, boolean) owner to "Postgresadmin";

create function prod.get_document_rejected_other_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid        text,
                document_serial integer,
                tab_index       integer,
                "exceptionId"   integer,
                origin          text,
                destination     text,
                exception_type  text,
                document_value  text,
                expected_value  text,
                accepted        boolean
            )
    language sql
as
$$
SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       origin,
       destination,
       exception_type,
       document_value,
       expected_value,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND tab_index = p_tab_index
  AND "exception_kind" = 'OTHER'
  AND "accepted" = FALSE


$$;

alter function prod.get_document_rejected_other_exceptions(text, integer, integer) owner to "Postgresadmin";

create function prod.get_document_rejected_price_exceptions(p_tenant_id text, p_document_serial integer, p_tab_index integer)
    returns TABLE
            (
                tenantid           text,
                document_serial    integer,
                tab_index          integer,
                "exceptionId"      integer,
                exception_type     text,
                origin             text,
                destination        text,
                charge_type        text,
                charge_description text,
                current_value      double precision,
                current_currency   text,
                pervious_value     double precision,
                pervious_currency  text,
                accepted           boolean
            )
    language sql
as
$$
SELECT "tenantId",
       document_serial,
       tab_index,
       "exceptionId",
       exception_type,
       origin,
       destination,
       charge_type,
       charge_description,
       current_value,
       current_currency,
       previous_value,
       previous_currency,
       accepted

FROM prod.document_exceptions
WHERE "tenantId" = p_tenant_id
  AND "document_serial" = p_document_serial
  AND "tab_index" = p_tab_index
  AND "exception_kind" = 'PRICE'
  AND accepted = FALSE


$$;

alter function prod.get_document_rejected_price_exceptions(text, integer, integer) owner to "Postgresadmin";

