create procedure prod.stardox_parse_set_route_number(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------Document Parse ROUTES------------------------------
    IF p_table_name = 'document_parse' THEN

        UPDATE mrr.document_parse AS a
        SET route_number = mr.row_num
        FROM (SELECT route_name,
                     row_number() OVER () AS row_num
              FROM mrr.document_parse
              WHERE document_serial = p_document_serial
                AND tab_index = p_tab_index
                AND tab_index = p_tab_index
              GROUP BY route_name
             ) AS mr
        WHERE a.document_serial = p_document_serial
          AND a.tab_index = p_tab_index
          AND a.route_name = mr.route_name;
    END IF;
END ;
$$;

alter procedure prod.stardox_parse_set_route_number(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_parse_insert_doc_routes(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------DOCUMENT ROUTES------------------------------
    IF p_table_name = 'document_parse' THEN
        INSERT INTO prod.document_routes("tenantId",
                                         document_serial,
                                         route_number,
                                         origin_city_code,
                                         origin_city_name,
                                         origin_country_code,
                                         origin_country_name,
                                         origin_port_code,
                                         origin_state_code,
                                         origin_state_name,
                                         destination_city_code,
                                         destination_city_name,
                                         destination_country_code,
                                         destination_country_name,
                                         destination_port_code,
                                         destination_state_code,
                                         destination_state_name,
                                         validity_date,
                                         route_name,
                                         tab_index,
                                         service)
        SELECT m."tenantId",
               m.document_serial,
               m.route_number,
               m.origin_city_code,
               m.origin_city_name,
               m.origin_country_code,
               m.origin_country_name,
               m.origin_port_code,
               m.origin_state_code,
               m.origin_state_name,
               m.destination_city_code,
               m.destination_city_name,
               m.destination_country_code,
               m.destination_country_name,
               m.destination_port_code,
               m.destination_state_code,
               m.destination_state_name,
               m.validity_date,
               m.route_name,
               m.tab_index,
               m.service
        FROM mrr.document_parse AS m
        WHERE m.tab_index = p_tab_index
          AND m.document_serial = p_document_serial
        GROUP BY "tenantId",
                 m.document_serial,
                 m.route_number,
                 m.destination_city_code,
                 m.destination_city_name,
                 m.destination_country_code,
                 m.destination_country_name,
                 m.destination_port_code,
                 m.destination_state_code,
                 m.destination_state_name,
                 m.origin_city_code,
                 m.origin_city_name,
                 m.origin_country_code,
                 m.origin_country_name,
                 m.origin_port_code,
                 m.origin_state_code,
                 m.origin_state_name,
                 m.validity_date,
                 m.route_name,
                 m.tab_index,
                 m.service;

    END IF;
END;
$$;

alter procedure prod.stardox_parse_insert_doc_routes(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_parse_insert_doc_charges(p_document_serial integer, p_table_name text, p_tab_index integer)
    language plpgsql
as
$$
BEGIN

    ------------------------------Document Parse CHARGES------------------------------
    IF p_table_name = 'document_parse' THEN

        INSERT INTO prod.document_charges("tenantId",
                                          document_serial,
                                          charge_type,
                                          units,
                                          price_value,
                                          price_currency_code,
                                          remarks,
                                          route_number,
                                          record_id,
                                          tab_index,
                                          last30d_value,
                                          last30d_currency_code,
                                          last60d_value,
                                          last60d_currency_code,
                                          last90d_value,
                                          last90d_currency_code,
                                          last120d_value,
                                          last120d_currency_code)
        SELECT "tenantId",
               m.document_serial,
               concat_ws('-', m.charge_name),
               m.container,
               CAST(m.cost AS DOUBLE PRECISION),
               m.currency,
               concat_ws('|', concat('ContainerType:', m.container),
                         concat('ServiceProvider:', m.service_provider_name), concat('IncoTerm:', m.incoterm),
                         concat('Commodity:', m.commodity), concat('Remarks:', m.rate_remarks)),
               m.route_number,
               m.record_id,
               m.tab_index,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM mrr.document_parse AS m
        WHERE m.document_serial = p_document_serial
          AND m.tab_index = p_tab_index
          AND m.record_id NOT IN (SELECT e.record_id
                                  FROM prod.document_exceptions AS e
                                  WHERE e.document_serial = p_document_serial
                                    AND e.tab_index = p_tab_index);


    END IF;

END;
$$;

alter procedure prod.stardox_parse_insert_doc_charges(integer, text, integer) owner to "Postgresadmin";

create procedure prod.stardox_parse_doc_etl(p_document_serial integer, p_table_name text, p_tab_index integer)
    language sql
as
$$
CALL prod.stardox_parse_set_route_number(p_document_serial, p_table_name, p_tab_index);
CALL prod.stardox_parse_insert_doc_routes(p_document_serial, p_table_name, p_tab_index);
CALL prod.stardox_parse_insert_doc_charges(p_document_serial, p_table_name, p_tab_index);

------------------------------
UPDATE prod.documents
SET document_status = 'ACTIVATED'
WHERE documents.document_serial = p_document_serial;


$$;

alter procedure prod.stardox_parse_doc_etl(integer, text, integer) owner to "Postgresadmin";

